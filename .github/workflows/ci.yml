name: CI
on:
  push:
    paths-ignore:
      - "**.md"
      - "LICENSE"
jobs:
  analyze:
    strategy:
      matrix:
        os:
          - ubuntu-latest
        go-version:
          - 1.21.0
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: false
          check-latest: false
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg
          key: ${{ matrix.os }}-go${{ matrix.go-version }}-${{ github.job }}-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ matrix.os }}-go${{ matrix.go-version }}-${{ github.job }}-
      - name: Generate secrets
        run: |
          ./script/bootstrap/key.sh
          ./script/bootstrap/keypair.sh
      - uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          skip-pkg-cache: true
          skip-build-cache: true
  build:
    needs: analyze
    strategy:
      matrix:
        os:
          - ubuntu-latest
        go-version:
          - 1.21.0
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Restore Go build cache
        uses: actions/cache@v3
        with:
          path: go-build-cache
          key: ${{ matrix.os }}-go${{ matrix.go-version }}-${{ github.jom }}-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ matrix.os }}-go${{ matrix.go-version }}-${{ github.jom }}-
      - name: Inject Go build cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v2.1.2
        with:
          cache-source: go-build-cache
      - name: Generate secrets
        run: |
          ./script/bootstrap/key.sh
          ./script/bootstrap/keypair.sh
#      - name: Build deploy-builder image
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          file: ./docker/app/Dockerfile
#          target: deploy-builder
#          build-args: "VERSION=dev"
#          tags: 42milez/go-oidc-server-app-integ-test:latest
#          push: true
#          cache-from: type=gha
#          cache-to: type=gha,mode=max
      - name: Build deploy image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/app/Dockerfile
          target: deploy
          tags: 42milez/go-oidc-server-app-integ-test:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha
  test:
    needs:
      - analyze
      - build
    strategy:
      matrix:
        os:
          - ubuntu-latest
        go-version:
          - 1.21.0
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: false
          check-latest: false
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg
          key: ${{ github.job }}-go${{ matrix.go-version }}-${{ github.ref_name }}-${{ hashFiles('go.sum') }}
          restore-keys: ${{ github.job }}-go${{ matrix.go-version }}-${{ github.ref_name }}-
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Generate secrets
        run: |
          ./script/bootstrap/key.sh
          ./script/bootstrap/keypair.sh
      - name: Install atlas
        run: curl -sSf https://atlasgo.sh | sh
      - name: Start services
        run: docker-compose up -d app-integ-test cache db
      - name: Wait for database to be available
        run: .github/scripts/waiter/db.sh
      - name: Apply migrations
        run: make migrate-apply DB_NAMES=idp_integ_test
      - name: Run all tests
        run: make test
  notify:
    if: always()
    needs: [ analyze, test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Post CI status to Slack
        run: |
          .github/scripts/notifier/post-ci-status-to-slack.sh
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          TEST_RESULT: ${{ needs.test.result }}
          SLACK_BOT_USER_OAUTH_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
