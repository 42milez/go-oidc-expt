// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20231204155340-1f53862bcc64 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/42milez/go-oidc-server/app/idp/option"
	"github.com/42milez/go-oidc-server/app/pkg/typedef"
	"github.com/42milez/go-oidc-server/app/pkg/xerr"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/getkin/kin-openapi/openapi3filter"
	"github.com/go-chi/chi/v5"
	nethttpmiddleware "github.com/oapi-codegen/nethttp-middleware"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for DisplayValuesSupported.
const (
	Page DisplayValuesSupported = "page"
)

// Defines values for IDTokenSigningAlgValuesSupported.
const (
	ES256 IDTokenSigningAlgValuesSupported = "ES256"
)

// Defines values for ResponseTypesSupported.
const (
	ResponseTypesSupportedCode ResponseTypesSupported = "code"
)

// Defines values for ScopesSupported.
const (
	Email   ScopesSupported = "email"
	Openid  ScopesSupported = "openid"
	Profile ScopesSupported = "profile"
)

// Defines values for SubjectTypesSupported.
const (
	Public SubjectTypesSupported = "public"
)

// Defines values for TokenEndpointAuthMethodsSupported.
const (
	ClientSecretBasic TokenEndpointAuthMethodsSupported = "client_secret_basic"
)

// Defines values for UILocalesSupported.
const (
	JaJP UILocalesSupported = "ja-JP"
)

// Defines values for TokenErrorResponseError.
const (
	TokenErrorResponseErrorInvalidClient        TokenErrorResponseError = "invalid_client"
	TokenErrorResponseErrorInvalidGrant         TokenErrorResponseError = "invalid_grant"
	TokenErrorResponseErrorInvalidRequest       TokenErrorResponseError = "invalid_request"
	TokenErrorResponseErrorInvalidScope         TokenErrorResponseError = "invalid_scope"
	TokenErrorResponseErrorUnauthorizedClient   TokenErrorResponseError = "unauthorized_client"
	TokenErrorResponseErrorUnsupportedGrantType TokenErrorResponseError = "unsupported_grant_type"
)

// ConfigurationResponse Represents the configuration information of OpenID Provider.
type ConfigurationResponse struct {
	AuthorizationEndpoint             string                              `json:"authorization_endpoint"`
	DisplayValuesSupported            []DisplayValuesSupported            `json:"display_values_supported"`
	IDTokenSigningAlgValuesSupported  []IDTokenSigningAlgValuesSupported  `json:"id_token_signing_alg_values_supported"`
	Issuer                            string                              `json:"issuer"`
	JWKsURI                           string                              `json:"jwks_uri"`
	ResponseTypesSupported            []ResponseTypesSupported            `json:"response_types_supported"`
	ScopesSupported                   []ScopesSupported                   `json:"scopes_supported"`
	SubjectTypesSupported             []SubjectTypesSupported             `json:"subject_types_supported"`
	TokenEndpoint                     string                              `json:"token_endpoint"`
	TokenEndpointAuthMethodsSupported []TokenEndpointAuthMethodsSupported `json:"token_endpoint_auth_methods_supported"`
	UILocalesSupported                []UILocalesSupported                `json:"ui_locales_supported"`
	UserInfoEndpoint                  string                              `json:"userinfo_endpoint"`
}

// DisplayValuesSupported defines model for ConfigurationResponse.display_values_supported.
type DisplayValuesSupported string

// IDTokenSigningAlgValuesSupported defines model for ConfigurationResponse.id_token_signing_alg_values_supported.
type IDTokenSigningAlgValuesSupported string

// ResponseTypesSupported defines model for ConfigurationResponse.response_types_supported.
type ResponseTypesSupported string

// ScopesSupported defines model for ConfigurationResponse.scopes_supported.
type ScopesSupported string

// SubjectTypesSupported defines model for ConfigurationResponse.subject_types_supported.
type SubjectTypesSupported string

// TokenEndpointAuthMethodsSupported defines model for ConfigurationResponse.token_endpoint_auth_methods_supported.
type TokenEndpointAuthMethodsSupported string

// UILocalesSupported defines model for ConfigurationResponse.ui_locales_supported.
type UILocalesSupported string

// ErrorResponse Represents error response
type ErrorResponse struct {
	Details *[]string        `json:"details,omitempty"`
	Status  uint64           `json:"status"`
	Summary xerr.PublicError `json:"summary"`
}

// Health Represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// TokenErrorResponse https://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenErrorResponse
type TokenErrorResponse struct {
	Error TokenErrorResponseError `json:"error"`
}

// TokenErrorResponseError defines model for TokenErrorResponse.Error.
type TokenErrorResponseError string

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	AccessToken  string            `json:"access_token"`
	ExpiresIn    uint64            `json:"expires_in"`
	IDToken      *string           `json:"id_token,omitempty"`
	RefreshToken string            `json:"refresh_token"`
	TokenType    typedef.TokenType `json:"token_type"`
}

// User defines model for User.
type User struct {
	ID   typedef.UserID `json:"id" validate:"required"`
	Name string         `json:"name" validate:"required"`
}

// UserName Represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword Represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientID defines model for ClientID.
type ClientID = typedef.ClientID

// Code defines model for Code.
type Code = string

// Display defines model for Display.
type Display = string

// GrantType defines model for GrantType.
type GrantType = typedef.GrantType

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectURI defines model for RedirectUri.
type RedirectURI = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError Represents error response
type InternalServerError = ErrorResponse

// InvalidRequest Represents error response
type InvalidRequest = ErrorResponse

// UnauthorizedRequest Represents error response
type UnauthorizedRequest = ErrorResponse

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientId Represents "client_id" parameter
	ClientID ClientID `form:"client_id" json:"client_id" schema:"client_id" url:"client_id" validate:"required,alphanum"`

	// Nonce Represents "nonce" parameter
	Nonce Nonce `form:"nonce" json:"nonce" schema:"nonce" url:"nonce" validate:"required,alphanum"`

	// RedirectUri Represents "redirect_uri" parameter
	RedirectURI RedirectURI `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" url:"redirect_uri" validate:"required,url_encoded"`

	// ResponseType Represents "response_type" parameter
	ResponseType ResponseType `form:"response_type" json:"response_type" schema:"response_type" url:"response_type" validate:"required,response-type-validator"`

	// Scope Represents "scope" parameter
	Scope Scope `form:"scope" json:"scope" schema:"scope" url:"scope" validate:"required,scope-validator"`

	// State Represents "state" parameter
	State State `form:"state" json:"state" schema:"state" url:"state" validate:"required,alphanum"`

	// Display Represents "display" parameter
	Display Display `form:"display" json:"display" schema:"display" url:"display" validate:"required,display-validator"`

	// MaxAge Represents "max_age" parameter
	MaxAge MaxAge `form:"max_age" json:"max_age" schema:"max_age" url:"max_age" validate:"required,numeric"`

	// Prompt Represents "prompt" parameter
	Prompt Prompt `form:"prompt" json:"prompt" schema:"prompt" url:"prompt" validate:"required,prompt-validator"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// TokenFormdataBody defines parameters for Token.
type TokenFormdataBody struct {
	// Code Represents "code" parameter
	Code *string `form:"code" json:"code" schema:"code" validate:"omitempty,alphanum"`

	// GrantType Represents "grant_type" parameter
	GrantType typedef.GrantType `form:"grant_type" json:"grant_type" schema:"grant_type" validate:"required,grant-type-validator"`

	// RedirectUri Represents "redirect_uri" parameter
	RedirectURI *string `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" validate:"omitempty,url_encoded"`

	// RefreshToken Represents "refresh_token" parameter
	RefreshToken *string `form:"refresh_token" json:"refresh_token" schema:"refresh_token" validate:"omitempty,jwt"`
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody TokenFormdataBody

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

//  Interface
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// GET: /connect/.well-known/openid-configuration
	Configuration(w http.ResponseWriter, r *http.Request)

	// GET: /connect/authorization
	Authorize(w http.ResponseWriter, r *http.Request)

	// POST: /connect/token
	Token(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /user/authentication
	Authenticate(w http.ResponseWriter, r *http.Request)

	// POST: /user/consent
	Consent(w http.ResponseWriter, r *http.Request)

	// POST: /user/registration
	Register(w http.ResponseWriter, r *http.Request)
}

//  Middleware
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetConfigurationMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Configuration", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetTokenMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Token", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

func injectRequestParameter(r *http.Request) (*http.Request, error) {
	switch r.URL.Path {
	case "/connect/.well-known/openid-configuration":
		return unmarshalConfigurationParameter(r)
	case "/connect/authorization":
		return unmarshalAuthorizeParameter(r)
	case "/connect/token":
		return unmarshalTokenParameter(r)
	case "/health":
		return unmarshalCheckHealthParameter(r)
	case "/user/authentication":
		return unmarshalAuthenticateParameter(r)
	case "/user/consent":
		return unmarshalConsentParameter(r)
	case "/user/registration":
		return unmarshalRegisterParameter(r)
	default:
		return nil, xerr.InvalidPath
	}
}

func unmarshalConfigurationParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

func unmarshalAuthorizeParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &AuthorizeParams{}

	// --------------------------------------------------
	//  Query Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	// Required query parameter "client_id"
	err = runtime.BindQueryParameter("form", true, true, "client_id", r.URL.Query(), &params.ClientID)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "client_id",
			Err:       err,
		}
	}

	// Required query parameter "nonce"
	err = runtime.BindQueryParameter("form", true, true, "nonce", r.URL.Query(), &params.Nonce)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "nonce",
			Err:       err,
		}
	}

	// Required query parameter "redirect_uri"
	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", r.URL.Query(), &params.RedirectURI)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "redirect_uri",
			Err:       err,
		}
	}

	// Required query parameter "response_type"
	err = runtime.BindQueryParameter("form", true, true, "response_type", r.URL.Query(), &params.ResponseType)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "response_type",
			Err:       err,
		}
	}

	// Required query parameter "scope"
	err = runtime.BindQueryParameter("form", true, true, "scope", r.URL.Query(), &params.Scope)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "scope",
			Err:       err,
		}
	}

	// Required query parameter "state"
	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "state",
			Err:       err,
		}
	}

	// Required query parameter "display"
	err = runtime.BindQueryParameter("form", true, true, "display", r.URL.Query(), &params.Display)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "display",
			Err:       err,
		}
	}

	// Required query parameter "max_age"
	err = runtime.BindQueryParameter("form", true, true, "max_age", r.URL.Query(), &params.MaxAge)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "max_age",
			Err:       err,
		}
	}

	// Required query parameter "prompt"
	err = runtime.BindQueryParameter("form", true, true, "prompt", r.URL.Query(), &params.Prompt)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "prompt",
			Err:       err,
		}
	}

	//  Query Parameter: END
	// --------------------------------------------------

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalTokenParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	//  Security Definition: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	//  Security Definition: END
	// ==================================================

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &TokenParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalCheckHealthParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

func unmarshalAuthenticateParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &AuthenticateParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalConsentParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &ConsentParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalRegisterParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

//  Handler and others
// --------------------------------------------------

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(hi HandlerInterface, option *ChiServerOptions, appOption *option.Option) (*chi.Mux, error) {
	r := option.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if option.ErrorHandlerFunc == nil {
		option.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	swag, err := GetSwagger()
	if err != nil {
		return nil, err
	}
	swag.Servers = nil

	oapiValidator := nethttpmiddleware.OapiRequestValidatorWithOptions(swag, &nethttpmiddleware.Options{
		Options: openapi3filter.Options{
			AuthenticationFunc: NewOapiAuthentication(appOption),
		},
		ErrorHandler: NewOapiErrorHandler(),
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Configuration"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/connect/.well-known/openid-configuration", hi.Configuration)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/connect/authorization", hi.Authorize)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Token"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/connect/token", hi.Token)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", hi.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/authentication", hi.Authenticate)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/consent", hi.Consent)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/registration", hi.Register)
	})

	return r, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wIAAP//8d/vZ9VAAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
