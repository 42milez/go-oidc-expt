// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20231204155340-1f53862bcc64 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/42milez/go-oidc-server/app/idp/option"
	"github.com/42milez/go-oidc-server/app/pkg/typedef"
	"github.com/42milez/go-oidc-server/app/pkg/xerr"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/getkin/kin-openapi/openapi3filter"
	"github.com/go-chi/chi/v5"
	nethttpmiddleware "github.com/oapi-codegen/nethttp-middleware"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for TokenErrorResponseError.
const (
	TokenErrorResponseErrorInvalidClient        TokenErrorResponseError = "invalid_client"
	TokenErrorResponseErrorInvalidGrant         TokenErrorResponseError = "invalid_grant"
	TokenErrorResponseErrorInvalidRequest       TokenErrorResponseError = "invalid_request"
	TokenErrorResponseErrorInvalidScope         TokenErrorResponseError = "invalid_scope"
	TokenErrorResponseErrorUnauthorizedClient   TokenErrorResponseError = "unauthorized_client"
	TokenErrorResponseErrorUnsupportedGrantType TokenErrorResponseError = "unsupported_grant_type"
)

// ErrorResponse represents error response
type ErrorResponse struct {
	Details *[]string        `json:"details,omitempty"`
	Status  uint64           `json:"status"`
	Summary xerr.PublicError `json:"summary"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// TokenErrorResponse https://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenErrorResponse
type TokenErrorResponse struct {
	Error TokenErrorResponseError `json:"error"`
}

// TokenErrorResponseError defines model for TokenErrorResponse.Error.
type TokenErrorResponseError string

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	AccessToken  string            `json:"access_token"`
	ExpiresIn    uint64            `json:"expires_in"`
	IDToken      *string           `json:"id_token,omitempty"`
	RefreshToken string            `json:"refresh_token"`
	TokenType    typedef.TokenType `json:"token_type"`
}

// User defines model for User.
type User struct {
	ID   typedef.UserID `json:"id" validate:"required"`
	Name string         `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientID defines model for ClientID.
type ClientID = typedef.ClientID

// Code defines model for Code.
type Code = string

// Display defines model for Display.
type Display = string

// GrantType defines model for GrantType.
type GrantType = string

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectURI defines model for RedirectUri.
type RedirectURI = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError represents error response
type InternalServerError = ErrorResponse

// InvalidRequest represents error response
type InvalidRequest = ErrorResponse

// UnauthorizedRequest represents error response
type UnauthorizedRequest = ErrorResponse

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientId represents "client_id" parameter
	ClientID ClientID `form:"client_id" json:"client_id" schema:"client_id" url:"client_id" validate:"required,alphanum"`

	// Nonce represents "nonce" parameter
	Nonce Nonce `form:"nonce" json:"nonce" schema:"nonce" url:"nonce" validate:"required,alphanum"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectURI RedirectURI `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" url:"redirect_uri" validate:"required,url_encoded"`

	// ResponseType represents "response_type" parameter
	ResponseType ResponseType `form:"response_type" json:"response_type" schema:"response_type" url:"response_type" validate:"required,response-type-validator"`

	// Scope represents "scope" parameter
	Scope Scope `form:"scope" json:"scope" schema:"scope" url:"scope" validate:"required,scope-validator"`

	// State represents "state" parameter
	State State `form:"state" json:"state" schema:"state" url:"state" validate:"required,alphanum"`

	// Display represents "display" parameter
	Display Display `form:"display" json:"display" schema:"display" url:"display" validate:"required,display-validator"`

	// MaxAge represents "max_age" parameter
	MaxAge MaxAge `form:"max_age" json:"max_age" schema:"max_age" url:"max_age" validate:"required,numeric"`

	// Prompt represents "prompt" parameter
	Prompt Prompt `form:"prompt" json:"prompt" schema:"prompt" url:"prompt" validate:"required,prompt-validator"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// TokenFormdataBody defines parameters for Token.
type TokenFormdataBody struct {
	// Code represents "code" parameter
	Code *string `form:"code" json:"code" schema:"code" validate:"omitempty,alphanum"`

	// GrantType represents "grant_type" parameter
	GrantType string `form:"grant_type" json:"grant_type" schema:"grant_type" validate:"required,grant-type-validator"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectURI *string `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" validate:"omitempty,url_encoded"`

	// RefreshToken represents "refresh_token" parameter
	RefreshToken *string `form:"refresh_token" json:"refresh_token" schema:"refresh_token" validate:"omitempty,jwt"`
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody TokenFormdataBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

//  Interface
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authentication
	Authenticate(w http.ResponseWriter, r *http.Request)

	// GET: /authorization
	Authorize(w http.ResponseWriter, r *http.Request)

	// POST: /consent
	Consent(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /token
	Token(w http.ResponseWriter, r *http.Request)

	// POST: /user/registration
	Register(w http.ResponseWriter, r *http.Request)
}

//  Middleware
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetTokenMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Token", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

func injectRequestParameter(r *http.Request) (*http.Request, error) {
	switch r.URL.Path {
	case "/authentication":
		return unmarshalAuthenticateParameter(r)
	case "/authorization":
		return unmarshalAuthorizeParameter(r)
	case "/consent":
		return unmarshalConsentParameter(r)
	case "/health":
		return unmarshalCheckHealthParameter(r)
	case "/token":
		return unmarshalTokenParameter(r)
	case "/user/registration":
		return unmarshalRegisterParameter(r)
	default:
		return nil, xerr.InvalidPath
	}
}

func unmarshalAuthenticateParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &AuthenticateParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalAuthorizeParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &AuthorizeParams{}

	// --------------------------------------------------
	//  Query Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	// Required query parameter "client_id"
	err = runtime.BindQueryParameter("form", true, true, "client_id", r.URL.Query(), &params.ClientID)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "client_id",
			Err:       err,
		}
	}

	// Required query parameter "nonce"
	err = runtime.BindQueryParameter("form", true, true, "nonce", r.URL.Query(), &params.Nonce)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "nonce",
			Err:       err,
		}
	}

	// Required query parameter "redirect_uri"
	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", r.URL.Query(), &params.RedirectURI)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "redirect_uri",
			Err:       err,
		}
	}

	// Required query parameter "response_type"
	err = runtime.BindQueryParameter("form", true, true, "response_type", r.URL.Query(), &params.ResponseType)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "response_type",
			Err:       err,
		}
	}

	// Required query parameter "scope"
	err = runtime.BindQueryParameter("form", true, true, "scope", r.URL.Query(), &params.Scope)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "scope",
			Err:       err,
		}
	}

	// Required query parameter "state"
	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "state",
			Err:       err,
		}
	}

	// Required query parameter "display"
	err = runtime.BindQueryParameter("form", true, true, "display", r.URL.Query(), &params.Display)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "display",
			Err:       err,
		}
	}

	// Required query parameter "max_age"
	err = runtime.BindQueryParameter("form", true, true, "max_age", r.URL.Query(), &params.MaxAge)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "max_age",
			Err:       err,
		}
	}

	// Required query parameter "prompt"
	err = runtime.BindQueryParameter("form", true, true, "prompt", r.URL.Query(), &params.Prompt)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "prompt",
			Err:       err,
		}
	}

	//  Query Parameter: END
	// --------------------------------------------------

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalConsentParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &ConsentParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalCheckHealthParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

func unmarshalTokenParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	//  Security Definition: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	//  Security Definition: END
	// ==================================================

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &TokenParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalRegisterParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

//  Handler and others
// --------------------------------------------------

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(hi HandlerInterface, option *ChiServerOptions, appOption *option.Option) (*chi.Mux, error) {
	r := option.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if option.ErrorHandlerFunc == nil {
		option.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	swag, err := GetSwagger()
	if err != nil {
		return nil, err
	}
	swag.Servers = nil

	oapiValidator := nethttpmiddleware.OapiRequestValidatorWithOptions(swag, &nethttpmiddleware.Options{
		Options: openapi3filter.Options{
			AuthenticationFunc: NewOapiAuthentication(appOption),
		},
		ErrorHandler: NewOapiErrorHandler(),
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authentication", hi.Authenticate)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/authorization", hi.Authorize)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/consent", hi.Consent)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", hi.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Token"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/token", hi.Token)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/registration", hi.Register)
	})

	return r, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"L/8JAAD//9DcJU9TNgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
