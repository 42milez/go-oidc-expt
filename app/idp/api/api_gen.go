// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/42milez/go-oidc-server/app/idp/option"
	"github.com/42milez/go-oidc-server/app/pkg/typedef"
	"github.com/42milez/go-oidc-server/app/pkg/xerr"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/getkin/kin-openapi/openapi3filter"
	"github.com/go-chi/chi/v5"
	nethttpmiddleware "github.com/oapi-codegen/nethttp-middleware"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for DisplayValuesSupported.
const (
	Page DisplayValuesSupported = "page"
)

// Defines values for IDTokenSigningAlgValuesSupported.
const (
	ES256 IDTokenSigningAlgValuesSupported = "ES256"
)

// Defines values for ResponseTypesSupported.
const (
	ResponseTypesSupportedCode ResponseTypesSupported = "code"
)

// Defines values for ScopesSupported.
const (
	Email   ScopesSupported = "email"
	Openid  ScopesSupported = "openid"
	Profile ScopesSupported = "profile"
)

// Defines values for SubjectTypesSupported.
const (
	Public SubjectTypesSupported = "public"
)

// Defines values for TokenEndpointAuthMethodsSupported.
const (
	ClientSecretBasic TokenEndpointAuthMethodsSupported = "client_secret_basic"
)

// Defines values for UILocalesSupported.
const (
	JaJP UILocalesSupported = "ja-JP"
)

// Defines values for JWKCrv.
const (
	P256 JWKCrv = "P-256"
)

// Defines values for JWKKty.
const (
	EC JWKKty = "EC"
)

// Defines values for TokenErrorResponseError.
const (
	TokenErrorResponseErrorInvalidClient        TokenErrorResponseError = "invalid_client"
	TokenErrorResponseErrorInvalidGrant         TokenErrorResponseError = "invalid_grant"
	TokenErrorResponseErrorInvalidRequest       TokenErrorResponseError = "invalid_request"
	TokenErrorResponseErrorInvalidScope         TokenErrorResponseError = "invalid_scope"
	TokenErrorResponseErrorUnauthorizedClient   TokenErrorResponseError = "unauthorized_client"
	TokenErrorResponseErrorUnsupportedGrantType TokenErrorResponseError = "unsupported_grant_type"
)

// ConfigurationResponse Represents the configuration information of OpenID Provider.
type ConfigurationResponse struct {
	AuthorizationEndpoint             string                              `json:"authorization_endpoint"`
	DisplayValuesSupported            []DisplayValuesSupported            `json:"display_values_supported"`
	IDTokenSigningAlgValuesSupported  []IDTokenSigningAlgValuesSupported  `json:"id_token_signing_alg_values_supported"`
	Issuer                            string                              `json:"issuer"`
	JWKsURI                           string                              `json:"jwks_uri"`
	ResponseTypesSupported            []ResponseTypesSupported            `json:"response_types_supported"`
	ScopesSupported                   []ScopesSupported                   `json:"scopes_supported"`
	SubjectTypesSupported             []SubjectTypesSupported             `json:"subject_types_supported"`
	TokenEndpoint                     string                              `json:"token_endpoint"`
	TokenEndpointAuthMethodsSupported []TokenEndpointAuthMethodsSupported `json:"token_endpoint_auth_methods_supported"`
	UILocalesSupported                []UILocalesSupported                `json:"ui_locales_supported"`
	UserInfoEndpoint                  string                              `json:"userinfo_endpoint"`
}

// DisplayValuesSupported defines model for ConfigurationResponse.display_values_supported.
type DisplayValuesSupported string

// IDTokenSigningAlgValuesSupported defines model for ConfigurationResponse.id_token_signing_alg_values_supported.
type IDTokenSigningAlgValuesSupported string

// ResponseTypesSupported defines model for ConfigurationResponse.response_types_supported.
type ResponseTypesSupported string

// ScopesSupported defines model for ConfigurationResponse.scopes_supported.
type ScopesSupported string

// SubjectTypesSupported defines model for ConfigurationResponse.subject_types_supported.
type SubjectTypesSupported string

// TokenEndpointAuthMethodsSupported defines model for ConfigurationResponse.token_endpoint_auth_methods_supported.
type TokenEndpointAuthMethodsSupported string

// UILocalesSupported defines model for ConfigurationResponse.ui_locales_supported.
type UILocalesSupported string

// ErrorResponse Represents error response
type ErrorResponse struct {
	Details *[]string        `json:"details,omitempty"`
	Status  uint64           `json:"status"`
	Summary xerr.PublicError `json:"summary"`
}

// Health Represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// JWK JSON Web Key format
type JWK struct {
	// Crv ECDSA
	Crv JWKCrv `json:"crv"`

	// Kid Key ID
	Kid string `json:"kid"`

	// Kty Key type ( Only supports elliptic curve key )
	Kty JWKKty `json:"kty"`

	// Use Public key use
	Use string `json:"use"`

	// X X coordinate of elliptic curve key
	X string `json:"x"`

	// Y Y coordinate of elliptic curve key
	Y string `json:"y"`
}

// JWKCrv ECDSA
type JWKCrv string

// JWKKty Key type ( Only supports elliptic curve key )
type JWKKty string

// JwksResponse Represents the set of JSON Web Key
type JwksResponse struct {
	// Keys The set of JSON Web Key
	Keys []JWK `json:"keys"`
}

// TokenErrorResponse https://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenErrorResponse
type TokenErrorResponse struct {
	Error TokenErrorResponseError `json:"error"`
}

// TokenErrorResponseError defines model for TokenErrorResponse.Error.
type TokenErrorResponseError string

// TokenResponse ...
type TokenResponse struct {
	AccessToken  string            `json:"access_token"`
	ExpiresIn    uint64            `json:"expires_in"`
	IDToken      *string           `json:"id_token,omitempty"`
	RefreshToken string            `json:"refresh_token"`
	TokenType    typedef.TokenType `json:"token_type"`
}

// User defines model for User.
type User struct {
	ID   typedef.UserID `json:"id" validate:"required"`
	Name string         `json:"name" validate:"required"`
}

// UserInfoResponse Represents user information
type UserInfoResponse struct {
	Name *string `json:"name,omitempty"`
	Sub  *uint64 `json:"sub,omitempty"`
}

// UserName Represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword Represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientID defines model for ClientID.
type ClientID = typedef.ClientID

// Code defines model for Code.
type Code = string

// Display defines model for Display.
type Display = string

// GrantType defines model for GrantType.
type GrantType = typedef.GrantType

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectURI defines model for RedirectUri.
type RedirectURI = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError Represents error response
type InternalServerError = ErrorResponse

// InvalidRequest Represents error response
type InvalidRequest = ErrorResponse

// UnauthorizedRequest Represents error response
type UnauthorizedRequest = ErrorResponse

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientID Represents "client_id" parameter
	ClientID ClientID `form:"client_id" json:"client_id" schema:"client_id" url:"client_id" validate:"required,alphanum"`

	// Nonce Represents "nonce" parameter
	Nonce Nonce `form:"nonce" json:"nonce" schema:"nonce" url:"nonce" validate:"required,alphanum"`

	// RedirectURI Represents "redirect_uri" parameter
	RedirectURI RedirectURI `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" url:"redirect_uri" validate:"required,url_encoded"`

	// ResponseType Represents "response_type" parameter
	ResponseType ResponseType `form:"response_type" json:"response_type" schema:"response_type" url:"response_type" validate:"required,response-type-validator"`

	// Scope Represents "scope" parameter
	Scope Scope `form:"scope" json:"scope" schema:"scope" url:"scope" validate:"required,scope-validator"`

	// State Represents "state" parameter
	State State `form:"state" json:"state" schema:"state" url:"state" validate:"required,alphanum"`

	// Display Represents "display" parameter
	Display *Display `form:"display,omitempty" json:"display,omitempty" schema:"display" url:"display" validate:"display-validator"`

	// MaxAge Represents "max_age" parameter
	MaxAge *MaxAge `form:"max_age,omitempty" json:"max_age,omitempty" schema:"max_age" url:"max_age" validate:"numeric"`

	// Prompt Represents "prompt" parameter
	Prompt *Prompt `form:"prompt,omitempty" json:"prompt,omitempty" schema:"prompt" url:"prompt" validate:"prompt-validator"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// TokenFormdataBody defines parameters for Token.
type TokenFormdataBody struct {
	// Code Represents "code" parameter
	Code *string `form:"code" json:"code" schema:"code" validate:"omitempty,alphanum"`

	// GrantType Represents "grant_type" parameter
	GrantType typedef.GrantType `form:"grant_type" json:"grant_type" schema:"grant_type" validate:"required,grant-type-validator"`

	// RedirectURI Represents "redirect_uri" parameter
	RedirectURI *string `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" validate:"omitempty,url_encoded"`

	// RefreshToken Represents "refresh_token" parameter
	RefreshToken *string `form:"refresh_token" json:"refresh_token" schema:"refresh_token" validate:"omitempty,jwt"`
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody TokenFormdataBody

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

//  Interface
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// GET: /connect/.well-known/openid-configuration
	Configuration(w http.ResponseWriter, r *http.Request)

	// GET: /connect/authorization
	Authorize(w http.ResponseWriter, r *http.Request)

	// GET: /connect/jwks
	Jwks(w http.ResponseWriter, r *http.Request)

	// POST: /connect/token
	Token(w http.ResponseWriter, r *http.Request)

	// GET: /connect/userinfo
	UserInfo(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /user/authentication
	Authenticate(w http.ResponseWriter, r *http.Request)

	// POST: /user/consent
	Consent(w http.ResponseWriter, r *http.Request)

	// POST: /user/registration
	Register(w http.ResponseWriter, r *http.Request)
}

//  Middleware
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetConfigurationMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Configuration", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetJwksMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Jwks", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetTokenMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Token", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetUserInfoMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("UserInfo", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

func injectRequestParameter(r *http.Request) (*http.Request, error) {
	switch r.URL.Path {
	case "/connect/.well-known/openid-configuration":
		return unmarshalConfigurationParameter(r)
	case "/connect/authorization":
		return unmarshalAuthorizeParameter(r)
	case "/connect/jwks":
		return unmarshalJwksParameter(r)
	case "/connect/token":
		return unmarshalTokenParameter(r)
	case "/connect/userinfo":
		return unmarshalUserInfoParameter(r)
	case "/health":
		return unmarshalCheckHealthParameter(r)
	case "/user/authentication":
		return unmarshalAuthenticateParameter(r)
	case "/user/consent":
		return unmarshalConsentParameter(r)
	case "/user/registration":
		return unmarshalRegisterParameter(r)
	default:
		return nil, xerr.InvalidPath
	}
}

func unmarshalConfigurationParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

func unmarshalAuthorizeParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &AuthorizeParams{}

	// --------------------------------------------------
	//  Query Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	// Required query parameter "client_id"
	err = runtime.BindQueryParameter("form", true, true, "client_id", r.URL.Query(), &params.ClientID)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "client_id",
			Err:       err,
		}
	}

	// Required query parameter "nonce"
	err = runtime.BindQueryParameter("form", true, true, "nonce", r.URL.Query(), &params.Nonce)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "nonce",
			Err:       err,
		}
	}

	// Required query parameter "redirect_uri"
	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", r.URL.Query(), &params.RedirectURI)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "redirect_uri",
			Err:       err,
		}
	}

	// Required query parameter "response_type"
	err = runtime.BindQueryParameter("form", true, true, "response_type", r.URL.Query(), &params.ResponseType)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "response_type",
			Err:       err,
		}
	}

	// Required query parameter "scope"
	err = runtime.BindQueryParameter("form", true, true, "scope", r.URL.Query(), &params.Scope)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "scope",
			Err:       err,
		}
	}

	// Required query parameter "state"
	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "state",
			Err:       err,
		}
	}

	// Optional query parameter "display"
	err = runtime.BindQueryParameter("form", true, false, "display", r.URL.Query(), &params.Display)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "display",
			Err:       err,
		}
	}

	// Optional query parameter "max_age"
	err = runtime.BindQueryParameter("form", true, false, "max_age", r.URL.Query(), &params.MaxAge)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "max_age",
			Err:       err,
		}
	}

	// Optional query parameter "prompt"
	err = runtime.BindQueryParameter("form", true, false, "prompt", r.URL.Query(), &params.Prompt)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "prompt",
			Err:       err,
		}
	}

	//  Query Parameter: END
	// --------------------------------------------------

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalJwksParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

func unmarshalTokenParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	//  Security Definition: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	//  Security Definition: END
	// ==================================================

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &TokenParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalUserInfoParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context

	// ==================================================
	//  Security Definition: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	//  Security Definition: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalCheckHealthParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

func unmarshalAuthenticateParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &AuthenticateParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalConsentParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &ConsentParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalRegisterParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

//  Handler and others
// --------------------------------------------------

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(hi HandlerInterface, option *ChiServerOptions, appOption *option.Option) (*chi.Mux, error) {
	r := option.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if option.ErrorHandlerFunc == nil {
		option.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	swag, err := GetSwagger()
	if err != nil {
		return nil, err
	}
	swag.Servers = nil

	oapiValidator := nethttpmiddleware.OapiRequestValidatorWithOptions(swag, &nethttpmiddleware.Options{
		Options: openapi3filter.Options{
			AuthenticationFunc: NewOapiAuthentication(appOption),
		},
		ErrorHandler: NewOapiErrorHandler(),
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Configuration"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/connect/.well-known/openid-configuration", hi.Configuration)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/connect/authorization", hi.Authorize)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Jwks"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/connect/jwks", hi.Jwks)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Token"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/connect/token", hi.Token)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("UserInfo"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/connect/userinfo", hi.UserInfo)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", hi.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/authentication", hi.Authenticate)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/consent", hi.Consent)
	})

	r.Group(func(r chi.Router) {
		r.Use(oapiValidator)
		r.Use(InjectRequestParameter())
		if mw := option.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/registration", hi.Register)
	})

	return r, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
