// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=interface_mock.go -package=api
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	url "net/url"
	reflect "reflect"
	time "time"

	entity "github.com/42milez/go-oidc-server/app/idp/entity"
	typedef "github.com/42milez/go-oidc-server/app/pkg/typedef"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheStatusChecker is a mock of CacheStatusChecker interface.
type MockCacheStatusChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCacheStatusCheckerMockRecorder
}

// MockCacheStatusCheckerMockRecorder is the mock recorder for MockCacheStatusChecker.
type MockCacheStatusCheckerMockRecorder struct {
	mock *MockCacheStatusChecker
}

// NewMockCacheStatusChecker creates a new mock instance.
func NewMockCacheStatusChecker(ctrl *gomock.Controller) *MockCacheStatusChecker {
	mock := &MockCacheStatusChecker{ctrl: ctrl}
	mock.recorder = &MockCacheStatusCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheStatusChecker) EXPECT() *MockCacheStatusCheckerMockRecorder {
	return m.recorder
}

// CheckCacheStatus mocks base method.
func (m *MockCacheStatusChecker) CheckCacheStatus(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCacheStatus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCacheStatus indicates an expected call of CheckCacheStatus.
func (mr *MockCacheStatusCheckerMockRecorder) CheckCacheStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCacheStatus", reflect.TypeOf((*MockCacheStatusChecker)(nil).CheckCacheStatus), ctx)
}

// MockDBStatusChecker is a mock of DBStatusChecker interface.
type MockDBStatusChecker struct {
	ctrl     *gomock.Controller
	recorder *MockDBStatusCheckerMockRecorder
}

// MockDBStatusCheckerMockRecorder is the mock recorder for MockDBStatusChecker.
type MockDBStatusCheckerMockRecorder struct {
	mock *MockDBStatusChecker
}

// NewMockDBStatusChecker creates a new mock instance.
func NewMockDBStatusChecker(ctrl *gomock.Controller) *MockDBStatusChecker {
	mock := &MockDBStatusChecker{ctrl: ctrl}
	mock.recorder = &MockDBStatusCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBStatusChecker) EXPECT() *MockDBStatusCheckerMockRecorder {
	return m.recorder
}

// CheckDBStatus mocks base method.
func (m *MockDBStatusChecker) CheckDBStatus(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDBStatus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDBStatus indicates an expected call of CheckDBStatus.
func (mr *MockDBStatusCheckerMockRecorder) CheckDBStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDBStatus", reflect.TypeOf((*MockDBStatusChecker)(nil).CheckDBStatus), ctx)
}

// MockHealthChecker is a mock of HealthChecker interface.
type MockHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerMockRecorder
}

// MockHealthCheckerMockRecorder is the mock recorder for MockHealthChecker.
type MockHealthCheckerMockRecorder struct {
	mock *MockHealthChecker
}

// NewMockHealthChecker creates a new mock instance.
func NewMockHealthChecker(ctrl *gomock.Controller) *MockHealthChecker {
	mock := &MockHealthChecker{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthChecker) EXPECT() *MockHealthCheckerMockRecorder {
	return m.recorder
}

// CheckCacheStatus mocks base method.
func (m *MockHealthChecker) CheckCacheStatus(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCacheStatus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCacheStatus indicates an expected call of CheckCacheStatus.
func (mr *MockHealthCheckerMockRecorder) CheckCacheStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCacheStatus", reflect.TypeOf((*MockHealthChecker)(nil).CheckCacheStatus), ctx)
}

// CheckDBStatus mocks base method.
func (m *MockHealthChecker) CheckDBStatus(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDBStatus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDBStatus indicates an expected call of CheckDBStatus.
func (mr *MockHealthCheckerMockRecorder) CheckDBStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDBStatus", reflect.TypeOf((*MockHealthChecker)(nil).CheckDBStatus), ctx)
}

// MockConsentVerifier is a mock of ConsentVerifier interface.
type MockConsentVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockConsentVerifierMockRecorder
}

// MockConsentVerifierMockRecorder is the mock recorder for MockConsentVerifier.
type MockConsentVerifierMockRecorder struct {
	mock *MockConsentVerifier
}

// NewMockConsentVerifier creates a new mock instance.
func NewMockConsentVerifier(ctrl *gomock.Controller) *MockConsentVerifier {
	mock := &MockConsentVerifier{ctrl: ctrl}
	mock.recorder = &MockConsentVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsentVerifier) EXPECT() *MockConsentVerifierMockRecorder {
	return m.recorder
}

// VerifyConsent mocks base method.
func (m *MockConsentVerifier) VerifyConsent(ctx context.Context, userID typedef.UserID, clientID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyConsent", ctx, userID, clientID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyConsent indicates an expected call of VerifyConsent.
func (mr *MockConsentVerifierMockRecorder) VerifyConsent(ctx, userID, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyConsent", reflect.TypeOf((*MockConsentVerifier)(nil).VerifyConsent), ctx, userID, clientID)
}

// MockPasswordVerifier is a mock of PasswordVerifier interface.
type MockPasswordVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordVerifierMockRecorder
}

// MockPasswordVerifierMockRecorder is the mock recorder for MockPasswordVerifier.
type MockPasswordVerifierMockRecorder struct {
	mock *MockPasswordVerifier
}

// NewMockPasswordVerifier creates a new mock instance.
func NewMockPasswordVerifier(ctrl *gomock.Controller) *MockPasswordVerifier {
	mock := &MockPasswordVerifier{ctrl: ctrl}
	mock.recorder = &MockPasswordVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordVerifier) EXPECT() *MockPasswordVerifierMockRecorder {
	return m.recorder
}

// VerifyPassword mocks base method.
func (m *MockPasswordVerifier) VerifyPassword(ctx context.Context, name, pw string) (typedef.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", ctx, name, pw)
	ret0, _ := ret[0].(typedef.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockPasswordVerifierMockRecorder) VerifyPassword(ctx, name, pw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockPasswordVerifier)(nil).VerifyPassword), ctx, name, pw)
}

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// VerifyConsent mocks base method.
func (m *MockAuthenticator) VerifyConsent(ctx context.Context, userID typedef.UserID, clientID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyConsent", ctx, userID, clientID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyConsent indicates an expected call of VerifyConsent.
func (mr *MockAuthenticatorMockRecorder) VerifyConsent(ctx, userID, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyConsent", reflect.TypeOf((*MockAuthenticator)(nil).VerifyConsent), ctx, userID, clientID)
}

// VerifyPassword mocks base method.
func (m *MockAuthenticator) VerifyPassword(ctx context.Context, name, pw string) (typedef.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", ctx, name, pw)
	ret0, _ := ret[0].(typedef.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockAuthenticatorMockRecorder) VerifyPassword(ctx, name, pw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockAuthenticator)(nil).VerifyPassword), ctx, name, pw)
}

// MockUserRegisterer is a mock of UserRegisterer interface.
type MockUserRegisterer struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegistererMockRecorder
}

// MockUserRegistererMockRecorder is the mock recorder for MockUserRegisterer.
type MockUserRegistererMockRecorder struct {
	mock *MockUserRegisterer
}

// NewMockUserRegisterer creates a new mock instance.
func NewMockUserRegisterer(ctrl *gomock.Controller) *MockUserRegisterer {
	mock := &MockUserRegisterer{ctrl: ctrl}
	mock.recorder = &MockUserRegistererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegisterer) EXPECT() *MockUserRegistererMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockUserRegisterer) RegisterUser(ctx context.Context, name, pw string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, name, pw)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserRegistererMockRecorder) RegisterUser(ctx, name, pw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserRegisterer)(nil).RegisterUser), ctx, name, pw)
}

// MockRequestFingerprintSaver is a mock of RequestFingerprintSaver interface.
type MockRequestFingerprintSaver struct {
	ctrl     *gomock.Controller
	recorder *MockRequestFingerprintSaverMockRecorder
}

// MockRequestFingerprintSaverMockRecorder is the mock recorder for MockRequestFingerprintSaver.
type MockRequestFingerprintSaverMockRecorder struct {
	mock *MockRequestFingerprintSaver
}

// NewMockRequestFingerprintSaver creates a new mock instance.
func NewMockRequestFingerprintSaver(ctrl *gomock.Controller) *MockRequestFingerprintSaver {
	mock := &MockRequestFingerprintSaver{ctrl: ctrl}
	mock.recorder = &MockRequestFingerprintSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestFingerprintSaver) EXPECT() *MockRequestFingerprintSaverMockRecorder {
	return m.recorder
}

// SaveAuthorizationRequestFingerprint mocks base method.
func (m *MockRequestFingerprintSaver) SaveAuthorizationRequestFingerprint(ctx context.Context, clientID, redirectURI, nonce, authCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAuthorizationRequestFingerprint", ctx, clientID, redirectURI, nonce, authCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAuthorizationRequestFingerprint indicates an expected call of SaveAuthorizationRequestFingerprint.
func (mr *MockRequestFingerprintSaverMockRecorder) SaveAuthorizationRequestFingerprint(ctx, clientID, redirectURI, nonce, authCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAuthorizationRequestFingerprint", reflect.TypeOf((*MockRequestFingerprintSaver)(nil).SaveAuthorizationRequestFingerprint), ctx, clientID, redirectURI, nonce, authCode)
}

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthorizer) Authorize(ctx context.Context, clientID, redirectURI, state string) (*url.URL, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, clientID, redirectURI, state)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthorizerMockRecorder) Authorize(ctx, clientID, redirectURI, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizer)(nil).Authorize), ctx, clientID, redirectURI, state)
}

// SaveAuthorizationRequestFingerprint mocks base method.
func (m *MockAuthorizer) SaveAuthorizationRequestFingerprint(ctx context.Context, clientID, redirectURI, nonce, authCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAuthorizationRequestFingerprint", ctx, clientID, redirectURI, nonce, authCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAuthorizationRequestFingerprint indicates an expected call of SaveAuthorizationRequestFingerprint.
func (mr *MockAuthorizerMockRecorder) SaveAuthorizationRequestFingerprint(ctx, clientID, redirectURI, nonce, authCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAuthorizationRequestFingerprint", reflect.TypeOf((*MockAuthorizer)(nil).SaveAuthorizationRequestFingerprint), ctx, clientID, redirectURI, nonce, authCode)
}

// MockConsentAcceptor is a mock of ConsentAcceptor interface.
type MockConsentAcceptor struct {
	ctrl     *gomock.Controller
	recorder *MockConsentAcceptorMockRecorder
}

// MockConsentAcceptorMockRecorder is the mock recorder for MockConsentAcceptor.
type MockConsentAcceptorMockRecorder struct {
	mock *MockConsentAcceptor
}

// NewMockConsentAcceptor creates a new mock instance.
func NewMockConsentAcceptor(ctrl *gomock.Controller) *MockConsentAcceptor {
	mock := &MockConsentAcceptor{ctrl: ctrl}
	mock.recorder = &MockConsentAcceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsentAcceptor) EXPECT() *MockConsentAcceptorMockRecorder {
	return m.recorder
}

// AcceptConsent mocks base method.
func (m *MockConsentAcceptor) AcceptConsent(ctx context.Context, userID typedef.UserID, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptConsent", ctx, userID, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptConsent indicates an expected call of AcceptConsent.
func (mr *MockConsentAcceptorMockRecorder) AcceptConsent(ctx, userID, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptConsent", reflect.TypeOf((*MockConsentAcceptor)(nil).AcceptConsent), ctx, userID, clientID)
}

// MockCredentialValidator is a mock of CredentialValidator interface.
type MockCredentialValidator struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialValidatorMockRecorder
}

// MockCredentialValidatorMockRecorder is the mock recorder for MockCredentialValidator.
type MockCredentialValidatorMockRecorder struct {
	mock *MockCredentialValidator
}

// NewMockCredentialValidator creates a new mock instance.
func NewMockCredentialValidator(ctrl *gomock.Controller) *MockCredentialValidator {
	mock := &MockCredentialValidator{ctrl: ctrl}
	mock.recorder = &MockCredentialValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialValidator) EXPECT() *MockCredentialValidatorMockRecorder {
	return m.recorder
}

// ValidateCredential mocks base method.
func (m *MockCredentialValidator) ValidateCredential(ctx context.Context, clientID, clientSecret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCredential", ctx, clientID, clientSecret)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCredential indicates an expected call of ValidateCredential.
func (mr *MockCredentialValidatorMockRecorder) ValidateCredential(ctx, clientID, clientSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCredential", reflect.TypeOf((*MockCredentialValidator)(nil).ValidateCredential), ctx, clientID, clientSecret)
}

// MockRefreshTokenReader is a mock of RefreshTokenReader interface.
type MockRefreshTokenReader struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenReaderMockRecorder
}

// MockRefreshTokenReaderMockRecorder is the mock recorder for MockRefreshTokenReader.
type MockRefreshTokenReaderMockRecorder struct {
	mock *MockRefreshTokenReader
}

// NewMockRefreshTokenReader creates a new mock instance.
func NewMockRefreshTokenReader(ctrl *gomock.Controller) *MockRefreshTokenReader {
	mock := &MockRefreshTokenReader{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenReader) EXPECT() *MockRefreshTokenReaderMockRecorder {
	return m.recorder
}

// ReadRefreshToken mocks base method.
func (m *MockRefreshTokenReader) ReadRefreshToken(ctx context.Context, token, clientId string) (*typedef.RefreshTokenPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRefreshToken", ctx, token, clientId)
	ret0, _ := ret[0].(*typedef.RefreshTokenPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRefreshToken indicates an expected call of ReadRefreshToken.
func (mr *MockRefreshTokenReaderMockRecorder) ReadRefreshToken(ctx, token, clientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRefreshToken", reflect.TypeOf((*MockRefreshTokenReader)(nil).ReadRefreshToken), ctx, token, clientId)
}

// MockAuthCodeRevoker is a mock of AuthCodeRevoker interface.
type MockAuthCodeRevoker struct {
	ctrl     *gomock.Controller
	recorder *MockAuthCodeRevokerMockRecorder
}

// MockAuthCodeRevokerMockRecorder is the mock recorder for MockAuthCodeRevoker.
type MockAuthCodeRevokerMockRecorder struct {
	mock *MockAuthCodeRevoker
}

// NewMockAuthCodeRevoker creates a new mock instance.
func NewMockAuthCodeRevoker(ctrl *gomock.Controller) *MockAuthCodeRevoker {
	mock := &MockAuthCodeRevoker{ctrl: ctrl}
	mock.recorder = &MockAuthCodeRevokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthCodeRevoker) EXPECT() *MockAuthCodeRevokerMockRecorder {
	return m.recorder
}

// RevokeAuthCode mocks base method.
func (m *MockAuthCodeRevoker) RevokeAuthCode(ctx context.Context, code, clientId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAuthCode", ctx, code, clientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAuthCode indicates an expected call of RevokeAuthCode.
func (mr *MockAuthCodeRevokerMockRecorder) RevokeAuthCode(ctx, code, clientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthCode", reflect.TypeOf((*MockAuthCodeRevoker)(nil).RevokeAuthCode), ctx, code, clientId)
}

// MockTokenCacheReadWriter is a mock of TokenCacheReadWriter interface.
type MockTokenCacheReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTokenCacheReadWriterMockRecorder
}

// MockTokenCacheReadWriterMockRecorder is the mock recorder for MockTokenCacheReadWriter.
type MockTokenCacheReadWriterMockRecorder struct {
	mock *MockTokenCacheReadWriter
}

// NewMockTokenCacheReadWriter creates a new mock instance.
func NewMockTokenCacheReadWriter(ctrl *gomock.Controller) *MockTokenCacheReadWriter {
	mock := &MockTokenCacheReadWriter{ctrl: ctrl}
	mock.recorder = &MockTokenCacheReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenCacheReadWriter) EXPECT() *MockTokenCacheReadWriterMockRecorder {
	return m.recorder
}

// ReadAuthorizationRequestFingerprint mocks base method.
func (m *MockTokenCacheReadWriter) ReadAuthorizationRequestFingerprint(ctx context.Context, clientId, authCode string) (*typedef.AuthorizationRequestFingerprint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthorizationRequestFingerprint", ctx, clientId, authCode)
	ret0, _ := ret[0].(*typedef.AuthorizationRequestFingerprint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAuthorizationRequestFingerprint indicates an expected call of ReadAuthorizationRequestFingerprint.
func (mr *MockTokenCacheReadWriterMockRecorder) ReadAuthorizationRequestFingerprint(ctx, clientId, authCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthorizationRequestFingerprint", reflect.TypeOf((*MockTokenCacheReadWriter)(nil).ReadAuthorizationRequestFingerprint), ctx, clientId, authCode)
}

// WriteRefreshToken mocks base method.
func (m *MockTokenCacheReadWriter) WriteRefreshToken(ctx context.Context, token, clientId string, userId typedef.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRefreshToken", ctx, token, clientId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRefreshToken indicates an expected call of WriteRefreshToken.
func (mr *MockTokenCacheReadWriterMockRecorder) WriteRefreshToken(ctx, token, clientId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRefreshToken", reflect.TypeOf((*MockTokenCacheReadWriter)(nil).WriteRefreshToken), ctx, token, clientId, userId)
}

// MockAuthCodeGrantAcceptor is a mock of AuthCodeGrantAcceptor interface.
type MockAuthCodeGrantAcceptor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthCodeGrantAcceptorMockRecorder
}

// MockAuthCodeGrantAcceptorMockRecorder is the mock recorder for MockAuthCodeGrantAcceptor.
type MockAuthCodeGrantAcceptorMockRecorder struct {
	mock *MockAuthCodeGrantAcceptor
}

// NewMockAuthCodeGrantAcceptor creates a new mock instance.
func NewMockAuthCodeGrantAcceptor(ctrl *gomock.Controller) *MockAuthCodeGrantAcceptor {
	mock := &MockAuthCodeGrantAcceptor{ctrl: ctrl}
	mock.recorder = &MockAuthCodeGrantAcceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthCodeGrantAcceptor) EXPECT() *MockAuthCodeGrantAcceptorMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockAuthCodeGrantAcceptor) GenerateAccessToken(uid typedef.UserID, claims map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", uid, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockAuthCodeGrantAcceptorMockRecorder) GenerateAccessToken(uid, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockAuthCodeGrantAcceptor)(nil).GenerateAccessToken), uid, claims)
}

// GenerateIdToken mocks base method.
func (m *MockAuthCodeGrantAcceptor) GenerateIdToken(uid typedef.UserID, audiences []string, authTime time.Time, nonce string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateIdToken", uid, audiences, authTime, nonce)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateIdToken indicates an expected call of GenerateIdToken.
func (mr *MockAuthCodeGrantAcceptorMockRecorder) GenerateIdToken(uid, audiences, authTime, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateIdToken", reflect.TypeOf((*MockAuthCodeGrantAcceptor)(nil).GenerateIdToken), uid, audiences, authTime, nonce)
}

// GenerateRefreshToken mocks base method.
func (m *MockAuthCodeGrantAcceptor) GenerateRefreshToken(uid typedef.UserID, claims map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", uid, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockAuthCodeGrantAcceptorMockRecorder) GenerateRefreshToken(uid, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockAuthCodeGrantAcceptor)(nil).GenerateRefreshToken), uid, claims)
}

// RevokeAuthCode mocks base method.
func (m *MockAuthCodeGrantAcceptor) RevokeAuthCode(ctx context.Context, code, clientId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAuthCode", ctx, code, clientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAuthCode indicates an expected call of RevokeAuthCode.
func (mr *MockAuthCodeGrantAcceptorMockRecorder) RevokeAuthCode(ctx, code, clientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthCode", reflect.TypeOf((*MockAuthCodeGrantAcceptor)(nil).RevokeAuthCode), ctx, code, clientId)
}

// MockRefreshTokenGrantAcceptor is a mock of RefreshTokenGrantAcceptor interface.
type MockRefreshTokenGrantAcceptor struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenGrantAcceptorMockRecorder
}

// MockRefreshTokenGrantAcceptorMockRecorder is the mock recorder for MockRefreshTokenGrantAcceptor.
type MockRefreshTokenGrantAcceptorMockRecorder struct {
	mock *MockRefreshTokenGrantAcceptor
}

// NewMockRefreshTokenGrantAcceptor creates a new mock instance.
func NewMockRefreshTokenGrantAcceptor(ctrl *gomock.Controller) *MockRefreshTokenGrantAcceptor {
	mock := &MockRefreshTokenGrantAcceptor{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenGrantAcceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenGrantAcceptor) EXPECT() *MockRefreshTokenGrantAcceptorMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockRefreshTokenGrantAcceptor) GenerateAccessToken(uid typedef.UserID, claims map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", uid, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockRefreshTokenGrantAcceptorMockRecorder) GenerateAccessToken(uid, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockRefreshTokenGrantAcceptor)(nil).GenerateAccessToken), uid, claims)
}

// GenerateRefreshToken mocks base method.
func (m *MockRefreshTokenGrantAcceptor) GenerateRefreshToken(uid typedef.UserID, claims map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", uid, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockRefreshTokenGrantAcceptorMockRecorder) GenerateRefreshToken(uid, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockRefreshTokenGrantAcceptor)(nil).GenerateRefreshToken), uid, claims)
}

// ReadRefreshToken mocks base method.
func (m *MockRefreshTokenGrantAcceptor) ReadRefreshToken(ctx context.Context, token, clientId string) (*typedef.RefreshTokenPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRefreshToken", ctx, token, clientId)
	ret0, _ := ret[0].(*typedef.RefreshTokenPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRefreshToken indicates an expected call of ReadRefreshToken.
func (mr *MockRefreshTokenGrantAcceptorMockRecorder) ReadRefreshToken(ctx, token, clientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRefreshToken", reflect.TypeOf((*MockRefreshTokenGrantAcceptor)(nil).ReadRefreshToken), ctx, token, clientId)
}
