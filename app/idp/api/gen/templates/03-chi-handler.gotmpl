//  Handler and others
// --------------------------------------------------

type ChiServerOptions struct {
    BaseRouter       *chi.Mux
    Middlewares      *MiddlewareFuncMap
    ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(hi HandlerInterface, option *ChiServerOptions, appOption *option.Option) (*chi.Mux, error) {
    r := option.BaseRouter

    if r == nil {
        r = chi.NewRouter()
    }

    if option.ErrorHandlerFunc == nil {
        option.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
            http.Error(w, err.Error(), http.StatusBadRequest)
        }
    }

    swag, err := GetSwagger()
    if err != nil {
        return nil, err
    }
    swag.Servers = nil

    oapiValidator := nethttpmiddleware.OapiRequestValidatorWithOptions(swag, &nethttpmiddleware.Options{
        Options: openapi3filter.Options{
            AuthenticationFunc: NewOapiAuthentication(appOption),
        },
        ErrorHandler: NewOapiErrorHandler(),
    })

    {{range .}}
    r.Group(func(r chi.Router) {
        r.Use(oapiValidator)
        r.Use(InjectRequestParameter())
        if mw := option.Middlewares.raw("{{.OperationId}}"); mw != nil {
            r.Use(mw...)
        }
        r.{{.Method | lower | title}}("{{.Path | swaggerUriToChiUri}}", hi.{{.OperationId}})
    })
    {{end}}

    return r, nil
}
