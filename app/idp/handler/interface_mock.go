// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	entity "github.com/42milez/go-oidc-server/app/idp/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockCheckHealthService is a mock of CheckHealthService interface.
type MockCheckHealthService struct {
	ctrl     *gomock.Controller
	recorder *MockCheckHealthServiceMockRecorder
}

// MockCheckHealthServiceMockRecorder is the mock recorder for MockCheckHealthService.
type MockCheckHealthServiceMockRecorder struct {
	mock *MockCheckHealthService
}

// NewMockCheckHealthService creates a new mock instance.
func NewMockCheckHealthService(ctrl *gomock.Controller) *MockCheckHealthService {
	mock := &MockCheckHealthService{ctrl: ctrl}
	mock.recorder = &MockCheckHealthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckHealthService) EXPECT() *MockCheckHealthServiceMockRecorder {
	return m.recorder
}

// PingCache mocks base method.
func (m *MockCheckHealthService) PingCache(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingCache", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingCache indicates an expected call of PingCache.
func (mr *MockCheckHealthServiceMockRecorder) PingCache(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingCache", reflect.TypeOf((*MockCheckHealthService)(nil).PingCache), ctx)
}

// PingDB mocks base method.
func (m *MockCheckHealthService) PingDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *MockCheckHealthServiceMockRecorder) PingDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*MockCheckHealthService)(nil).PingDB), ctx)
}

// MockSignInService is a mock of SignInService interface.
type MockSignInService struct {
	ctrl     *gomock.Controller
	recorder *MockSignInServiceMockRecorder
}

// MockSignInServiceMockRecorder is the mock recorder for MockSignInService.
type MockSignInServiceMockRecorder struct {
	mock *MockSignInService
}

// NewMockSignInService creates a new mock instance.
func NewMockSignInService(ctrl *gomock.Controller) *MockSignInService {
	mock := &MockSignInService{ctrl: ctrl}
	mock.recorder = &MockSignInServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignInService) EXPECT() *MockSignInServiceMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockSignInService) SignIn(ctx context.Context, name, pw string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, name, pw)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockSignInServiceMockRecorder) SignIn(ctx, name, pw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockSignInService)(nil).SignIn), ctx, name, pw)
}

// MockReadAdminService is a mock of ReadAdminService interface.
type MockReadAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockReadAdminServiceMockRecorder
}

// MockReadAdminServiceMockRecorder is the mock recorder for MockReadAdminService.
type MockReadAdminServiceMockRecorder struct {
	mock *MockReadAdminService
}

// NewMockReadAdminService creates a new mock instance.
func NewMockReadAdminService(ctrl *gomock.Controller) *MockReadAdminService {
	mock := &MockReadAdminService{ctrl: ctrl}
	mock.recorder = &MockReadAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadAdminService) EXPECT() *MockReadAdminServiceMockRecorder {
	return m.recorder
}

// ReadAdmin mocks base method.
func (m *MockReadAdminService) ReadAdmin(ctx context.Context) (entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAdmin", ctx)
	ret0, _ := ret[0].(entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAdmin indicates an expected call of ReadAdmin.
func (mr *MockReadAdminServiceMockRecorder) ReadAdmin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAdmin", reflect.TypeOf((*MockReadAdminService)(nil).ReadAdmin), ctx)
}

// MockReadAdminsService is a mock of ReadAdminsService interface.
type MockReadAdminsService struct {
	ctrl     *gomock.Controller
	recorder *MockReadAdminsServiceMockRecorder
}

// MockReadAdminsServiceMockRecorder is the mock recorder for MockReadAdminsService.
type MockReadAdminsServiceMockRecorder struct {
	mock *MockReadAdminsService
}

// NewMockReadAdminsService creates a new mock instance.
func NewMockReadAdminsService(ctrl *gomock.Controller) *MockReadAdminsService {
	mock := &MockReadAdminsService{ctrl: ctrl}
	mock.recorder = &MockReadAdminsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadAdminsService) EXPECT() *MockReadAdminsServiceMockRecorder {
	return m.recorder
}

// ReadAdmins mocks base method.
func (m *MockReadAdminsService) ReadAdmins(ctx context.Context) (entity.Admins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAdmins", ctx)
	ret0, _ := ret[0].(entity.Admins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAdmins indicates an expected call of ReadAdmins.
func (mr *MockReadAdminsServiceMockRecorder) ReadAdmins(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAdmins", reflect.TypeOf((*MockReadAdminsService)(nil).ReadAdmins), ctx)
}
