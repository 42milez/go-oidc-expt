// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	http "net/http"
	reflect "reflect"

	ent "github.com/42milez/go-oidc-server/app/idp/ent/ent"
	typedef "github.com/42milez/go-oidc-server/app/idp/ent/typedef"
	gomock "github.com/golang/mock/gomock"
	jwt "github.com/lestrrat-go/jwx/v2/jwt"
)

// MockHealthChecker is a mock of HealthChecker interface.
type MockHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerMockRecorder
}

// MockHealthCheckerMockRecorder is the mock recorder for MockHealthChecker.
type MockHealthCheckerMockRecorder struct {
	mock *MockHealthChecker
}

// NewMockHealthChecker creates a new mock instance.
func NewMockHealthChecker(ctrl *gomock.Controller) *MockHealthChecker {
	mock := &MockHealthChecker{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthChecker) EXPECT() *MockHealthCheckerMockRecorder {
	return m.recorder
}

// PingCache mocks base method.
func (m *MockHealthChecker) PingCache(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingCache", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingCache indicates an expected call of PingCache.
func (mr *MockHealthCheckerMockRecorder) PingCache(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingCache", reflect.TypeOf((*MockHealthChecker)(nil).PingCache), ctx)
}

// PingDB mocks base method.
func (m *MockHealthChecker) PingDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *MockHealthCheckerMockRecorder) PingDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*MockHealthChecker)(nil).PingDB), ctx)
}

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// LoadID mocks base method.
func (m *MockSessionManager) LoadID(ctx context.Context, key string) (typedef.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadID", ctx, key)
	ret0, _ := ret[0].(typedef.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadID indicates an expected call of LoadID.
func (mr *MockSessionManagerMockRecorder) LoadID(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadID", reflect.TypeOf((*MockSessionManager)(nil).LoadID), ctx, key)
}

// SaveID mocks base method.
func (m *MockSessionManager) SaveID(ctx context.Context, key string, id typedef.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveID", ctx, key, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveID indicates an expected call of SaveID.
func (mr *MockSessionManagerMockRecorder) SaveID(ctx, key, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveID", reflect.TypeOf((*MockSessionManager)(nil).SaveID), ctx, key, id)
}

// MockTokenExtractor is a mock of TokenExtractor interface.
type MockTokenExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockTokenExtractorMockRecorder
}

// MockTokenExtractorMockRecorder is the mock recorder for MockTokenExtractor.
type MockTokenExtractorMockRecorder struct {
	mock *MockTokenExtractor
}

// NewMockTokenExtractor creates a new mock instance.
func NewMockTokenExtractor(ctrl *gomock.Controller) *MockTokenExtractor {
	mock := &MockTokenExtractor{ctrl: ctrl}
	mock.recorder = &MockTokenExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenExtractor) EXPECT() *MockTokenExtractorMockRecorder {
	return m.recorder
}

// ExtractToken mocks base method.
func (m *MockTokenExtractor) ExtractToken(r *http.Request) (jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractToken", r)
	ret0, _ := ret[0].(jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractToken indicates an expected call of ExtractToken.
func (mr *MockTokenExtractorMockRecorder) ExtractToken(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractToken", reflect.TypeOf((*MockTokenExtractor)(nil).ExtractToken), r)
}

// MockTokenGenerator is a mock of TokenGenerator interface.
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator.
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance.
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockTokenGenerator) GenerateAccessToken(name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockTokenGeneratorMockRecorder) GenerateAccessToken(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateAccessToken), name)
}

// MockUserCreator is a mock of UserCreator interface.
type MockUserCreator struct {
	ctrl     *gomock.Controller
	recorder *MockUserCreatorMockRecorder
}

// MockUserCreatorMockRecorder is the mock recorder for MockUserCreator.
type MockUserCreatorMockRecorder struct {
	mock *MockUserCreator
}

// NewMockUserCreator creates a new mock instance.
func NewMockUserCreator(ctrl *gomock.Controller) *MockUserCreator {
	mock := &MockUserCreator{ctrl: ctrl}
	mock.recorder = &MockUserCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCreator) EXPECT() *MockUserCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserCreator) Create(ctx context.Context, name string, pw typedef.PasswordHash) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, pw)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserCreatorMockRecorder) Create(ctx, name, pw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserCreator)(nil).Create), ctx, name, pw)
}

// MockUserSelector is a mock of UserSelector interface.
type MockUserSelector struct {
	ctrl     *gomock.Controller
	recorder *MockUserSelectorMockRecorder
}

// MockUserSelectorMockRecorder is the mock recorder for MockUserSelector.
type MockUserSelectorMockRecorder struct {
	mock *MockUserSelector
}

// NewMockUserSelector creates a new mock instance.
func NewMockUserSelector(ctrl *gomock.Controller) *MockUserSelector {
	mock := &MockUserSelector{ctrl: ctrl}
	mock.recorder = &MockUserSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSelector) EXPECT() *MockUserSelectorMockRecorder {
	return m.recorder
}

// SelectByName mocks base method.
func (m *MockUserSelector) SelectByName(ctx context.Context, name string) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByName", ctx, name)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByName indicates an expected call of SelectByName.
func (mr *MockUserSelectorMockRecorder) SelectByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByName", reflect.TypeOf((*MockUserSelector)(nil).SelectByName), ctx, name)
}
