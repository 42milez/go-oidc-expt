// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/42milez/go-oidc-server/app/idp/ent/ent/redirecturi"
	"github.com/42milez/go-oidc-server/app/idp/ent/typedef"
)

// RedirectURI is the model entity for the RedirectURI schema.
type RedirectURI struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URI holds the value of the "uri" field.
	URI string `json:"uri,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID       typedef.UserID `json:"user_id,omitempty"`
	user_id      *typedef.UserID
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RedirectURI) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case redirecturi.FieldID:
			values[i] = new(sql.NullInt64)
		case redirecturi.FieldURI, redirecturi.FieldUserID:
			values[i] = new(sql.NullString)
		case redirecturi.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case redirecturi.ForeignKeys[0]: // user_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RedirectURI fields.
func (ru *RedirectURI) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case redirecturi.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ru.ID = int(value.Int64)
		case redirecturi.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				ru.URI = value.String
			}
		case redirecturi.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ru.CreatedAt = value.Time
			}
		case redirecturi.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ru.UserID = typedef.UserID(value.String)
			}
		case redirecturi.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ru.user_id = new(typedef.UserID)
				*ru.user_id = typedef.UserID(value.String)
			}
		default:
			ru.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RedirectURI.
// This includes values selected through modifiers, order, etc.
func (ru *RedirectURI) Value(name string) (ent.Value, error) {
	return ru.selectValues.Get(name)
}

// Update returns a builder for updating this RedirectURI.
// Note that you need to call RedirectURI.Unwrap() before calling this method if this RedirectURI
// was returned from a transaction, and the transaction was committed or rolled back.
func (ru *RedirectURI) Update() *RedirectURIUpdateOne {
	return NewRedirectURIClient(ru.config).UpdateOne(ru)
}

// Unwrap unwraps the RedirectURI entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ru *RedirectURI) Unwrap() *RedirectURI {
	_tx, ok := ru.config.driver.(*txDriver)
	if !ok {
		panic("ent: RedirectURI is not a transactional entity")
	}
	ru.config.driver = _tx.drv
	return ru
}

// String implements the fmt.Stringer.
func (ru *RedirectURI) String() string {
	var builder strings.Builder
	builder.WriteString("RedirectURI(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ru.ID))
	builder.WriteString("uri=")
	builder.WriteString(ru.URI)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ru.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ru.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// RedirectURIs is a parsable slice of RedirectURI.
type RedirectURIs []*RedirectURI
