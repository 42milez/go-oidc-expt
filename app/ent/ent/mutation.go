// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/42milez/go-oidc-server/app/ent/ent/authcode"
	"github.com/42milez/go-oidc-server/app/ent/ent/consent"
	"github.com/42milez/go-oidc-server/app/ent/ent/predicate"
	"github.com/42milez/go-oidc-server/app/ent/ent/redirecturi"
	"github.com/42milez/go-oidc-server/app/ent/ent/relyingparty"
	"github.com/42milez/go-oidc-server/app/ent/ent/user"
	"github.com/42milez/go-oidc-server/app/typedef"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAuthCode     = "AuthCode"
	TypeConsent      = "Consent"
	TypeRedirectUri  = "RedirectUri"
	TypeRelyingParty = "RelyingParty"
	TypeUser         = "User"
)

// AuthCodeMutation represents an operation that mutates the AuthCode nodes in the graph.
type AuthCodeMutation struct {
	config
	op                   Op
	typ                  string
	id                   *typedef.AuthCodeID
	code                 *string
	user_id              *typedef.UserID
	adduser_id           *typedef.UserID
	expire_at            *time.Time
	used_at              *time.Time
	created_at           *time.Time
	modified_at          *time.Time
	clearedFields        map[string]struct{}
	relying_party        *typedef.RelyingPartyID
	clearedrelying_party bool
	done                 bool
	oldValue             func(context.Context) (*AuthCode, error)
	predicates           []predicate.AuthCode
}

var _ ent.Mutation = (*AuthCodeMutation)(nil)

// authcodeOption allows management of the mutation configuration using functional options.
type authcodeOption func(*AuthCodeMutation)

// newAuthCodeMutation creates new mutation for the AuthCode entity.
func newAuthCodeMutation(c config, op Op, opts ...authcodeOption) *AuthCodeMutation {
	m := &AuthCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeAuthCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthCodeID sets the ID field of the mutation.
func withAuthCodeID(id typedef.AuthCodeID) authcodeOption {
	return func(m *AuthCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *AuthCode
		)
		m.oldValue = func(ctx context.Context) (*AuthCode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AuthCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuthCode sets the old AuthCode of the mutation.
func withAuthCode(node *AuthCode) authcodeOption {
	return func(m *AuthCodeMutation) {
		m.oldValue = func(context.Context) (*AuthCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AuthCode entities.
func (m *AuthCodeMutation) SetID(id typedef.AuthCodeID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuthCodeMutation) ID() (id typedef.AuthCodeID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuthCodeMutation) IDs(ctx context.Context) ([]typedef.AuthCodeID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []typedef.AuthCodeID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AuthCode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *AuthCodeMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *AuthCodeMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the AuthCode entity.
// If the AuthCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthCodeMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *AuthCodeMutation) ResetCode() {
	m.code = nil
}

// SetUserID sets the "user_id" field.
func (m *AuthCodeMutation) SetUserID(ti typedef.UserID) {
	m.user_id = &ti
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AuthCodeMutation) UserID() (r typedef.UserID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the AuthCode entity.
// If the AuthCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthCodeMutation) OldUserID(ctx context.Context) (v typedef.UserID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds ti to the "user_id" field.
func (m *AuthCodeMutation) AddUserID(ti typedef.UserID) {
	if m.adduser_id != nil {
		*m.adduser_id += ti
	} else {
		m.adduser_id = &ti
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *AuthCodeMutation) AddedUserID() (r typedef.UserID, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AuthCodeMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetExpireAt sets the "expire_at" field.
func (m *AuthCodeMutation) SetExpireAt(t time.Time) {
	m.expire_at = &t
}

// ExpireAt returns the value of the "expire_at" field in the mutation.
func (m *AuthCodeMutation) ExpireAt() (r time.Time, exists bool) {
	v := m.expire_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpireAt returns the old "expire_at" field's value of the AuthCode entity.
// If the AuthCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthCodeMutation) OldExpireAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpireAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpireAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpireAt: %w", err)
	}
	return oldValue.ExpireAt, nil
}

// ResetExpireAt resets all changes to the "expire_at" field.
func (m *AuthCodeMutation) ResetExpireAt() {
	m.expire_at = nil
}

// SetUsedAt sets the "used_at" field.
func (m *AuthCodeMutation) SetUsedAt(t time.Time) {
	m.used_at = &t
}

// UsedAt returns the value of the "used_at" field in the mutation.
func (m *AuthCodeMutation) UsedAt() (r time.Time, exists bool) {
	v := m.used_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedAt returns the old "used_at" field's value of the AuthCode entity.
// If the AuthCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthCodeMutation) OldUsedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedAt: %w", err)
	}
	return oldValue.UsedAt, nil
}

// ClearUsedAt clears the value of the "used_at" field.
func (m *AuthCodeMutation) ClearUsedAt() {
	m.used_at = nil
	m.clearedFields[authcode.FieldUsedAt] = struct{}{}
}

// UsedAtCleared returns if the "used_at" field was cleared in this mutation.
func (m *AuthCodeMutation) UsedAtCleared() bool {
	_, ok := m.clearedFields[authcode.FieldUsedAt]
	return ok
}

// ResetUsedAt resets all changes to the "used_at" field.
func (m *AuthCodeMutation) ResetUsedAt() {
	m.used_at = nil
	delete(m.clearedFields, authcode.FieldUsedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *AuthCodeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AuthCodeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AuthCode entity.
// If the AuthCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthCodeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AuthCodeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *AuthCodeMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *AuthCodeMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the AuthCode entity.
// If the AuthCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthCodeMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *AuthCodeMutation) ResetModifiedAt() {
	m.modified_at = nil
}

// SetRelyingPartyID sets the "relying_party_id" field.
func (m *AuthCodeMutation) SetRelyingPartyID(tpi typedef.RelyingPartyID) {
	m.relying_party = &tpi
}

// RelyingPartyID returns the value of the "relying_party_id" field in the mutation.
func (m *AuthCodeMutation) RelyingPartyID() (r typedef.RelyingPartyID, exists bool) {
	v := m.relying_party
	if v == nil {
		return
	}
	return *v, true
}

// OldRelyingPartyID returns the old "relying_party_id" field's value of the AuthCode entity.
// If the AuthCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthCodeMutation) OldRelyingPartyID(ctx context.Context) (v typedef.RelyingPartyID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelyingPartyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelyingPartyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelyingPartyID: %w", err)
	}
	return oldValue.RelyingPartyID, nil
}

// ResetRelyingPartyID resets all changes to the "relying_party_id" field.
func (m *AuthCodeMutation) ResetRelyingPartyID() {
	m.relying_party = nil
}

// ClearRelyingParty clears the "relying_party" edge to the RelyingParty entity.
func (m *AuthCodeMutation) ClearRelyingParty() {
	m.clearedrelying_party = true
	m.clearedFields[authcode.FieldRelyingPartyID] = struct{}{}
}

// RelyingPartyCleared reports if the "relying_party" edge to the RelyingParty entity was cleared.
func (m *AuthCodeMutation) RelyingPartyCleared() bool {
	return m.clearedrelying_party
}

// RelyingPartyIDs returns the "relying_party" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RelyingPartyID instead. It exists only for internal usage by the builders.
func (m *AuthCodeMutation) RelyingPartyIDs() (ids []typedef.RelyingPartyID) {
	if id := m.relying_party; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRelyingParty resets all changes to the "relying_party" edge.
func (m *AuthCodeMutation) ResetRelyingParty() {
	m.relying_party = nil
	m.clearedrelying_party = false
}

// Where appends a list predicates to the AuthCodeMutation builder.
func (m *AuthCodeMutation) Where(ps ...predicate.AuthCode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuthCodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuthCodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AuthCode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuthCodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuthCodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AuthCode).
func (m *AuthCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuthCodeMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.code != nil {
		fields = append(fields, authcode.FieldCode)
	}
	if m.user_id != nil {
		fields = append(fields, authcode.FieldUserID)
	}
	if m.expire_at != nil {
		fields = append(fields, authcode.FieldExpireAt)
	}
	if m.used_at != nil {
		fields = append(fields, authcode.FieldUsedAt)
	}
	if m.created_at != nil {
		fields = append(fields, authcode.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, authcode.FieldModifiedAt)
	}
	if m.relying_party != nil {
		fields = append(fields, authcode.FieldRelyingPartyID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuthCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case authcode.FieldCode:
		return m.Code()
	case authcode.FieldUserID:
		return m.UserID()
	case authcode.FieldExpireAt:
		return m.ExpireAt()
	case authcode.FieldUsedAt:
		return m.UsedAt()
	case authcode.FieldCreatedAt:
		return m.CreatedAt()
	case authcode.FieldModifiedAt:
		return m.ModifiedAt()
	case authcode.FieldRelyingPartyID:
		return m.RelyingPartyID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuthCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case authcode.FieldCode:
		return m.OldCode(ctx)
	case authcode.FieldUserID:
		return m.OldUserID(ctx)
	case authcode.FieldExpireAt:
		return m.OldExpireAt(ctx)
	case authcode.FieldUsedAt:
		return m.OldUsedAt(ctx)
	case authcode.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case authcode.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	case authcode.FieldRelyingPartyID:
		return m.OldRelyingPartyID(ctx)
	}
	return nil, fmt.Errorf("unknown AuthCode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case authcode.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case authcode.FieldUserID:
		v, ok := value.(typedef.UserID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case authcode.FieldExpireAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpireAt(v)
		return nil
	case authcode.FieldUsedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedAt(v)
		return nil
	case authcode.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case authcode.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	case authcode.FieldRelyingPartyID:
		v, ok := value.(typedef.RelyingPartyID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelyingPartyID(v)
		return nil
	}
	return fmt.Errorf("unknown AuthCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuthCodeMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, authcode.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuthCodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case authcode.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case authcode.FieldUserID:
		v, ok := value.(typedef.UserID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown AuthCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuthCodeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(authcode.FieldUsedAt) {
		fields = append(fields, authcode.FieldUsedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuthCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthCodeMutation) ClearField(name string) error {
	switch name {
	case authcode.FieldUsedAt:
		m.ClearUsedAt()
		return nil
	}
	return fmt.Errorf("unknown AuthCode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuthCodeMutation) ResetField(name string) error {
	switch name {
	case authcode.FieldCode:
		m.ResetCode()
		return nil
	case authcode.FieldUserID:
		m.ResetUserID()
		return nil
	case authcode.FieldExpireAt:
		m.ResetExpireAt()
		return nil
	case authcode.FieldUsedAt:
		m.ResetUsedAt()
		return nil
	case authcode.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case authcode.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	case authcode.FieldRelyingPartyID:
		m.ResetRelyingPartyID()
		return nil
	}
	return fmt.Errorf("unknown AuthCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuthCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.relying_party != nil {
		edges = append(edges, authcode.EdgeRelyingParty)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuthCodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case authcode.EdgeRelyingParty:
		if id := m.relying_party; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuthCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuthCodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuthCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrelying_party {
		edges = append(edges, authcode.EdgeRelyingParty)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuthCodeMutation) EdgeCleared(name string) bool {
	switch name {
	case authcode.EdgeRelyingParty:
		return m.clearedrelying_party
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuthCodeMutation) ClearEdge(name string) error {
	switch name {
	case authcode.EdgeRelyingParty:
		m.ClearRelyingParty()
		return nil
	}
	return fmt.Errorf("unknown AuthCode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuthCodeMutation) ResetEdge(name string) error {
	switch name {
	case authcode.EdgeRelyingParty:
		m.ResetRelyingParty()
		return nil
	}
	return fmt.Errorf("unknown AuthCode edge %s", name)
}

// ConsentMutation represents an operation that mutates the Consent nodes in the graph.
type ConsentMutation struct {
	config
	op            Op
	typ           string
	id            *typedef.ConsentID
	client_id     *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	user          *typedef.UserID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Consent, error)
	predicates    []predicate.Consent
}

var _ ent.Mutation = (*ConsentMutation)(nil)

// consentOption allows management of the mutation configuration using functional options.
type consentOption func(*ConsentMutation)

// newConsentMutation creates new mutation for the Consent entity.
func newConsentMutation(c config, op Op, opts ...consentOption) *ConsentMutation {
	m := &ConsentMutation{
		config:        c,
		op:            op,
		typ:           TypeConsent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConsentID sets the ID field of the mutation.
func withConsentID(id typedef.ConsentID) consentOption {
	return func(m *ConsentMutation) {
		var (
			err   error
			once  sync.Once
			value *Consent
		)
		m.oldValue = func(ctx context.Context) (*Consent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Consent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConsent sets the old Consent of the mutation.
func withConsent(node *Consent) consentOption {
	return func(m *ConsentMutation) {
		m.oldValue = func(context.Context) (*Consent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConsentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConsentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Consent entities.
func (m *ConsentMutation) SetID(id typedef.ConsentID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConsentMutation) ID() (id typedef.ConsentID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConsentMutation) IDs(ctx context.Context) ([]typedef.ConsentID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []typedef.ConsentID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Consent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetClientID sets the "client_id" field.
func (m *ConsentMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *ConsentMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the Consent entity.
// If the Consent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConsentMutation) OldClientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *ConsentMutation) ResetClientID() {
	m.client_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ConsentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ConsentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Consent entity.
// If the Consent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConsentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ConsentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user_id" field.
func (m *ConsentMutation) SetUserID(ti typedef.UserID) {
	m.user = &ti
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ConsentMutation) UserID() (r typedef.UserID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Consent entity.
// If the Consent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConsentMutation) OldUserID(ctx context.Context) (v typedef.UserID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ConsentMutation) ResetUserID() {
	m.user = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ConsentMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[consent.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ConsentMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ConsentMutation) UserIDs() (ids []typedef.UserID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ConsentMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ConsentMutation builder.
func (m *ConsentMutation) Where(ps ...predicate.Consent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ConsentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ConsentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Consent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ConsentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ConsentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Consent).
func (m *ConsentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConsentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.client_id != nil {
		fields = append(fields, consent.FieldClientID)
	}
	if m.created_at != nil {
		fields = append(fields, consent.FieldCreatedAt)
	}
	if m.user != nil {
		fields = append(fields, consent.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConsentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case consent.FieldClientID:
		return m.ClientID()
	case consent.FieldCreatedAt:
		return m.CreatedAt()
	case consent.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConsentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case consent.FieldClientID:
		return m.OldClientID(ctx)
	case consent.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case consent.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Consent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConsentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case consent.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case consent.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case consent.FieldUserID:
		v, ok := value.(typedef.UserID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Consent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConsentMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConsentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConsentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Consent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConsentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConsentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConsentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Consent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConsentMutation) ResetField(name string) error {
	switch name {
	case consent.FieldClientID:
		m.ResetClientID()
		return nil
	case consent.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case consent.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Consent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConsentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, consent.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConsentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case consent.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConsentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConsentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConsentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, consent.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConsentMutation) EdgeCleared(name string) bool {
	switch name {
	case consent.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConsentMutation) ClearEdge(name string) error {
	switch name {
	case consent.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Consent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConsentMutation) ResetEdge(name string) error {
	switch name {
	case consent.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Consent edge %s", name)
}

// RedirectUriMutation represents an operation that mutates the RedirectUri nodes in the graph.
type RedirectUriMutation struct {
	config
	op                   Op
	typ                  string
	id                   *typedef.RedirectUriID
	uri                  *string
	created_at           *time.Time
	modified_at          *time.Time
	clearedFields        map[string]struct{}
	relying_party        *typedef.RelyingPartyID
	clearedrelying_party bool
	done                 bool
	oldValue             func(context.Context) (*RedirectUri, error)
	predicates           []predicate.RedirectUri
}

var _ ent.Mutation = (*RedirectUriMutation)(nil)

// redirecturiOption allows management of the mutation configuration using functional options.
type redirecturiOption func(*RedirectUriMutation)

// newRedirectUriMutation creates new mutation for the RedirectUri entity.
func newRedirectUriMutation(c config, op Op, opts ...redirecturiOption) *RedirectUriMutation {
	m := &RedirectUriMutation{
		config:        c,
		op:            op,
		typ:           TypeRedirectUri,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRedirectUriID sets the ID field of the mutation.
func withRedirectUriID(id typedef.RedirectUriID) redirecturiOption {
	return func(m *RedirectUriMutation) {
		var (
			err   error
			once  sync.Once
			value *RedirectUri
		)
		m.oldValue = func(ctx context.Context) (*RedirectUri, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RedirectUri.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRedirectUri sets the old RedirectUri of the mutation.
func withRedirectUri(node *RedirectUri) redirecturiOption {
	return func(m *RedirectUriMutation) {
		m.oldValue = func(context.Context) (*RedirectUri, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RedirectUriMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RedirectUriMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RedirectUri entities.
func (m *RedirectUriMutation) SetID(id typedef.RedirectUriID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RedirectUriMutation) ID() (id typedef.RedirectUriID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RedirectUriMutation) IDs(ctx context.Context) ([]typedef.RedirectUriID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []typedef.RedirectUriID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RedirectUri.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURI sets the "uri" field.
func (m *RedirectUriMutation) SetURI(s string) {
	m.uri = &s
}

// URI returns the value of the "uri" field in the mutation.
func (m *RedirectUriMutation) URI() (r string, exists bool) {
	v := m.uri
	if v == nil {
		return
	}
	return *v, true
}

// OldURI returns the old "uri" field's value of the RedirectUri entity.
// If the RedirectUri object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RedirectUriMutation) OldURI(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURI is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURI: %w", err)
	}
	return oldValue.URI, nil
}

// ResetURI resets all changes to the "uri" field.
func (m *RedirectUriMutation) ResetURI() {
	m.uri = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RedirectUriMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RedirectUriMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RedirectUri entity.
// If the RedirectUri object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RedirectUriMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RedirectUriMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *RedirectUriMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *RedirectUriMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the RedirectUri entity.
// If the RedirectUri object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RedirectUriMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *RedirectUriMutation) ResetModifiedAt() {
	m.modified_at = nil
}

// SetRelyingPartyID sets the "relying_party_id" field.
func (m *RedirectUriMutation) SetRelyingPartyID(tpi typedef.RelyingPartyID) {
	m.relying_party = &tpi
}

// RelyingPartyID returns the value of the "relying_party_id" field in the mutation.
func (m *RedirectUriMutation) RelyingPartyID() (r typedef.RelyingPartyID, exists bool) {
	v := m.relying_party
	if v == nil {
		return
	}
	return *v, true
}

// OldRelyingPartyID returns the old "relying_party_id" field's value of the RedirectUri entity.
// If the RedirectUri object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RedirectUriMutation) OldRelyingPartyID(ctx context.Context) (v typedef.RelyingPartyID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelyingPartyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelyingPartyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelyingPartyID: %w", err)
	}
	return oldValue.RelyingPartyID, nil
}

// ResetRelyingPartyID resets all changes to the "relying_party_id" field.
func (m *RedirectUriMutation) ResetRelyingPartyID() {
	m.relying_party = nil
}

// ClearRelyingParty clears the "relying_party" edge to the RelyingParty entity.
func (m *RedirectUriMutation) ClearRelyingParty() {
	m.clearedrelying_party = true
	m.clearedFields[redirecturi.FieldRelyingPartyID] = struct{}{}
}

// RelyingPartyCleared reports if the "relying_party" edge to the RelyingParty entity was cleared.
func (m *RedirectUriMutation) RelyingPartyCleared() bool {
	return m.clearedrelying_party
}

// RelyingPartyIDs returns the "relying_party" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RelyingPartyID instead. It exists only for internal usage by the builders.
func (m *RedirectUriMutation) RelyingPartyIDs() (ids []typedef.RelyingPartyID) {
	if id := m.relying_party; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRelyingParty resets all changes to the "relying_party" edge.
func (m *RedirectUriMutation) ResetRelyingParty() {
	m.relying_party = nil
	m.clearedrelying_party = false
}

// Where appends a list predicates to the RedirectUriMutation builder.
func (m *RedirectUriMutation) Where(ps ...predicate.RedirectUri) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RedirectUriMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RedirectUriMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RedirectUri, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RedirectUriMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RedirectUriMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RedirectUri).
func (m *RedirectUriMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RedirectUriMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.uri != nil {
		fields = append(fields, redirecturi.FieldURI)
	}
	if m.created_at != nil {
		fields = append(fields, redirecturi.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, redirecturi.FieldModifiedAt)
	}
	if m.relying_party != nil {
		fields = append(fields, redirecturi.FieldRelyingPartyID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RedirectUriMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case redirecturi.FieldURI:
		return m.URI()
	case redirecturi.FieldCreatedAt:
		return m.CreatedAt()
	case redirecturi.FieldModifiedAt:
		return m.ModifiedAt()
	case redirecturi.FieldRelyingPartyID:
		return m.RelyingPartyID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RedirectUriMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case redirecturi.FieldURI:
		return m.OldURI(ctx)
	case redirecturi.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case redirecturi.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	case redirecturi.FieldRelyingPartyID:
		return m.OldRelyingPartyID(ctx)
	}
	return nil, fmt.Errorf("unknown RedirectUri field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RedirectUriMutation) SetField(name string, value ent.Value) error {
	switch name {
	case redirecturi.FieldURI:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURI(v)
		return nil
	case redirecturi.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case redirecturi.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	case redirecturi.FieldRelyingPartyID:
		v, ok := value.(typedef.RelyingPartyID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelyingPartyID(v)
		return nil
	}
	return fmt.Errorf("unknown RedirectUri field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RedirectUriMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RedirectUriMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RedirectUriMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RedirectUri numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RedirectUriMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RedirectUriMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RedirectUriMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RedirectUri nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RedirectUriMutation) ResetField(name string) error {
	switch name {
	case redirecturi.FieldURI:
		m.ResetURI()
		return nil
	case redirecturi.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case redirecturi.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	case redirecturi.FieldRelyingPartyID:
		m.ResetRelyingPartyID()
		return nil
	}
	return fmt.Errorf("unknown RedirectUri field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RedirectUriMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.relying_party != nil {
		edges = append(edges, redirecturi.EdgeRelyingParty)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RedirectUriMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case redirecturi.EdgeRelyingParty:
		if id := m.relying_party; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RedirectUriMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RedirectUriMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RedirectUriMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrelying_party {
		edges = append(edges, redirecturi.EdgeRelyingParty)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RedirectUriMutation) EdgeCleared(name string) bool {
	switch name {
	case redirecturi.EdgeRelyingParty:
		return m.clearedrelying_party
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RedirectUriMutation) ClearEdge(name string) error {
	switch name {
	case redirecturi.EdgeRelyingParty:
		m.ClearRelyingParty()
		return nil
	}
	return fmt.Errorf("unknown RedirectUri unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RedirectUriMutation) ResetEdge(name string) error {
	switch name {
	case redirecturi.EdgeRelyingParty:
		m.ResetRelyingParty()
		return nil
	}
	return fmt.Errorf("unknown RedirectUri edge %s", name)
}

// RelyingPartyMutation represents an operation that mutates the RelyingParty nodes in the graph.
type RelyingPartyMutation struct {
	config
	op                   Op
	typ                  string
	id                   *typedef.RelyingPartyID
	client_id            *string
	client_secret        *string
	created_at           *time.Time
	modified_at          *time.Time
	clearedFields        map[string]struct{}
	auth_codes           map[typedef.AuthCodeID]struct{}
	removedauth_codes    map[typedef.AuthCodeID]struct{}
	clearedauth_codes    bool
	redirect_uris        map[typedef.RedirectUriID]struct{}
	removedredirect_uris map[typedef.RedirectUriID]struct{}
	clearedredirect_uris bool
	done                 bool
	oldValue             func(context.Context) (*RelyingParty, error)
	predicates           []predicate.RelyingParty
}

var _ ent.Mutation = (*RelyingPartyMutation)(nil)

// relyingpartyOption allows management of the mutation configuration using functional options.
type relyingpartyOption func(*RelyingPartyMutation)

// newRelyingPartyMutation creates new mutation for the RelyingParty entity.
func newRelyingPartyMutation(c config, op Op, opts ...relyingpartyOption) *RelyingPartyMutation {
	m := &RelyingPartyMutation{
		config:        c,
		op:            op,
		typ:           TypeRelyingParty,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRelyingPartyID sets the ID field of the mutation.
func withRelyingPartyID(id typedef.RelyingPartyID) relyingpartyOption {
	return func(m *RelyingPartyMutation) {
		var (
			err   error
			once  sync.Once
			value *RelyingParty
		)
		m.oldValue = func(ctx context.Context) (*RelyingParty, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RelyingParty.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRelyingParty sets the old RelyingParty of the mutation.
func withRelyingParty(node *RelyingParty) relyingpartyOption {
	return func(m *RelyingPartyMutation) {
		m.oldValue = func(context.Context) (*RelyingParty, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RelyingPartyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RelyingPartyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RelyingParty entities.
func (m *RelyingPartyMutation) SetID(id typedef.RelyingPartyID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RelyingPartyMutation) ID() (id typedef.RelyingPartyID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RelyingPartyMutation) IDs(ctx context.Context) ([]typedef.RelyingPartyID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []typedef.RelyingPartyID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RelyingParty.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetClientID sets the "client_id" field.
func (m *RelyingPartyMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *RelyingPartyMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the RelyingParty entity.
// If the RelyingParty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelyingPartyMutation) OldClientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *RelyingPartyMutation) ResetClientID() {
	m.client_id = nil
}

// SetClientSecret sets the "client_secret" field.
func (m *RelyingPartyMutation) SetClientSecret(s string) {
	m.client_secret = &s
}

// ClientSecret returns the value of the "client_secret" field in the mutation.
func (m *RelyingPartyMutation) ClientSecret() (r string, exists bool) {
	v := m.client_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldClientSecret returns the old "client_secret" field's value of the RelyingParty entity.
// If the RelyingParty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelyingPartyMutation) OldClientSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientSecret: %w", err)
	}
	return oldValue.ClientSecret, nil
}

// ResetClientSecret resets all changes to the "client_secret" field.
func (m *RelyingPartyMutation) ResetClientSecret() {
	m.client_secret = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RelyingPartyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RelyingPartyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RelyingParty entity.
// If the RelyingParty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelyingPartyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RelyingPartyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *RelyingPartyMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *RelyingPartyMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the RelyingParty entity.
// If the RelyingParty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelyingPartyMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *RelyingPartyMutation) ResetModifiedAt() {
	m.modified_at = nil
}

// AddAuthCodeIDs adds the "auth_codes" edge to the AuthCode entity by ids.
func (m *RelyingPartyMutation) AddAuthCodeIDs(ids ...typedef.AuthCodeID) {
	if m.auth_codes == nil {
		m.auth_codes = make(map[typedef.AuthCodeID]struct{})
	}
	for i := range ids {
		m.auth_codes[ids[i]] = struct{}{}
	}
}

// ClearAuthCodes clears the "auth_codes" edge to the AuthCode entity.
func (m *RelyingPartyMutation) ClearAuthCodes() {
	m.clearedauth_codes = true
}

// AuthCodesCleared reports if the "auth_codes" edge to the AuthCode entity was cleared.
func (m *RelyingPartyMutation) AuthCodesCleared() bool {
	return m.clearedauth_codes
}

// RemoveAuthCodeIDs removes the "auth_codes" edge to the AuthCode entity by IDs.
func (m *RelyingPartyMutation) RemoveAuthCodeIDs(ids ...typedef.AuthCodeID) {
	if m.removedauth_codes == nil {
		m.removedauth_codes = make(map[typedef.AuthCodeID]struct{})
	}
	for i := range ids {
		delete(m.auth_codes, ids[i])
		m.removedauth_codes[ids[i]] = struct{}{}
	}
}

// RemovedAuthCodes returns the removed IDs of the "auth_codes" edge to the AuthCode entity.
func (m *RelyingPartyMutation) RemovedAuthCodesIDs() (ids []typedef.AuthCodeID) {
	for id := range m.removedauth_codes {
		ids = append(ids, id)
	}
	return
}

// AuthCodesIDs returns the "auth_codes" edge IDs in the mutation.
func (m *RelyingPartyMutation) AuthCodesIDs() (ids []typedef.AuthCodeID) {
	for id := range m.auth_codes {
		ids = append(ids, id)
	}
	return
}

// ResetAuthCodes resets all changes to the "auth_codes" edge.
func (m *RelyingPartyMutation) ResetAuthCodes() {
	m.auth_codes = nil
	m.clearedauth_codes = false
	m.removedauth_codes = nil
}

// AddRedirectURIIDs adds the "redirect_uris" edge to the RedirectUri entity by ids.
func (m *RelyingPartyMutation) AddRedirectURIIDs(ids ...typedef.RedirectUriID) {
	if m.redirect_uris == nil {
		m.redirect_uris = make(map[typedef.RedirectUriID]struct{})
	}
	for i := range ids {
		m.redirect_uris[ids[i]] = struct{}{}
	}
}

// ClearRedirectUris clears the "redirect_uris" edge to the RedirectUri entity.
func (m *RelyingPartyMutation) ClearRedirectUris() {
	m.clearedredirect_uris = true
}

// RedirectUrisCleared reports if the "redirect_uris" edge to the RedirectUri entity was cleared.
func (m *RelyingPartyMutation) RedirectUrisCleared() bool {
	return m.clearedredirect_uris
}

// RemoveRedirectURIIDs removes the "redirect_uris" edge to the RedirectUri entity by IDs.
func (m *RelyingPartyMutation) RemoveRedirectURIIDs(ids ...typedef.RedirectUriID) {
	if m.removedredirect_uris == nil {
		m.removedredirect_uris = make(map[typedef.RedirectUriID]struct{})
	}
	for i := range ids {
		delete(m.redirect_uris, ids[i])
		m.removedredirect_uris[ids[i]] = struct{}{}
	}
}

// RemovedRedirectUris returns the removed IDs of the "redirect_uris" edge to the RedirectUri entity.
func (m *RelyingPartyMutation) RemovedRedirectUrisIDs() (ids []typedef.RedirectUriID) {
	for id := range m.removedredirect_uris {
		ids = append(ids, id)
	}
	return
}

// RedirectUrisIDs returns the "redirect_uris" edge IDs in the mutation.
func (m *RelyingPartyMutation) RedirectUrisIDs() (ids []typedef.RedirectUriID) {
	for id := range m.redirect_uris {
		ids = append(ids, id)
	}
	return
}

// ResetRedirectUris resets all changes to the "redirect_uris" edge.
func (m *RelyingPartyMutation) ResetRedirectUris() {
	m.redirect_uris = nil
	m.clearedredirect_uris = false
	m.removedredirect_uris = nil
}

// Where appends a list predicates to the RelyingPartyMutation builder.
func (m *RelyingPartyMutation) Where(ps ...predicate.RelyingParty) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RelyingPartyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RelyingPartyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RelyingParty, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RelyingPartyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RelyingPartyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RelyingParty).
func (m *RelyingPartyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RelyingPartyMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.client_id != nil {
		fields = append(fields, relyingparty.FieldClientID)
	}
	if m.client_secret != nil {
		fields = append(fields, relyingparty.FieldClientSecret)
	}
	if m.created_at != nil {
		fields = append(fields, relyingparty.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, relyingparty.FieldModifiedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RelyingPartyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case relyingparty.FieldClientID:
		return m.ClientID()
	case relyingparty.FieldClientSecret:
		return m.ClientSecret()
	case relyingparty.FieldCreatedAt:
		return m.CreatedAt()
	case relyingparty.FieldModifiedAt:
		return m.ModifiedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RelyingPartyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case relyingparty.FieldClientID:
		return m.OldClientID(ctx)
	case relyingparty.FieldClientSecret:
		return m.OldClientSecret(ctx)
	case relyingparty.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case relyingparty.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	}
	return nil, fmt.Errorf("unknown RelyingParty field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RelyingPartyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case relyingparty.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case relyingparty.FieldClientSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientSecret(v)
		return nil
	case relyingparty.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case relyingparty.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	}
	return fmt.Errorf("unknown RelyingParty field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RelyingPartyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RelyingPartyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RelyingPartyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RelyingParty numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RelyingPartyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RelyingPartyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RelyingPartyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RelyingParty nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RelyingPartyMutation) ResetField(name string) error {
	switch name {
	case relyingparty.FieldClientID:
		m.ResetClientID()
		return nil
	case relyingparty.FieldClientSecret:
		m.ResetClientSecret()
		return nil
	case relyingparty.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case relyingparty.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	}
	return fmt.Errorf("unknown RelyingParty field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RelyingPartyMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.auth_codes != nil {
		edges = append(edges, relyingparty.EdgeAuthCodes)
	}
	if m.redirect_uris != nil {
		edges = append(edges, relyingparty.EdgeRedirectUris)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RelyingPartyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case relyingparty.EdgeAuthCodes:
		ids := make([]ent.Value, 0, len(m.auth_codes))
		for id := range m.auth_codes {
			ids = append(ids, id)
		}
		return ids
	case relyingparty.EdgeRedirectUris:
		ids := make([]ent.Value, 0, len(m.redirect_uris))
		for id := range m.redirect_uris {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RelyingPartyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedauth_codes != nil {
		edges = append(edges, relyingparty.EdgeAuthCodes)
	}
	if m.removedredirect_uris != nil {
		edges = append(edges, relyingparty.EdgeRedirectUris)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RelyingPartyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case relyingparty.EdgeAuthCodes:
		ids := make([]ent.Value, 0, len(m.removedauth_codes))
		for id := range m.removedauth_codes {
			ids = append(ids, id)
		}
		return ids
	case relyingparty.EdgeRedirectUris:
		ids := make([]ent.Value, 0, len(m.removedredirect_uris))
		for id := range m.removedredirect_uris {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RelyingPartyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauth_codes {
		edges = append(edges, relyingparty.EdgeAuthCodes)
	}
	if m.clearedredirect_uris {
		edges = append(edges, relyingparty.EdgeRedirectUris)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RelyingPartyMutation) EdgeCleared(name string) bool {
	switch name {
	case relyingparty.EdgeAuthCodes:
		return m.clearedauth_codes
	case relyingparty.EdgeRedirectUris:
		return m.clearedredirect_uris
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RelyingPartyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RelyingParty unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RelyingPartyMutation) ResetEdge(name string) error {
	switch name {
	case relyingparty.EdgeAuthCodes:
		m.ResetAuthCodes()
		return nil
	case relyingparty.EdgeRedirectUris:
		m.ResetRedirectUris()
		return nil
	}
	return fmt.Errorf("unknown RelyingParty edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *typedef.UserID
	name            *string
	password        *string
	totp_secret     *string
	created_at      *time.Time
	modified_at     *time.Time
	clearedFields   map[string]struct{}
	consents        map[typedef.ConsentID]struct{}
	removedconsents map[typedef.ConsentID]struct{}
	clearedconsents bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id typedef.UserID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id typedef.UserID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id typedef.UserID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]typedef.UserID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []typedef.UserID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetTotpSecret sets the "totp_secret" field.
func (m *UserMutation) SetTotpSecret(s string) {
	m.totp_secret = &s
}

// TotpSecret returns the value of the "totp_secret" field in the mutation.
func (m *UserMutation) TotpSecret() (r string, exists bool) {
	v := m.totp_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldTotpSecret returns the old "totp_secret" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTotpSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotpSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotpSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotpSecret: %w", err)
	}
	return oldValue.TotpSecret, nil
}

// ClearTotpSecret clears the value of the "totp_secret" field.
func (m *UserMutation) ClearTotpSecret() {
	m.totp_secret = nil
	m.clearedFields[user.FieldTotpSecret] = struct{}{}
}

// TotpSecretCleared returns if the "totp_secret" field was cleared in this mutation.
func (m *UserMutation) TotpSecretCleared() bool {
	_, ok := m.clearedFields[user.FieldTotpSecret]
	return ok
}

// ResetTotpSecret resets all changes to the "totp_secret" field.
func (m *UserMutation) ResetTotpSecret() {
	m.totp_secret = nil
	delete(m.clearedFields, user.FieldTotpSecret)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *UserMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *UserMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *UserMutation) ResetModifiedAt() {
	m.modified_at = nil
}

// AddConsentIDs adds the "consents" edge to the Consent entity by ids.
func (m *UserMutation) AddConsentIDs(ids ...typedef.ConsentID) {
	if m.consents == nil {
		m.consents = make(map[typedef.ConsentID]struct{})
	}
	for i := range ids {
		m.consents[ids[i]] = struct{}{}
	}
}

// ClearConsents clears the "consents" edge to the Consent entity.
func (m *UserMutation) ClearConsents() {
	m.clearedconsents = true
}

// ConsentsCleared reports if the "consents" edge to the Consent entity was cleared.
func (m *UserMutation) ConsentsCleared() bool {
	return m.clearedconsents
}

// RemoveConsentIDs removes the "consents" edge to the Consent entity by IDs.
func (m *UserMutation) RemoveConsentIDs(ids ...typedef.ConsentID) {
	if m.removedconsents == nil {
		m.removedconsents = make(map[typedef.ConsentID]struct{})
	}
	for i := range ids {
		delete(m.consents, ids[i])
		m.removedconsents[ids[i]] = struct{}{}
	}
}

// RemovedConsents returns the removed IDs of the "consents" edge to the Consent entity.
func (m *UserMutation) RemovedConsentsIDs() (ids []typedef.ConsentID) {
	for id := range m.removedconsents {
		ids = append(ids, id)
	}
	return
}

// ConsentsIDs returns the "consents" edge IDs in the mutation.
func (m *UserMutation) ConsentsIDs() (ids []typedef.ConsentID) {
	for id := range m.consents {
		ids = append(ids, id)
	}
	return
}

// ResetConsents resets all changes to the "consents" edge.
func (m *UserMutation) ResetConsents() {
	m.consents = nil
	m.clearedconsents = false
	m.removedconsents = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.totp_secret != nil {
		fields = append(fields, user.FieldTotpSecret)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, user.FieldModifiedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldPassword:
		return m.Password()
	case user.FieldTotpSecret:
		return m.TotpSecret()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldModifiedAt:
		return m.ModifiedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldTotpSecret:
		return m.OldTotpSecret(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldTotpSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotpSecret(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldTotpSecret) {
		fields = append(fields, user.FieldTotpSecret)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldTotpSecret:
		m.ClearTotpSecret()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldTotpSecret:
		m.ResetTotpSecret()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.consents != nil {
		edges = append(edges, user.EdgeConsents)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeConsents:
		ids := make([]ent.Value, 0, len(m.consents))
		for id := range m.consents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedconsents != nil {
		edges = append(edges, user.EdgeConsents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeConsents:
		ids := make([]ent.Value, 0, len(m.removedconsents))
		for id := range m.removedconsents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedconsents {
		edges = append(edges, user.EdgeConsents)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeConsents:
		return m.clearedconsents
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeConsents:
		m.ResetConsents()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
