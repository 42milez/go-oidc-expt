// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/42milez/go-oidc-server/app/ent/ent/predicate"
	"github.com/42milez/go-oidc-server/app/ent/ent/relyingparty"
	"github.com/42milez/go-oidc-server/app/typedef"
)

// RelyingPartyUpdate is the builder for updating RelyingParty entities.
type RelyingPartyUpdate struct {
	config
	hooks    []Hook
	mutation *RelyingPartyMutation
}

// Where appends a list predicates to the RelyingPartyUpdate builder.
func (rpu *RelyingPartyUpdate) Where(ps ...predicate.RelyingParty) *RelyingPartyUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetClientSecret sets the "client_secret" field.
func (rpu *RelyingPartyUpdate) SetClientSecret(ts typedef.ClientSecret) *RelyingPartyUpdate {
	rpu.mutation.SetClientSecret(ts)
	return rpu
}

// SetModifiedAt sets the "modified_at" field.
func (rpu *RelyingPartyUpdate) SetModifiedAt(t time.Time) *RelyingPartyUpdate {
	rpu.mutation.SetModifiedAt(t)
	return rpu
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (rpu *RelyingPartyUpdate) SetNillableModifiedAt(t *time.Time) *RelyingPartyUpdate {
	if t != nil {
		rpu.SetModifiedAt(*t)
	}
	return rpu
}

// Mutation returns the RelyingPartyMutation object of the builder.
func (rpu *RelyingPartyUpdate) Mutation() *RelyingPartyMutation {
	return rpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *RelyingPartyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *RelyingPartyUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *RelyingPartyUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *RelyingPartyUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *RelyingPartyUpdate) check() error {
	if v, ok := rpu.mutation.ClientSecret(); ok {
		if err := relyingparty.ClientSecretValidator(string(v)); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "RelyingParty.client_secret": %w`, err)}
		}
	}
	return nil
}

func (rpu *RelyingPartyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(relyingparty.Table, relyingparty.Columns, sqlgraph.NewFieldSpec(relyingparty.FieldID, field.TypeInt))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.ClientSecret(); ok {
		_spec.SetField(relyingparty.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := rpu.mutation.ModifiedAt(); ok {
		_spec.SetField(relyingparty.FieldModifiedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relyingparty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// RelyingPartyUpdateOne is the builder for updating a single RelyingParty entity.
type RelyingPartyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RelyingPartyMutation
}

// SetClientSecret sets the "client_secret" field.
func (rpuo *RelyingPartyUpdateOne) SetClientSecret(ts typedef.ClientSecret) *RelyingPartyUpdateOne {
	rpuo.mutation.SetClientSecret(ts)
	return rpuo
}

// SetModifiedAt sets the "modified_at" field.
func (rpuo *RelyingPartyUpdateOne) SetModifiedAt(t time.Time) *RelyingPartyUpdateOne {
	rpuo.mutation.SetModifiedAt(t)
	return rpuo
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (rpuo *RelyingPartyUpdateOne) SetNillableModifiedAt(t *time.Time) *RelyingPartyUpdateOne {
	if t != nil {
		rpuo.SetModifiedAt(*t)
	}
	return rpuo
}

// Mutation returns the RelyingPartyMutation object of the builder.
func (rpuo *RelyingPartyUpdateOne) Mutation() *RelyingPartyMutation {
	return rpuo.mutation
}

// Where appends a list predicates to the RelyingPartyUpdate builder.
func (rpuo *RelyingPartyUpdateOne) Where(ps ...predicate.RelyingParty) *RelyingPartyUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *RelyingPartyUpdateOne) Select(field string, fields ...string) *RelyingPartyUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated RelyingParty entity.
func (rpuo *RelyingPartyUpdateOne) Save(ctx context.Context) (*RelyingParty, error) {
	return withHooks(ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *RelyingPartyUpdateOne) SaveX(ctx context.Context) *RelyingParty {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *RelyingPartyUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *RelyingPartyUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *RelyingPartyUpdateOne) check() error {
	if v, ok := rpuo.mutation.ClientSecret(); ok {
		if err := relyingparty.ClientSecretValidator(string(v)); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "RelyingParty.client_secret": %w`, err)}
		}
	}
	return nil
}

func (rpuo *RelyingPartyUpdateOne) sqlSave(ctx context.Context) (_node *RelyingParty, err error) {
	if err := rpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(relyingparty.Table, relyingparty.Columns, sqlgraph.NewFieldSpec(relyingparty.FieldID, field.TypeInt))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RelyingParty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, relyingparty.FieldID)
		for _, f := range fields {
			if !relyingparty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != relyingparty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.ClientSecret(); ok {
		_spec.SetField(relyingparty.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.ModifiedAt(); ok {
		_spec.SetField(relyingparty.FieldModifiedAt, field.TypeTime, value)
	}
	_node = &RelyingParty{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relyingparty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}
