// Code generated by ent, DO NOT EDIT.

package consent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/42milez/go-oidc-server/app/ent/ent/predicate"
	"github.com/42milez/go-oidc-server/app/typedef"
)

// ID filters vertices based on their ID field.
func ID(id typedef.ConsentID) predicate.Consent {
	return predicate.Consent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id typedef.ConsentID) predicate.Consent {
	return predicate.Consent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id typedef.ConsentID) predicate.Consent {
	return predicate.Consent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...typedef.ConsentID) predicate.Consent {
	return predicate.Consent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...typedef.ConsentID) predicate.Consent {
	return predicate.Consent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id typedef.ConsentID) predicate.Consent {
	return predicate.Consent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id typedef.ConsentID) predicate.Consent {
	return predicate.Consent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id typedef.ConsentID) predicate.Consent {
	return predicate.Consent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id typedef.ConsentID) predicate.Consent {
	return predicate.Consent(sql.FieldLTE(FieldID, id))
}

// RelyingPartyID applies equality check predicate on the "relying_party_id" field. It's identical to RelyingPartyIDEQ.
func RelyingPartyID(v typedef.RelyingPartyID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldEQ(FieldRelyingPartyID, vc))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Consent {
	return predicate.Consent(sql.FieldEQ(FieldCreatedAt, v))
}

// UserConsents applies equality check predicate on the "user_consents" field. It's identical to UserConsentsEQ.
func UserConsents(v typedef.UserID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldEQ(FieldUserConsents, vc))
}

// RelyingPartyIDEQ applies the EQ predicate on the "relying_party_id" field.
func RelyingPartyIDEQ(v typedef.RelyingPartyID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldEQ(FieldRelyingPartyID, vc))
}

// RelyingPartyIDNEQ applies the NEQ predicate on the "relying_party_id" field.
func RelyingPartyIDNEQ(v typedef.RelyingPartyID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldNEQ(FieldRelyingPartyID, vc))
}

// RelyingPartyIDIn applies the In predicate on the "relying_party_id" field.
func RelyingPartyIDIn(vs ...typedef.RelyingPartyID) predicate.Consent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Consent(sql.FieldIn(FieldRelyingPartyID, v...))
}

// RelyingPartyIDNotIn applies the NotIn predicate on the "relying_party_id" field.
func RelyingPartyIDNotIn(vs ...typedef.RelyingPartyID) predicate.Consent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Consent(sql.FieldNotIn(FieldRelyingPartyID, v...))
}

// RelyingPartyIDGT applies the GT predicate on the "relying_party_id" field.
func RelyingPartyIDGT(v typedef.RelyingPartyID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldGT(FieldRelyingPartyID, vc))
}

// RelyingPartyIDGTE applies the GTE predicate on the "relying_party_id" field.
func RelyingPartyIDGTE(v typedef.RelyingPartyID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldGTE(FieldRelyingPartyID, vc))
}

// RelyingPartyIDLT applies the LT predicate on the "relying_party_id" field.
func RelyingPartyIDLT(v typedef.RelyingPartyID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldLT(FieldRelyingPartyID, vc))
}

// RelyingPartyIDLTE applies the LTE predicate on the "relying_party_id" field.
func RelyingPartyIDLTE(v typedef.RelyingPartyID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldLTE(FieldRelyingPartyID, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Consent {
	return predicate.Consent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Consent {
	return predicate.Consent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Consent {
	return predicate.Consent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Consent {
	return predicate.Consent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Consent {
	return predicate.Consent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Consent {
	return predicate.Consent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Consent {
	return predicate.Consent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Consent {
	return predicate.Consent(sql.FieldLTE(FieldCreatedAt, v))
}

// UserConsentsEQ applies the EQ predicate on the "user_consents" field.
func UserConsentsEQ(v typedef.UserID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldEQ(FieldUserConsents, vc))
}

// UserConsentsNEQ applies the NEQ predicate on the "user_consents" field.
func UserConsentsNEQ(v typedef.UserID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldNEQ(FieldUserConsents, vc))
}

// UserConsentsIn applies the In predicate on the "user_consents" field.
func UserConsentsIn(vs ...typedef.UserID) predicate.Consent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Consent(sql.FieldIn(FieldUserConsents, v...))
}

// UserConsentsNotIn applies the NotIn predicate on the "user_consents" field.
func UserConsentsNotIn(vs ...typedef.UserID) predicate.Consent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Consent(sql.FieldNotIn(FieldUserConsents, v...))
}

// UserConsentsGT applies the GT predicate on the "user_consents" field.
func UserConsentsGT(v typedef.UserID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldGT(FieldUserConsents, vc))
}

// UserConsentsGTE applies the GTE predicate on the "user_consents" field.
func UserConsentsGTE(v typedef.UserID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldGTE(FieldUserConsents, vc))
}

// UserConsentsLT applies the LT predicate on the "user_consents" field.
func UserConsentsLT(v typedef.UserID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldLT(FieldUserConsents, vc))
}

// UserConsentsLTE applies the LTE predicate on the "user_consents" field.
func UserConsentsLTE(v typedef.UserID) predicate.Consent {
	vc := uint64(v)
	return predicate.Consent(sql.FieldLTE(FieldUserConsents, vc))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Consent {
	return predicate.Consent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Consent {
	return predicate.Consent(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Consent) predicate.Consent {
	return predicate.Consent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Consent) predicate.Consent {
	return predicate.Consent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Consent) predicate.Consent {
	return predicate.Consent(func(s *sql.Selector) {
		p(s.Not())
	})
}
