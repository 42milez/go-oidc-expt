// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/42milez/go-oidc-server/app/ent/ent/consent"
	"github.com/42milez/go-oidc-server/app/typedef"
)

// Consent is the model entity for the Consent schema.
type Consent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID typedef.UserID `json:"user_id,omitempty"`
	// RelyingPartyID holds the value of the "relying_party_id" field.
	RelyingPartyID int `json:"relying_party_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	user_id      *typedef.UserID
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Consent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case consent.FieldID, consent.FieldUserID, consent.FieldRelyingPartyID:
			values[i] = new(sql.NullInt64)
		case consent.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case consent.ForeignKeys[0]: // user_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Consent fields.
func (c *Consent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case consent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case consent.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = typedef.UserID(value.Int64)
			}
		case consent.FieldRelyingPartyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field relying_party_id", values[i])
			} else if value.Valid {
				c.RelyingPartyID = int(value.Int64)
			}
		case consent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case consent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.user_id = new(typedef.UserID)
				*c.user_id = typedef.UserID(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Consent.
// This includes values selected through modifiers, order, etc.
func (c *Consent) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Consent.
// Note that you need to call Consent.Unwrap() before calling this method if this Consent
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Consent) Update() *ConsentUpdateOne {
	return NewConsentClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Consent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Consent) Unwrap() *Consent {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Consent is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Consent) String() string {
	var builder strings.Builder
	builder.WriteString("Consent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("relying_party_id=")
	builder.WriteString(fmt.Sprintf("%v", c.RelyingPartyID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Consents is a parsable slice of Consent.
type Consents []*Consent
