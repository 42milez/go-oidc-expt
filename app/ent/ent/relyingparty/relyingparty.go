// Code generated by ent, DO NOT EDIT.

package relyingparty

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the relyingparty type in the database.
	Label = "relying_party"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "client_secret"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldModifiedAt holds the string denoting the modified_at field in the database.
	FieldModifiedAt = "modified_at"
	// EdgeAuthCodes holds the string denoting the auth_codes edge name in mutations.
	EdgeAuthCodes = "auth_codes"
	// EdgeRedirectUris holds the string denoting the redirect_uris edge name in mutations.
	EdgeRedirectUris = "redirect_uris"
	// Table holds the table name of the relyingparty in the database.
	Table = "relying_parties"
	// AuthCodesTable is the table that holds the auth_codes relation/edge.
	AuthCodesTable = "auth_codes"
	// AuthCodesInverseTable is the table name for the AuthCode entity.
	// It exists in this package in order to avoid circular dependency with the "authcode" package.
	AuthCodesInverseTable = "auth_codes"
	// AuthCodesColumn is the table column denoting the auth_codes relation/edge.
	AuthCodesColumn = "relying_party_id"
	// RedirectUrisTable is the table that holds the redirect_uris relation/edge.
	RedirectUrisTable = "redirect_uris"
	// RedirectUrisInverseTable is the table name for the RedirectUri entity.
	// It exists in this package in order to avoid circular dependency with the "redirecturi" package.
	RedirectUrisInverseTable = "redirect_uris"
	// RedirectUrisColumn is the table column denoting the redirect_uris relation/edge.
	RedirectUrisColumn = "relying_party_id"
)

// Columns holds all SQL columns for relyingparty fields.
var Columns = []string{
	FieldID,
	FieldClientID,
	FieldClientSecret,
	FieldCreatedAt,
	FieldModifiedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ClientSecretValidator is a validator for the "client_secret" field. It is called by the builders before save.
	ClientSecretValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultModifiedAt holds the default value on creation for the "modified_at" field.
	DefaultModifiedAt func() time.Time
	// UpdateDefaultModifiedAt holds the default value on update for the "modified_at" field.
	UpdateDefaultModifiedAt func() time.Time
)

// OrderOption defines the ordering options for the RelyingParty queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByClientSecret orders the results by the client_secret field.
func ByClientSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientSecret, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByModifiedAt orders the results by the modified_at field.
func ByModifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedAt, opts...).ToFunc()
}

// ByAuthCodesCount orders the results by auth_codes count.
func ByAuthCodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthCodesStep(), opts...)
	}
}

// ByAuthCodes orders the results by auth_codes terms.
func ByAuthCodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthCodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRedirectUrisCount orders the results by redirect_uris count.
func ByRedirectUrisCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRedirectUrisStep(), opts...)
	}
}

// ByRedirectUris orders the results by redirect_uris terms.
func ByRedirectUris(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRedirectUrisStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAuthCodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthCodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuthCodesTable, AuthCodesColumn),
	)
}
func newRedirectUrisStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RedirectUrisInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RedirectUrisTable, RedirectUrisColumn),
	)
}
