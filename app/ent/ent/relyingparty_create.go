// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/42milez/go-oidc-server/app/ent/ent/authcode"
	"github.com/42milez/go-oidc-server/app/ent/ent/redirecturi"
	"github.com/42milez/go-oidc-server/app/ent/ent/relyingparty"
	"github.com/42milez/go-oidc-server/app/typedef"
)

// RelyingPartyCreate is the builder for creating a RelyingParty entity.
type RelyingPartyCreate struct {
	config
	mutation *RelyingPartyMutation
	hooks    []Hook
}

// SetClientID sets the "client_id" field.
func (rpc *RelyingPartyCreate) SetClientID(ti typedef.ClientId) *RelyingPartyCreate {
	rpc.mutation.SetClientID(ti)
	return rpc
}

// SetClientSecret sets the "client_secret" field.
func (rpc *RelyingPartyCreate) SetClientSecret(ts typedef.ClientSecret) *RelyingPartyCreate {
	rpc.mutation.SetClientSecret(ts)
	return rpc
}

// SetCreatedAt sets the "created_at" field.
func (rpc *RelyingPartyCreate) SetCreatedAt(t time.Time) *RelyingPartyCreate {
	rpc.mutation.SetCreatedAt(t)
	return rpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rpc *RelyingPartyCreate) SetNillableCreatedAt(t *time.Time) *RelyingPartyCreate {
	if t != nil {
		rpc.SetCreatedAt(*t)
	}
	return rpc
}

// SetModifiedAt sets the "modified_at" field.
func (rpc *RelyingPartyCreate) SetModifiedAt(t time.Time) *RelyingPartyCreate {
	rpc.mutation.SetModifiedAt(t)
	return rpc
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (rpc *RelyingPartyCreate) SetNillableModifiedAt(t *time.Time) *RelyingPartyCreate {
	if t != nil {
		rpc.SetModifiedAt(*t)
	}
	return rpc
}

// AddAuthCodeIDs adds the "auth_codes" edge to the AuthCode entity by IDs.
func (rpc *RelyingPartyCreate) AddAuthCodeIDs(ids ...int) *RelyingPartyCreate {
	rpc.mutation.AddAuthCodeIDs(ids...)
	return rpc
}

// AddAuthCodes adds the "auth_codes" edges to the AuthCode entity.
func (rpc *RelyingPartyCreate) AddAuthCodes(a ...*AuthCode) *RelyingPartyCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rpc.AddAuthCodeIDs(ids...)
}

// AddRedirectURIIDs adds the "redirect_uris" edge to the RedirectURI entity by IDs.
func (rpc *RelyingPartyCreate) AddRedirectURIIDs(ids ...int) *RelyingPartyCreate {
	rpc.mutation.AddRedirectURIIDs(ids...)
	return rpc
}

// AddRedirectUris adds the "redirect_uris" edges to the RedirectURI entity.
func (rpc *RelyingPartyCreate) AddRedirectUris(r ...*RedirectURI) *RelyingPartyCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpc.AddRedirectURIIDs(ids...)
}

// Mutation returns the RelyingPartyMutation object of the builder.
func (rpc *RelyingPartyCreate) Mutation() *RelyingPartyMutation {
	return rpc.mutation
}

// Save creates the RelyingParty in the database.
func (rpc *RelyingPartyCreate) Save(ctx context.Context) (*RelyingParty, error) {
	rpc.defaults()
	return withHooks(ctx, rpc.sqlSave, rpc.mutation, rpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpc *RelyingPartyCreate) SaveX(ctx context.Context) *RelyingParty {
	v, err := rpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpc *RelyingPartyCreate) Exec(ctx context.Context) error {
	_, err := rpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpc *RelyingPartyCreate) ExecX(ctx context.Context) {
	if err := rpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpc *RelyingPartyCreate) defaults() {
	if _, ok := rpc.mutation.CreatedAt(); !ok {
		v := relyingparty.DefaultCreatedAt()
		rpc.mutation.SetCreatedAt(v)
	}
	if _, ok := rpc.mutation.ModifiedAt(); !ok {
		v := relyingparty.DefaultModifiedAt()
		rpc.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpc *RelyingPartyCreate) check() error {
	if _, ok := rpc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "RelyingParty.client_id"`)}
	}
	if _, ok := rpc.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`ent: missing required field "RelyingParty.client_secret"`)}
	}
	if v, ok := rpc.mutation.ClientSecret(); ok {
		if err := relyingparty.ClientSecretValidator(string(v)); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "RelyingParty.client_secret": %w`, err)}
		}
	}
	if _, ok := rpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RelyingParty.created_at"`)}
	}
	if _, ok := rpc.mutation.ModifiedAt(); !ok {
		return &ValidationError{Name: "modified_at", err: errors.New(`ent: missing required field "RelyingParty.modified_at"`)}
	}
	return nil
}

func (rpc *RelyingPartyCreate) sqlSave(ctx context.Context) (*RelyingParty, error) {
	if err := rpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rpc.mutation.id = &_node.ID
	rpc.mutation.done = true
	return _node, nil
}

func (rpc *RelyingPartyCreate) createSpec() (*RelyingParty, *sqlgraph.CreateSpec) {
	var (
		_node = &RelyingParty{config: rpc.config}
		_spec = sqlgraph.NewCreateSpec(relyingparty.Table, sqlgraph.NewFieldSpec(relyingparty.FieldID, field.TypeInt))
	)
	if value, ok := rpc.mutation.ClientID(); ok {
		_spec.SetField(relyingparty.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := rpc.mutation.ClientSecret(); ok {
		_spec.SetField(relyingparty.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := rpc.mutation.CreatedAt(); ok {
		_spec.SetField(relyingparty.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rpc.mutation.ModifiedAt(); ok {
		_spec.SetField(relyingparty.FieldModifiedAt, field.TypeTime, value)
		_node.ModifiedAt = value
	}
	if nodes := rpc.mutation.AuthCodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   relyingparty.AuthCodesTable,
			Columns: []string{relyingparty.AuthCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.RedirectUrisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   relyingparty.RedirectUrisTable,
			Columns: []string{relyingparty.RedirectUrisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(redirecturi.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RelyingPartyCreateBulk is the builder for creating many RelyingParty entities in bulk.
type RelyingPartyCreateBulk struct {
	config
	builders []*RelyingPartyCreate
}

// Save creates the RelyingParty entities in the database.
func (rpcb *RelyingPartyCreateBulk) Save(ctx context.Context) ([]*RelyingParty, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rpcb.builders))
	nodes := make([]*RelyingParty, len(rpcb.builders))
	mutators := make([]Mutator, len(rpcb.builders))
	for i := range rpcb.builders {
		func(i int, root context.Context) {
			builder := rpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RelyingPartyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpcb *RelyingPartyCreateBulk) SaveX(ctx context.Context) []*RelyingParty {
	v, err := rpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpcb *RelyingPartyCreateBulk) Exec(ctx context.Context) error {
	_, err := rpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcb *RelyingPartyCreateBulk) ExecX(ctx context.Context) {
	if err := rpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
