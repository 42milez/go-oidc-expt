// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	ent "github.com/42milez/go-oidc-server/app/ent/ent"
	entity "github.com/42milez/go-oidc-server/app/entity"
	typedef "github.com/42milez/go-oidc-server/app/typedef"
	gomock "github.com/golang/mock/gomock"
)

// MockCookieReader is a mock of CookieReader interface.
type MockCookieReader struct {
	ctrl     *gomock.Controller
	recorder *MockCookieReaderMockRecorder
}

// MockCookieReaderMockRecorder is the mock recorder for MockCookieReader.
type MockCookieReaderMockRecorder struct {
	mock *MockCookieReader
}

// NewMockCookieReader creates a new mock instance.
func NewMockCookieReader(ctrl *gomock.Controller) *MockCookieReader {
	mock := &MockCookieReader{ctrl: ctrl}
	mock.recorder = &MockCookieReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieReader) EXPECT() *MockCookieReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockCookieReader) Read(r *http.Request, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", r, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCookieReaderMockRecorder) Read(r, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCookieReader)(nil).Read), r, name)
}

// MockCookieWriter is a mock of CookieWriter interface.
type MockCookieWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCookieWriterMockRecorder
}

// MockCookieWriterMockRecorder is the mock recorder for MockCookieWriter.
type MockCookieWriterMockRecorder struct {
	mock *MockCookieWriter
}

// NewMockCookieWriter creates a new mock instance.
func NewMockCookieWriter(ctrl *gomock.Controller) *MockCookieWriter {
	mock := &MockCookieWriter{ctrl: ctrl}
	mock.recorder = &MockCookieWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieWriter) EXPECT() *MockCookieWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockCookieWriter) Write(w http.ResponseWriter, name, val string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", w, name, val, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockCookieWriterMockRecorder) Write(w, name, val, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCookieWriter)(nil).Write), w, name, val, ttl)
}

// MockSessionCreator is a mock of SessionCreator interface.
type MockSessionCreator struct {
	ctrl     *gomock.Controller
	recorder *MockSessionCreatorMockRecorder
}

// MockSessionCreatorMockRecorder is the mock recorder for MockSessionCreator.
type MockSessionCreatorMockRecorder struct {
	mock *MockSessionCreator
}

// NewMockSessionCreator creates a new mock instance.
func NewMockSessionCreator(ctrl *gomock.Controller) *MockSessionCreator {
	mock := &MockSessionCreator{ctrl: ctrl}
	mock.recorder = &MockSessionCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionCreator) EXPECT() *MockSessionCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessionCreator) Create(ctx context.Context, sess *entity.Session) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, sess)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionCreatorMockRecorder) Create(ctx, sess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionCreator)(nil).Create), ctx, sess)
}

// MockSessionRestorer is a mock of SessionRestorer interface.
type MockSessionRestorer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRestorerMockRecorder
}

// MockSessionRestorerMockRecorder is the mock recorder for MockSessionRestorer.
type MockSessionRestorerMockRecorder struct {
	mock *MockSessionRestorer
}

// NewMockSessionRestorer creates a new mock instance.
func NewMockSessionRestorer(ctrl *gomock.Controller) *MockSessionRestorer {
	mock := &MockSessionRestorer{ctrl: ctrl}
	mock.recorder = &MockSessionRestorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRestorer) EXPECT() *MockSessionRestorerMockRecorder {
	return m.recorder
}

// Restore mocks base method.
func (m *MockSessionRestorer) Restore(r *http.Request, sid typedef.SessionID) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", r, sid)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockSessionRestorerMockRecorder) Restore(r, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockSessionRestorer)(nil).Restore), r, sid)
}

// MockSessionUpdater is a mock of SessionUpdater interface.
type MockSessionUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockSessionUpdaterMockRecorder
}

// MockSessionUpdaterMockRecorder is the mock recorder for MockSessionUpdater.
type MockSessionUpdaterMockRecorder struct {
	mock *MockSessionUpdater
}

// NewMockSessionUpdater creates a new mock instance.
func NewMockSessionUpdater(ctrl *gomock.Controller) *MockSessionUpdater {
	mock := &MockSessionUpdater{ctrl: ctrl}
	mock.recorder = &MockSessionUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionUpdater) EXPECT() *MockSessionUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockSessionUpdater) Update(ctx context.Context, sid typedef.SessionID, sess *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, sid, sess)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSessionUpdaterMockRecorder) Update(ctx, sid, sess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSessionUpdater)(nil).Update), ctx, sid, sess)
}

// MockCacheStatusChecker is a mock of CacheStatusChecker interface.
type MockCacheStatusChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCacheStatusCheckerMockRecorder
}

// MockCacheStatusCheckerMockRecorder is the mock recorder for MockCacheStatusChecker.
type MockCacheStatusCheckerMockRecorder struct {
	mock *MockCacheStatusChecker
}

// NewMockCacheStatusChecker creates a new mock instance.
func NewMockCacheStatusChecker(ctrl *gomock.Controller) *MockCacheStatusChecker {
	mock := &MockCacheStatusChecker{ctrl: ctrl}
	mock.recorder = &MockCacheStatusCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheStatusChecker) EXPECT() *MockCacheStatusCheckerMockRecorder {
	return m.recorder
}

// CheckCacheStatus mocks base method.
func (m *MockCacheStatusChecker) CheckCacheStatus(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCacheStatus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCacheStatus indicates an expected call of CheckCacheStatus.
func (mr *MockCacheStatusCheckerMockRecorder) CheckCacheStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCacheStatus", reflect.TypeOf((*MockCacheStatusChecker)(nil).CheckCacheStatus), ctx)
}

// MockDBStatusChecker is a mock of DBStatusChecker interface.
type MockDBStatusChecker struct {
	ctrl     *gomock.Controller
	recorder *MockDBStatusCheckerMockRecorder
}

// MockDBStatusCheckerMockRecorder is the mock recorder for MockDBStatusChecker.
type MockDBStatusCheckerMockRecorder struct {
	mock *MockDBStatusChecker
}

// NewMockDBStatusChecker creates a new mock instance.
func NewMockDBStatusChecker(ctrl *gomock.Controller) *MockDBStatusChecker {
	mock := &MockDBStatusChecker{ctrl: ctrl}
	mock.recorder = &MockDBStatusCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBStatusChecker) EXPECT() *MockDBStatusCheckerMockRecorder {
	return m.recorder
}

// CheckDBStatus mocks base method.
func (m *MockDBStatusChecker) CheckDBStatus(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDBStatus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDBStatus indicates an expected call of CheckDBStatus.
func (mr *MockDBStatusCheckerMockRecorder) CheckDBStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDBStatus", reflect.TypeOf((*MockDBStatusChecker)(nil).CheckDBStatus), ctx)
}

// MockHealthChecker is a mock of HealthChecker interface.
type MockHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerMockRecorder
}

// MockHealthCheckerMockRecorder is the mock recorder for MockHealthChecker.
type MockHealthCheckerMockRecorder struct {
	mock *MockHealthChecker
}

// NewMockHealthChecker creates a new mock instance.
func NewMockHealthChecker(ctrl *gomock.Controller) *MockHealthChecker {
	mock := &MockHealthChecker{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthChecker) EXPECT() *MockHealthCheckerMockRecorder {
	return m.recorder
}

// CheckCacheStatus mocks base method.
func (m *MockHealthChecker) CheckCacheStatus(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCacheStatus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCacheStatus indicates an expected call of CheckCacheStatus.
func (mr *MockHealthCheckerMockRecorder) CheckCacheStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCacheStatus", reflect.TypeOf((*MockHealthChecker)(nil).CheckCacheStatus), ctx)
}

// CheckDBStatus mocks base method.
func (m *MockHealthChecker) CheckDBStatus(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDBStatus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDBStatus indicates an expected call of CheckDBStatus.
func (mr *MockHealthCheckerMockRecorder) CheckDBStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDBStatus", reflect.TypeOf((*MockHealthChecker)(nil).CheckDBStatus), ctx)
}

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticator) Authenticate(ctx context.Context, name, pw string) (typedef.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, name, pw)
	ret0, _ := ret[0].(typedef.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticatorMockRecorder) Authenticate(ctx, name, pw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticator)(nil).Authenticate), ctx, name, pw)
}

// MockUserCreator is a mock of UserCreator interface.
type MockUserCreator struct {
	ctrl     *gomock.Controller
	recorder *MockUserCreatorMockRecorder
}

// MockUserCreatorMockRecorder is the mock recorder for MockUserCreator.
type MockUserCreatorMockRecorder struct {
	mock *MockUserCreator
}

// NewMockUserCreator creates a new mock instance.
func NewMockUserCreator(ctrl *gomock.Controller) *MockUserCreator {
	mock := &MockUserCreator{ctrl: ctrl}
	mock.recorder = &MockUserCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCreator) EXPECT() *MockUserCreatorMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserCreator) CreateUser(ctx context.Context, name, pw string) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, name, pw)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserCreatorMockRecorder) CreateUser(ctx, name, pw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserCreator)(nil).CreateUser), ctx, name, pw)
}

// MockUserReader is a mock of UserReader interface.
type MockUserReader struct {
	ctrl     *gomock.Controller
	recorder *MockUserReaderMockRecorder
}

// MockUserReaderMockRecorder is the mock recorder for MockUserReader.
type MockUserReaderMockRecorder struct {
	mock *MockUserReader
}

// NewMockUserReader creates a new mock instance.
func NewMockUserReader(ctrl *gomock.Controller) *MockUserReader {
	mock := &MockUserReader{ctrl: ctrl}
	mock.recorder = &MockUserReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReader) EXPECT() *MockUserReaderMockRecorder {
	return m.recorder
}

// SelectUser mocks base method.
func (m *MockUserReader) SelectUser(ctx context.Context) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUser", ctx)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUser indicates an expected call of SelectUser.
func (mr *MockUserReaderMockRecorder) SelectUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUser", reflect.TypeOf((*MockUserReader)(nil).SelectUser), ctx)
}

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthorizer) Authorize(ctx context.Context, clientID, redirectURI, state string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, clientID, redirectURI, state)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthorizerMockRecorder) Authorize(ctx, clientID, redirectURI, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizer)(nil).Authorize), ctx, clientID, redirectURI, state)
}

// MockConsentAcceptor is a mock of ConsentAcceptor interface.
type MockConsentAcceptor struct {
	ctrl     *gomock.Controller
	recorder *MockConsentAcceptorMockRecorder
}

// MockConsentAcceptorMockRecorder is the mock recorder for MockConsentAcceptor.
type MockConsentAcceptorMockRecorder struct {
	mock *MockConsentAcceptor
}

// NewMockConsentAcceptor creates a new mock instance.
func NewMockConsentAcceptor(ctrl *gomock.Controller) *MockConsentAcceptor {
	mock := &MockConsentAcceptor{ctrl: ctrl}
	mock.recorder = &MockConsentAcceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsentAcceptor) EXPECT() *MockConsentAcceptorMockRecorder {
	return m.recorder
}

// AcceptConsent mocks base method.
func (m *MockConsentAcceptor) AcceptConsent(ctx context.Context, userID typedef.UserID, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptConsent", ctx, userID, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptConsent indicates an expected call of AcceptConsent.
func (mr *MockConsentAcceptorMockRecorder) AcceptConsent(ctx, userID, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptConsent", reflect.TypeOf((*MockConsentAcceptor)(nil).AcceptConsent), ctx, userID, clientID)
}
