openapi: "3.1.0"
info:
  version: 1.0.0
  title: go-oidc-server
  description: An experimental implementation of OpenID Connect with Go
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    email: support@example.com
    url: https://example.com/support/
  license:
    name: MIT
    url: TBD
servers:
  - url: http://localhost:8080
    description: Development Environment
  - url: https://staging.idp.example.com
    description: Staging Environment
  - url: https://idp.example.com
    description: Production Environment
tags:
  - name: Authentication
  - name: Authorization
  - name: HealthCheck
  - name: Registration
  - name: Token
paths:
  /health:
    get:
      description: Check the health of service.
      operationId: checkHealth
      tags:
        - HealthCheck
      responses:
        '200':
          description: service operational
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '500':
          description: service not operational
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /register:
    post:
      description: Creates a new user in the database.
      operationId: register
      tags:
        - Registration
      requestBody:
        description: User to register onto the database
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserName'
                - $ref: '#/components/schemas/UserPassword'
      responses:
        '200':
          description: Successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Registration failed due to invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                details:
                  - 'error1'
                  - 'error2'
                  - 'error3'
                status: 400
                summary: invalid request
        '500':
          $ref: '#/components/responses/InternalServerError'
  /authenticate:
    post:
      description: Authenticates a user.
      operationId: authenticate
      tags:
        - Authentication
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        description: User credential
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserName'
                - $ref: '#/components/schemas/UserPassword'
      responses:
        '200':
          description: Successfully authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Authentication failed due to invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                details:
                  - 'error1'
                  - 'error2'
                  - 'error3'
                status: 400
                summary: invalid request
        '401':
          description: Authentication failed due to invalid username or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                details:
                  - 'error1'
                  - 'error2'
                  - 'error3'
                status: 401
                summary: invalid username or password
        '500':
          $ref: '#/components/responses/InternalServerError'
  /consent:
    post:
      description: Grant relying party permission to use user data.
      operationId: consent
      tags:
        - Authorization
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '302':
          description: Successfully consented.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /authorize:
    get:
      description: Determines authentication and authorization status of user, redirects user to the appropriate page and returns an authorization code.
      operationId: authorize
      tags:
        - Authorization
      parameters:
        - $ref: '#/components/parameters/ClientId'
        - $ref: '#/components/parameters/Nonce'
        - $ref: '#/components/parameters/RedirectUri'
        - $ref: '#/components/parameters/ResponseType'
        - $ref: '#/components/parameters/Scope'
        - $ref: '#/components/parameters/State'
        - $ref: '#/components/parameters/Display'
        - $ref: '#/components/parameters/IdTokenHint'
        - $ref: '#/components/parameters/MaxAge'
        - $ref: '#/components/parameters/Prompt'
        - $ref: '#/components/parameters/SessionId'
      responses:
        '302':
          description: Successfully authorized.
        '400':
          description: Invalid authorization parameters.
        '401':
          description: User not authenticated.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /token:
    post:
      description: Returns a new Access Token, Refresh Token, and ID Token using the authorization code obtained from the authorization endpoint. The Refresh Token is used to reissue the access token.
      operationId: token
      tags:
        - Token
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        description: Issues a new access token if grant_type is authorization_code, and reissues access token if grant_type is refresh_token.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
            examples:
              new:
                summary: Issue Access Token
                value: grant_type=authorization_code&client_id=s6BhdRkqt3&client_secret=some_secret12345&code=SplxlOBeZQQYbYS6WxSbIA&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
              refresh:
                summary: Reissue Access Token
                value: grant_type=refresh_token&client_id=s6BhdRkqt3&client_secret=some_secret12345&refresh_token=8xLOxBtZp8
components:
  parameters:
    SessionId:
      name: sid
      in: cookie
      description: Session ID
      schema:
        type: string
      example: MTY5NDA4Nzc4MnxNNjBEOHUwTUxMLThObHBKajA2bkxkRFZJZC1kZnROc21WZjZFbFEtaVpmaHF4YkVvRk5uak9WYkdtRVM3eXctS1l4Q0FHeldab2M9fHDaZZGFzG1bSJdDRhgWPmMCQPuuFWg1h3VSE1WzOL8q
      x-go-json-ignore: true
    ClientId:
      name: client_id
      in: query
      description: represents "client_id" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      required: true
      schema:
        type: string
      example: ''
      x-oapi-codegen-extra-tags:
        schema: client_id
        validate: required,alphanum
    Display:
      name: display
      in: query
      description: represents "display" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      required: true
      schema:
        type: string
      example: ''
      x-oapi-codegen-extra-tags:
        schema: display
        validate: required
    IdTokenHint:
      name: id_token_hint
      in: query
      description: represents "id_token_hint" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      required: true
      schema:
        type: string
      example: ''
      x-oapi-codegen-extra-tags:
        schema: id_token_hint
        validate: required,alpha
    MaxAge:
      name: max_age
      in: query
      description: represents "max_age" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      required: true
      schema:
        type: integer
        format: uint64
      example: 0
      x-oapi-codegen-extra-tags:
        schema: max_age
        validate: required
    Nonce:
      name: nonce
      in: query
      description: represents "nonce" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      required: true
      schema:
        type: string
      example: ''
      x-oapi-codegen-extra-tags:
        schema: nonce
        validate: required,ascii
    Prompt:
      name: prompt
      in: query
      description: represents "prompt" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      required: true
      schema:
        type: string
      example: ''
      x-oapi-codegen-extra-tags:
        schema: prompt
        validate: required
    RedirectUri:
      name: redirect_uri
      in: query
      description: represents "redirect_uri" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      required: true
      schema:
        type: string
      example: ''
      x-oapi-codegen-extra-tags:
        schema: redirect_uri
        validate: required,printascii
    ResponseType:
      name: response_type
      in: query
      description: represents "response_type" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      required: true
      schema:
        type: string
      example: ''
      x-oapi-codegen-extra-tags:
        schema: response_type
        validate: required,response-type-validator
    Scope:
      name: scope
      in: query
      description: represents "scope" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      required: true
      schema:
        type: string
      example: ''
      x-oapi-codegen-extra-tags:
        schema: scope
        validate: required,scope-validator
    State:
      name: state
      in: query
      description: represents "state" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      required: true
      schema:
        type: string
      example: ''
      x-oapi-codegen-extra-tags:
        schema: state
        validate: required,alphanum
  responses:
    InternalServerError:
      description: Operation failed due to unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            details: '["error1", "error2", "error3"]'
            status: 500
            summary: unexpected error occurred
  schemas:
    Health:
      description: represents the status of service.
      type: object
      required:
        - status
      properties:
        status:
          type: integer
          format: uint64
          example: 200
    User:
      description: represents user data.
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: uint64
              x-oapi-codegen-extra-tags:
                validate: required
        - $ref: '#/components/schemas/UserName'
    UserName:
      description: represents a part of user data.
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: username0
          x-oapi-codegen-extra-tags:
            validate: required
    UserPassword:
      description: represents the password of user
      type: object
      required:
        - password
      properties:
        password:
          type: string
          example: username0
          x-oapi-codegen-extra-tags:
            validate: required
    ErrorResponse:
      description: represents error
      type: object
      required:
        - status
        - details
      properties:
        details:
          type: array
          items:
            type: string
          example:
            - ''
            - ''
            - ''
        status:
          type: integer
          format: uint64
          example: 0
        summary:
          type: string
          x-go-type: xerr.PublicErr
          x-go-type-skip-optional-pointer: true
          example: ''
