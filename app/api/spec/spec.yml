openapi: "3.1.0"
info:
  version: 1.0.0
  title: go-oidc-server
  description: An experimental implementation of OpenID Connect with Go
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    email: support@example.com
    url: https://example.com/support/
  license:
    name: MIT
    url: TBD
servers:
  - url: http://localhost:8080
    description: Development Environment
  - url: https://staging.idp.example.com
    description: Staging Environment
  - url: https://idp.example.com
    description: Production Environment
tags:
  - name: HealthCheck
  - name: Registration
  - name: Authentication
paths:
  /health:
    get:
      description: Check the health of service.
      operationId: checkHealth
      tags:
        - HealthCheck
      responses:
        '200':
          description: service operational
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '500':
          description: service not operational
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /register:
    post:
      description: Creates a new user in the database.
      operationId: registerUser
      tags:
        - Registration
      requestBody:
        description: User to register onto the database
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserName'
                - $ref: '#/components/schemas/UserPassword'
      responses:
        '200':
          description: Successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Registration failed due to invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 400
                detail: invalid request
        '500':
          description: Registration failed due to unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 500
                detail: unexpected error occurred
  /authenticate:
    post:
      description: Authenticates a user.
      operationId: authenticateUser
      tags:
        - Authentication
      parameters:
        - name: sid
          description: Session ID
          in: cookie
          schema:
            type: string
          example: MTY5NDA4Nzc4MnxNNjBEOHUwTUxMLThObHBKajA2bkxkRFZJZC1kZnROc21WZjZFbFEtaVpmaHF4YkVvRk5uak9WYkdtRVM3eXctS1l4Q0FHeldab2M9fHDaZZGFzG1bSJdDRhgWPmMCQPuuFWg1h3VSE1WzOL8q
      requestBody:
        description: User to authenticate
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserName'
                - $ref: '#/components/schemas/UserPassword'
      responses:
        '200':
          description: Successfully authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Authentication failed due to invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 400
                detail: invalid request
        '401':
          description: Authentication failed due to invalid username or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 401
                detail: invalid username or password
        '500':
          description: Authentication failed due to unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 500
                detail: unexpected error occurred
components:
  schemas:
    Health:
      description: represents the status of service.
      type: object
      required:
        - status
      properties:
        status:
          type: integer
          format: uint64
          example: 200
    User:
      description: represents user data.
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              x-oapi-codegen-extra-tags:
                validate: required
              format: uint64
        - $ref: '#/components/schemas/UserName'
    UserName:
      description: represents a part of user data.
      type: object
      required:
        - name
      properties:
        name:
          type: string
          x-oapi-codegen-extra-tags:
            validate: required
          example: username0
    UserPassword:
      description: represents the password of user
      type: object
      required:
        - password
      properties:
        password:
          type: string
          x-oapi-codegen-extra-tags:
            validate: required
          example: username0
    ErrorResponse:
      description: represents error
      type: object
      required:
        - status
        - detail
      properties:
        status:
          type: integer
          format: uint64
          example: 0
        detail:
          type: string
          example: ''
