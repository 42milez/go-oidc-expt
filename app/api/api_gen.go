// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/42milez/go-oidc-server/app/pkg/xerr"
	"github.com/42milez/go-oidc-server/app/typedef"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for TokenErrorResponseError.
const (
	TokenErrorResponseErrorInvalidClient        TokenErrorResponseError = "invalid_client"
	TokenErrorResponseErrorInvalidGrant         TokenErrorResponseError = "invalid_grant"
	TokenErrorResponseErrorInvalidRequest       TokenErrorResponseError = "invalid_request"
	TokenErrorResponseErrorInvalidScope         TokenErrorResponseError = "invalid_scope"
	TokenErrorResponseErrorUnauthorizedClient   TokenErrorResponseError = "unauthorized_client"
	TokenErrorResponseErrorUnsupportedGrantType TokenErrorResponseError = "unsupported_grant_type"
)

// ErrorResponse represents error response
type ErrorResponse struct {
	Details *[]string      `json:"details,omitempty"`
	Status  uint64         `json:"status"`
	Summary xerr.PublicErr `json:"summary"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// TokenErrorResponse https://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenErrorResponse
type TokenErrorResponse struct {
	Error TokenErrorResponseError `json:"error"`
}

// TokenErrorResponseError defines model for TokenErrorResponse.Error.
type TokenErrorResponseError string

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	AccessToken  string            `json:"access_token"`
	ExpiresIn    uint64            `json:"expires_in"`
	IdToken      *string           `json:"id_token,omitempty"`
	RefreshToken string            `json:"refresh_token"`
	TokenType    typedef.TokenType `json:"token_type"`
}

// User defines model for User.
type User struct {
	ID   typedef.UserID `json:"id" validate:"required"`
	Name string         `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientID defines model for ClientID.
type ClientID = string

// Code defines model for Code.
type Code = string

// Display defines model for Display.
type Display = string

// GrantType defines model for GrantType.
type GrantType = string

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectUri defines model for RedirectUri.
type RedirectUri = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError represents error response
type InternalServerError = ErrorResponse

// InvalidRequest represents error response
type InvalidRequest = ErrorResponse

// UnauthorizedRequest represents error response
type UnauthorizedRequest = ErrorResponse

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientId represents "client_id" parameter
	ClientID ClientID `form:"client_id" json:"client_id" schema:"client_id" url:"client_id" validate:"required,alphanum"`

	// Nonce represents "nonce" parameter
	Nonce Nonce `form:"nonce" json:"nonce" schema:"nonce" url:"nonce" validate:"required,alphanum"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectUri RedirectUri `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" url:"redirect_uri" validate:"required,url_encoded"`

	// ResponseType represents "response_type" parameter
	ResponseType ResponseType `form:"response_type" json:"response_type" schema:"response_type" url:"response_type" validate:"required,response-type-validator"`

	// Scope represents "scope" parameter
	Scope Scope `form:"scope" json:"scope" schema:"scope" url:"scope" validate:"required,scope-validator"`

	// State represents "state" parameter
	State State `form:"state" json:"state" schema:"state" url:"state" validate:"required,alphanum"`

	// Display represents "display" parameter
	Display Display `form:"display" json:"display" schema:"display" url:"display" validate:"required,display-validator"`

	// MaxAge represents "max_age" parameter
	MaxAge MaxAge `form:"max_age" json:"max_age" schema:"max_age" url:"max_age" validate:"required,numeric"`

	// Prompt represents "prompt" parameter
	Prompt Prompt `form:"prompt" json:"prompt" schema:"prompt" url:"prompt" validate:"required,prompt-validator"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// TokenFormdataBody defines parameters for Token.
type TokenFormdataBody struct {
	// Code represents "code" parameter
	Code *string `form:"code" json:"code" schema:"code" validate:"omitempty,alphanum"`

	// GrantType represents "grant_type" parameter
	GrantType string `form:"grant_type" json:"grant_type" schema:"grant_type" validate:"required,grant-type-validator"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectUri *string `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" validate:"omitempty,url_encoded"`

	// RefreshToken represents "refresh_token" parameter
	RefreshToken *string `form:"refresh_token" json:"refresh_token" schema:"refresh_token" validate:"omitempty,jwt"`
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody TokenFormdataBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

//  Interface
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authenticate
	Authenticate(w http.ResponseWriter, r *http.Request)

	// GET: /authorize
	Authorize(w http.ResponseWriter, r *http.Request)

	// POST: /consent
	Consent(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /token
	Token(w http.ResponseWriter, r *http.Request)

	// POST: /user/register
	Register(w http.ResponseWriter, r *http.Request)
}

//  Middleware
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetTokenMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Token", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

func injectRequestParameter(r *http.Request) (*http.Request, error) {
	switch r.URL.Path {
	case "/authenticate":
		return unmarshalAuthenticateParameter(r)
	case "/authorize":
		return unmarshalAuthorizeParameter(r)
	case "/consent":
		return unmarshalConsentParameter(r)
	case "/health":
		return unmarshalCheckHealthParameter(r)
	case "/token":
		return unmarshalTokenParameter(r)
	case "/user/register":
		return unmarshalRegisterParameter(r)
	default:
		return nil, xerr.InvalidPath
	}
}

func unmarshalAuthenticateParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &AuthenticateParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalAuthorizeParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &AuthorizeParams{}

	// --------------------------------------------------
	//  Query Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	// Required query parameter "client_id"
	err = runtime.BindQueryParameter("form", true, true, "client_id", r.URL.Query(), &params.ClientID)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "client_id",
			Err:       err,
		}
	}

	// Required query parameter "nonce"
	err = runtime.BindQueryParameter("form", true, true, "nonce", r.URL.Query(), &params.Nonce)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "nonce",
			Err:       err,
		}
	}

	// Required query parameter "redirect_uri"
	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", r.URL.Query(), &params.RedirectUri)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "redirect_uri",
			Err:       err,
		}
	}

	// Required query parameter "response_type"
	err = runtime.BindQueryParameter("form", true, true, "response_type", r.URL.Query(), &params.ResponseType)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "response_type",
			Err:       err,
		}
	}

	// Required query parameter "scope"
	err = runtime.BindQueryParameter("form", true, true, "scope", r.URL.Query(), &params.Scope)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "scope",
			Err:       err,
		}
	}

	// Required query parameter "state"
	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "state",
			Err:       err,
		}
	}

	// Required query parameter "display"
	err = runtime.BindQueryParameter("form", true, true, "display", r.URL.Query(), &params.Display)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "display",
			Err:       err,
		}
	}

	// Required query parameter "max_age"
	err = runtime.BindQueryParameter("form", true, true, "max_age", r.URL.Query(), &params.MaxAge)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "max_age",
			Err:       err,
		}
	}

	// Required query parameter "prompt"
	err = runtime.BindQueryParameter("form", true, true, "prompt", r.URL.Query(), &params.Prompt)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "prompt",
			Err:       err,
		}
	}

	//  Query Parameter: END
	// --------------------------------------------------

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalConsentParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &ConsentParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalCheckHealthParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

func unmarshalTokenParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	//  Security Definition: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	//  Security Definition: END
	// ==================================================

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &TokenParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalRegisterParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

//  Handler and others
// --------------------------------------------------

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(si HandlerInterface, options *ChiServerOptions) *chi.Mux {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authenticate", si.Authenticate)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/authorize", si.Authorize)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/consent", si.Consent)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", si.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Token"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/token", si.Token)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/register", si.Register)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
