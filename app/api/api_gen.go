// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/42milez/go-oidc-server/app/pkg/xerr"
	"github.com/42milez/go-oidc-server/app/typedef"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// ErrorResponse represents error response
type ErrorResponse struct {
	Details *[]string      `json:"details,omitempty"`
	Status  uint64         `json:"status"`
	Summary xerr.PublicErr `json:"summary"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	AccessToken  string            `json:"access_token"`
	ExpiresIn    uint64            `json:"expires_in"`
	IdToken      string            `json:"id_token"`
	RefreshToken string            `json:"refresh_token"`
	TokenType    typedef.TokenType `json:"token_type"`
}

// User defines model for User.
type User struct {
	ID   typedef.UserID `json:"id" validate:"required"`
	Name string         `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientID defines model for ClientID.
type ClientID = string

// Code defines model for Code.
type Code = string

// Display defines model for Display.
type Display = string

// GrantType defines model for GrantType.
type GrantType = string

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectUri defines model for RedirectUri.
type RedirectUri = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError represents error response
type InternalServerError = ErrorResponse

// InvalidRequest represents error response
type InvalidRequest = ErrorResponse

// UnauthorizedRequest represents error response
type UnauthorizedRequest = ErrorResponse

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientId represents "client_id" parameter
	ClientID ClientID `form:"client_id" json:"client_id" schema:"client_id" url:"client_id" validate:"required,alphanum"`

	// Nonce represents "nonce" parameter
	Nonce Nonce `form:"nonce" json:"nonce" schema:"nonce" url:"nonce" validate:"required,alphanum"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectUri RedirectUri `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" url:"redirect_uri" validate:"required,url_encoded"`

	// ResponseType represents "response_type" parameter
	ResponseType ResponseType `form:"response_type" json:"response_type" schema:"response_type" url:"response_type" validate:"required,response-type-validator"`

	// Scope represents "scope" parameter
	Scope Scope `form:"scope" json:"scope" schema:"scope" url:"scope" validate:"required,scope-validator"`

	// State represents "state" parameter
	State State `form:"state" json:"state" schema:"state" url:"state" validate:"required,alphanum"`

	// Display represents "display" parameter
	Display Display `form:"display" json:"display" schema:"display" url:"display" validate:"required,display-validator"`

	// MaxAge represents "max_age" parameter
	MaxAge MaxAge `form:"max_age" json:"max_age" schema:"max_age" url:"max_age" validate:"required,numeric"`

	// Prompt represents "prompt" parameter
	Prompt Prompt `form:"prompt" json:"prompt" schema:"prompt" url:"prompt" validate:"required,prompt-validator"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// TokenFormdataBody defines parameters for Token.
type TokenFormdataBody struct {
	// Code represents "code" parameter
	Code *string `form:"code" json:"code" schema:"code" validate:"alphanum"`

	// GrantType represents "grant_type" parameter
	GrantType string `form:"grant_type" json:"grant_type" schema:"grant_type" validate:"required,grant-type-validator"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectUri *string `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" validate:"url_encoded"`

	// RefreshToken represents "refresh_token" parameter
	RefreshToken *string `form:"refresh_token" json:"refresh_token" schema:"refresh_token" validate:"alphanum"`
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody TokenFormdataBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

//  INTERFACE
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authenticate
	Authenticate(w http.ResponseWriter, r *http.Request)

	// GET: /authorize
	Authorize(w http.ResponseWriter, r *http.Request)

	// POST: /consent
	Consent(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /token
	Token(w http.ResponseWriter, r *http.Request)

	// POST: /user/register
	Register(w http.ResponseWriter, r *http.Request)
}

//  MIDDLEWARE
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetTokenMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Token", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

//  HANDLER AND OTHERS
// --------------------------------------------------

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(si HandlerInterface, options *ChiServerOptions) *chi.Mux {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authenticate", si.Authenticate)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/authorize", si.Authorize)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/consent", si.Consent)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", si.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Token"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/token", si.Token)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/register", si.Register)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
