// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/42milez/go-oidc-server/app/pkg/xerr"
	"github.com/42milez/go-oidc-server/app/typedef"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for TokenErrorResponseError.
const (
	TokenErrorResponseErrorInvalidClient        TokenErrorResponseError = "invalid_client"
	TokenErrorResponseErrorInvalidGrant         TokenErrorResponseError = "invalid_grant"
	TokenErrorResponseErrorInvalidRequest       TokenErrorResponseError = "invalid_request"
	TokenErrorResponseErrorInvalidScope         TokenErrorResponseError = "invalid_scope"
	TokenErrorResponseErrorUnauthorizedClient   TokenErrorResponseError = "unauthorized_client"
	TokenErrorResponseErrorUnsupportedGrantType TokenErrorResponseError = "unsupported_grant_type"
)

// ErrorResponse represents error response
type ErrorResponse struct {
	Details *[]string      `json:"details,omitempty"`
	Status  uint64         `json:"status"`
	Summary xerr.PublicErr `json:"summary"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// TokenErrorResponse https://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenErrorResponse
type TokenErrorResponse struct {
	Error TokenErrorResponseError `json:"error"`
}

// TokenErrorResponseError defines model for TokenErrorResponse.Error.
type TokenErrorResponseError string

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	AccessToken  string            `json:"access_token"`
	ExpiresIn    uint64            `json:"expires_in"`
	IdToken      *string           `json:"id_token,omitempty"`
	RefreshToken string            `json:"refresh_token"`
	TokenType    typedef.TokenType `json:"token_type"`
}

// User defines model for User.
type User struct {
	ID   typedef.UserID `json:"id" validate:"required"`
	Name string         `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientID defines model for ClientID.
type ClientID = string

// Code defines model for Code.
type Code = string

// Display defines model for Display.
type Display = string

// GrantType defines model for GrantType.
type GrantType = string

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectUri defines model for RedirectUri.
type RedirectUri = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError represents error response
type InternalServerError = ErrorResponse

// InvalidRequest represents error response
type InvalidRequest = ErrorResponse

// UnauthorizedRequest represents error response
type UnauthorizedRequest = ErrorResponse

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientId represents "client_id" parameter
	ClientID ClientID `form:"client_id" json:"client_id" schema:"client_id" url:"client_id" validate:"required,alphanum"`

	// Nonce represents "nonce" parameter
	Nonce Nonce `form:"nonce" json:"nonce" schema:"nonce" url:"nonce" validate:"required,alphanum"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectUri RedirectUri `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" url:"redirect_uri" validate:"required,url_encoded"`

	// ResponseType represents "response_type" parameter
	ResponseType ResponseType `form:"response_type" json:"response_type" schema:"response_type" url:"response_type" validate:"required,response-type-validator"`

	// Scope represents "scope" parameter
	Scope Scope `form:"scope" json:"scope" schema:"scope" url:"scope" validate:"required,scope-validator"`

	// State represents "state" parameter
	State State `form:"state" json:"state" schema:"state" url:"state" validate:"required,alphanum"`

	// Display represents "display" parameter
	Display Display `form:"display" json:"display" schema:"display" url:"display" validate:"required,display-validator"`

	// MaxAge represents "max_age" parameter
	MaxAge MaxAge `form:"max_age" json:"max_age" schema:"max_age" url:"max_age" validate:"required,numeric"`

	// Prompt represents "prompt" parameter
	Prompt Prompt `form:"prompt" json:"prompt" schema:"prompt" url:"prompt" validate:"required,prompt-validator"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// TokenFormdataBody defines parameters for Token.
type TokenFormdataBody struct {
	// Code represents "code" parameter
	Code *string `form:"code" json:"code" schema:"code" validate:"omitempty,alphanum"`

	// GrantType represents "grant_type" parameter
	GrantType string `form:"grant_type" json:"grant_type" schema:"grant_type" validate:"required,grant-type-validator"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectUri *string `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" validate:"omitempty,url_encoded"`

	// RefreshToken represents "refresh_token" parameter
	RefreshToken *string `form:"refresh_token" json:"refresh_token" schema:"refresh_token" validate:"omitempty,jwt"`
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody TokenFormdataBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

//  Interface
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authenticate
	Authenticate(w http.ResponseWriter, r *http.Request)

	// GET: /authorize
	Authorize(w http.ResponseWriter, r *http.Request)

	// POST: /consent
	Consent(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /token
	Token(w http.ResponseWriter, r *http.Request)

	// POST: /user/register
	Register(w http.ResponseWriter, r *http.Request)
}

//  Middleware
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetTokenMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Token", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

func injectRequestParameter(r *http.Request) (*http.Request, error) {
	switch r.URL.Path {
	case "/authenticate":
		return unmarshalAuthenticateParameter(r)
	case "/authorize":
		return unmarshalAuthorizeParameter(r)
	case "/consent":
		return unmarshalConsentParameter(r)
	case "/health":
		return unmarshalCheckHealthParameter(r)
	case "/token":
		return unmarshalTokenParameter(r)
	case "/user/register":
		return unmarshalRegisterParameter(r)
	default:
		return nil, xerr.InvalidPath
	}
}

func unmarshalAuthenticateParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &AuthenticateParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalAuthorizeParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &AuthorizeParams{}

	// --------------------------------------------------
	//  Query Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	// Required query parameter "client_id"
	err = runtime.BindQueryParameter("form", true, true, "client_id", r.URL.Query(), &params.ClientID)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "client_id",
			Err:       err,
		}
	}

	// Required query parameter "nonce"
	err = runtime.BindQueryParameter("form", true, true, "nonce", r.URL.Query(), &params.Nonce)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "nonce",
			Err:       err,
		}
	}

	// Required query parameter "redirect_uri"
	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", r.URL.Query(), &params.RedirectUri)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "redirect_uri",
			Err:       err,
		}
	}

	// Required query parameter "response_type"
	err = runtime.BindQueryParameter("form", true, true, "response_type", r.URL.Query(), &params.ResponseType)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "response_type",
			Err:       err,
		}
	}

	// Required query parameter "scope"
	err = runtime.BindQueryParameter("form", true, true, "scope", r.URL.Query(), &params.Scope)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "scope",
			Err:       err,
		}
	}

	// Required query parameter "state"
	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "state",
			Err:       err,
		}
	}

	// Required query parameter "display"
	err = runtime.BindQueryParameter("form", true, true, "display", r.URL.Query(), &params.Display)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "display",
			Err:       err,
		}
	}

	// Required query parameter "max_age"
	err = runtime.BindQueryParameter("form", true, true, "max_age", r.URL.Query(), &params.MaxAge)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "max_age",
			Err:       err,
		}
	}

	// Required query parameter "prompt"
	err = runtime.BindQueryParameter("form", true, true, "prompt", r.URL.Query(), &params.Prompt)
	if err != nil {
		return nil, &InvalidParamFormatError{
			ParamName: "prompt",
			Err:       err,
		}
	}

	//  Query Parameter: END
	// --------------------------------------------------

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalConsentParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &ConsentParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalCheckHealthParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

func unmarshalTokenParameter(r *http.Request) (*http.Request, error) {
	var ctx context.Context
	var err error

	// ==================================================
	//  Security Definition: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	//  Security Definition: END
	// ==================================================

	// ==================================================
	// Unmarshal Parameter: BEGIN

	if ctx == nil {
		ctx = r.Context()
	}

	params := &TokenParams{}

	// --------------------------------------------------
	// Cookie Parameter: BEGIN

	var cookie *http.Cookie

	if cookie, err = r.Cookie("sid"); err == nil {
		var value SessionId
		err = runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value)
		if err != nil {
			return nil, &InvalidParamFormatError{
				ParamName: "sid",
				Err:       err,
			}
		}
		params.Sid = &value
	}

	// Cookie Parameter: END
	// --------------------------------------------------

	ctx = context.WithValue(ctx, typedef.RequestParamKey{}, params)

	// Unmarshal Parameter: END
	// ==================================================

	return r.Clone(ctx), nil
}

func unmarshalRegisterParameter(r *http.Request) (*http.Request, error) {
	return r, nil
}

//  Handler and others
// --------------------------------------------------

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(si HandlerInterface, options *ChiServerOptions) *chi.Mux {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authenticate", si.Authenticate)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/authorize", si.Authorize)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/consent", si.Consent)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", si.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Token"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/token", si.Token)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/register", si.Register)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
