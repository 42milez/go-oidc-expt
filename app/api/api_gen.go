// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/42milez/go-oidc-server/app/pkg/xerr"
	"github.com/42milez/go-oidc-server/app/typedef"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// ErrorResponse represents error response
type ErrorResponse struct {
	Details *[]string      `json:"details,omitempty"`
	Status  uint64         `json:"status"`
	Summary xerr.PublicErr `json:"summary"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	AccessToken  string            `json:"access_token"`
	ExpiresIn    uint64            `json:"expires_in"`
	IdToken      string            `json:"id_token"`
	RefreshToken string            `json:"refresh_token"`
	TokenType    typedef.TokenType `json:"token_type"`
}

// User defines model for User.
type User struct {
	ID   typedef.UserID `json:"id" validate:"required"`
	Name string         `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientID defines model for ClientID.
type ClientID = string

// Code defines model for Code.
type Code = string

// Display defines model for Display.
type Display = string

// GrantType defines model for GrantType.
type GrantType = string

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectUri defines model for RedirectUri.
type RedirectUri = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError represents error response
type InternalServerError = ErrorResponse

// InvalidRequest represents error response
type InvalidRequest = ErrorResponse

// UnauthorizedRequest represents error response
type UnauthorizedRequest = ErrorResponse

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientId represents "client_id" parameter
	ClientID ClientID `form:"client_id" json:"client_id" schema:"client_id" url:"client_id" validate:"required,alphanum"`

	// Nonce represents "nonce" parameter
	Nonce Nonce `form:"nonce" json:"nonce" schema:"nonce" url:"nonce" validate:"required,ascii"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectUri RedirectUri `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" url:"redirect_uri" validate:"required,printascii"`

	// ResponseType represents "response_type" parameter
	ResponseType ResponseType `form:"response_type" json:"response_type" schema:"response_type" url:"response_type" validate:"required,response-type-validator"`

	// Scope represents "scope" parameter
	Scope Scope `form:"scope" json:"scope" schema:"scope" url:"scope" validate:"required,scope-validator"`

	// State represents "state" parameter
	State State `form:"state" json:"state" schema:"state" url:"state" validate:"required,alphanum"`

	// Display represents "display" parameter
	Display Display `form:"display" json:"display" schema:"display" url:"display" validate:"required"`

	// MaxAge represents "max_age" parameter
	MaxAge MaxAge `form:"max_age" json:"max_age" schema:"max_age" url:"max_age" validate:"required"`

	// Prompt represents "prompt" parameter
	Prompt Prompt `form:"prompt" json:"prompt" schema:"prompt" url:"prompt" validate:"required"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// TokenFormdataBody defines parameters for Token.
type TokenFormdataBody struct {
	Code         *string `form:"code" json:"code"`
	GrantType    string  `form:"grant_type" json:"grant_type"`
	RedirectUri  *string `form:"redirect_uri" json:"redirect_uri"`
	RefreshToken *string `form:"refresh_token" json:"refresh_token"`
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody TokenFormdataBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

//  INTERFACE
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authenticate
	Authenticate(w http.ResponseWriter, r *http.Request)

	// GET: /authorize
	Authorize(w http.ResponseWriter, r *http.Request)

	// POST: /consent
	Consent(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /token
	Token(w http.ResponseWriter, r *http.Request)

	// POST: /user/register
	Register(w http.ResponseWriter, r *http.Request)
}

//  MIDDLEWARE
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetTokenMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Token", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

//  HANDLER AND OTHERS
// --------------------------------------------------

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(si HandlerInterface, options *ChiServerOptions) *chi.Mux {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authenticate", si.Authenticate)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/authorize", si.Authorize)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/consent", si.Consent)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", si.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Token"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/token", si.Token)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/register", si.Register)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
