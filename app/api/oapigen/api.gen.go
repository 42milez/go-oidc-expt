// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/42milez/go-oidc-server/app/pkg/xerr"
	"github.com/42milez/go-oidc-server/app/typedef"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// ErrorResponse represents error response
type ErrorResponse struct {
	Details *[]string      `json:"details,omitempty"`
	Status  uint64         `json:"status"`
	Summary xerr.PublicErr `json:"summary"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	AccessToken  string            `json:"access_token"`
	ExpiresIn    uint64            `json:"expires_in"`
	IdToken      string            `json:"id_token"`
	RefreshToken string            `json:"refresh_token"`
	TokenType    typedef.TokenType `json:"token_type"`
}

// User defines model for User.
type User struct {
	Id   typedef.UserID `json:"id" validate:"required"`
	Name string         `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientId defines model for ClientId.
type ClientId = string

// Code defines model for Code.
type Code = string

// Display defines model for Display.
type Display = string

// GrantType defines model for GrantType.
type GrantType = string

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectUri defines model for RedirectUri.
type RedirectUri = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError represents error response
type InternalServerError = ErrorResponse

// InvalidRequest represents error response
type InvalidRequest = ErrorResponse

// UnauthorizedRequest represents error response
type UnauthorizedRequest = ErrorResponse

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientId represents "client_id" parameter
	ClientId ClientId `form:"client_id" json:"client_id" schema:"client_id" validate:"required,alphanum"`

	// Nonce represents "nonce" parameter
	Nonce Nonce `form:"nonce" json:"nonce" schema:"nonce" validate:"required,ascii"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectUri RedirectUri `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" validate:"required,printascii"`

	// ResponseType represents "response_type" parameter
	ResponseType ResponseType `form:"response_type" json:"response_type" schema:"response_type" validate:"required,response-type-validator"`

	// Scope represents "scope" parameter
	Scope Scope `form:"scope" json:"scope" schema:"scope" validate:"required,scope-validator"`

	// State represents "state" parameter
	State State `form:"state" json:"state" schema:"state" validate:"required,alphanum"`

	// Display represents "display" parameter
	Display Display `form:"display" json:"display" schema:"display" validate:"required"`

	// MaxAge represents "max_age" parameter
	MaxAge MaxAge `form:"max_age" json:"max_age" schema:"max_age" validate:"required"`

	// Prompt represents "prompt" parameter
	Prompt Prompt `form:"prompt" json:"prompt" schema:"prompt" validate:"required"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// TokenFormdataBody defines parameters for Token.
type TokenFormdataBody struct {
	Code         *string `form:"code" json:"code"`
	GrantType    string  `form:"grant_type" json:"grant_type"`
	RedirectUri  *string `form:"redirect_uri" json:"redirect_uri"`
	RefreshToken *string `form:"refresh_token" json:"refresh_token"`
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody TokenFormdataBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

//  INTERFACE
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authenticate
	Authenticate(w http.ResponseWriter, r *http.Request)

	// GET: /authorize
	Authorize(w http.ResponseWriter, r *http.Request)

	// POST: /consent
	Consent(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /token
	Token(w http.ResponseWriter, r *http.Request)

	// POST: /user/register
	Register(w http.ResponseWriter, r *http.Request)
}

//  MIDDLEWARE
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetTokenMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Token", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

//  HANDLER AND OTHERS
// --------------------------------------------------

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(si HandlerInterface, options *ChiServerOptions) *chi.Mux {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authenticate", si.Authenticate)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/authorize", si.Authorize)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/consent", si.Consent)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", si.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Token"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/token", si.Token)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/register", si.Register)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
