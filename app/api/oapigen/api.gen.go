// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/42milez/go-oidc-server/app/pkg/xerr"
	"github.com/42milez/go-oidc-server/app/typedef"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// ErrorResponse represents error response
type ErrorResponse struct {
	Details *[]string      `json:"details,omitempty"`
	Status  uint64         `json:"status"`
	Summary xerr.PublicErr `json:"summary"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	AccessToken  string            `json:"access_token"`
	ExpiresIn    uint64            `json:"expires_in"`
	IdToken      string            `json:"id_token"`
	RefreshToken string            `json:"refresh_token"`
	TokenType    typedef.TokenType `json:"token_type"`
}

// User defines model for User.
type User struct {
	Id   typedef.UserID `json:"id" validate:"required"`
	Name string         `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientId defines model for ClientId.
type ClientId = string

// Code defines model for Code.
type Code = string

// Display defines model for Display.
type Display = string

// GrantType defines model for GrantType.
type GrantType = string

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectUri defines model for RedirectUri.
type RedirectUri = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError represents error response
type InternalServerError = ErrorResponse

// InvalidRequest represents error response
type InvalidRequest = ErrorResponse

// UnauthorizedRequest represents error response
type UnauthorizedRequest = ErrorResponse

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientId represents "client_id" parameter
	ClientId ClientId `form:"client_id" json:"client_id" schema:"client_id" url:"client_id" validate:"required,alphanum"`

	// Nonce represents "nonce" parameter
	Nonce Nonce `form:"nonce" json:"nonce" schema:"nonce" url:"nonce" validate:"required,ascii"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectUri RedirectUri `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" url:"redirect_uri" validate:"required,printascii"`

	// ResponseType represents "response_type" parameter
	ResponseType ResponseType `form:"response_type" json:"response_type" schema:"response_type" url:"response_type" validate:"required,response-type-validator"`

	// Scope represents "scope" parameter
	Scope Scope `form:"scope" json:"scope" schema:"scope" url:"scope" validate:"required,scope-validator"`

	// State represents "state" parameter
	State State `form:"state" json:"state" schema:"state" url:"state" validate:"required,alphanum"`

	// Display represents "display" parameter
	Display Display `form:"display" json:"display" schema:"display" url:"display" validate:"required"`

	// MaxAge represents "max_age" parameter
	MaxAge MaxAge `form:"max_age" json:"max_age" schema:"max_age" url:"max_age" validate:"required"`

	// Prompt represents "prompt" parameter
	Prompt Prompt `form:"prompt" json:"prompt" schema:"prompt" url:"prompt" validate:"required"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// TokenFormdataBody defines parameters for Token.
type TokenFormdataBody struct {
	Code         *string `form:"code" json:"code"`
	GrantType    string  `form:"grant_type" json:"grant_type"`
	RedirectUri  *string `form:"redirect_uri" json:"redirect_uri"`
	RefreshToken *string `form:"refresh_token" json:"refresh_token"`
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-" url:"sid"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody TokenFormdataBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

//  INTERFACE
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authenticate
	Authenticate(w http.ResponseWriter, r *http.Request)

	// GET: /authorize
	Authorize(w http.ResponseWriter, r *http.Request)

	// POST: /consent
	Consent(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /token
	Token(w http.ResponseWriter, r *http.Request)

	// POST: /user/register
	Register(w http.ResponseWriter, r *http.Request)
}

//  MIDDLEWARE
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetTokenMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Token", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

//  HANDLER AND OTHERS
// --------------------------------------------------

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(si HandlerInterface, options *ChiServerOptions) *chi.Mux {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authenticate", si.Authenticate)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/authorize", si.Authorize)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/consent", si.Consent)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", si.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Token"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/token", si.Token)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/register", si.Register)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"h2StmXidimvivSKn1/vXfwcAAP//76HO9n8wAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
