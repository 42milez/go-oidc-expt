// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/42milez/go-oidc-server/app/pkg/xerr"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// ErrorResponse represents error response
type ErrorResponse struct {
	Details *[]string      `json:"details,omitempty"`
	Status  uint64         `json:"status"`
	Summary xerr.PublicErr `json:"summary"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// User defines model for User.
type User struct {
	Id   uint64 `json:"id" validate:"required"`
	Name string `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientId defines model for ClientId.
type ClientId = string

// Code defines model for Code.
type Code = string

// Display defines model for Display.
type Display = string

// GrantType defines model for GrantType.
type GrantType = string

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectUri defines model for RedirectUri.
type RedirectUri = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError represents error response
type InternalServerError = ErrorResponse

// InvalidRequest represents error response
type InvalidRequest = ErrorResponse

// UnauthorizedRequest represents error response
type UnauthorizedRequest = ErrorResponse

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientId represents "client_id" parameter
	ClientId ClientId `form:"client_id" json:"client_id" schema:"client_id" validate:"required,alphanum"`

	// Nonce represents "nonce" parameter
	Nonce Nonce `form:"nonce" json:"nonce" schema:"nonce" validate:"required,ascii"`

	// RedirectUri represents "redirect_uri" parameter
	RedirectUri RedirectUri `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" validate:"required,printascii"`

	// ResponseType represents "response_type" parameter
	ResponseType ResponseType `form:"response_type" json:"response_type" schema:"response_type" validate:"required,response-type-validator"`

	// Scope represents "scope" parameter
	Scope Scope `form:"scope" json:"scope" schema:"scope" validate:"required,scope-validator"`

	// State represents "state" parameter
	State State `form:"state" json:"state" schema:"state" validate:"required,alphanum"`

	// Display represents "display" parameter
	Display Display `form:"display" json:"display" schema:"display" validate:"required"`

	// MaxAge represents "max_age" parameter
	MaxAge MaxAge `form:"max_age" json:"max_age" schema:"max_age" validate:"required"`

	// Prompt represents "prompt" parameter
	Prompt Prompt `form:"prompt" json:"prompt" schema:"prompt" validate:"required"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// TokenFormdataBody defines parameters for Token.
type TokenFormdataBody = struct {
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody = TokenFormdataBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

//  INTERFACE
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authenticate
	Authenticate(w http.ResponseWriter, r *http.Request)

	// GET: /authorize
	Authorize(w http.ResponseWriter, r *http.Request)

	// POST: /consent
	Consent(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /token
	Token(w http.ResponseWriter, r *http.Request)

	// POST: /user/register
	Register(w http.ResponseWriter, r *http.Request)
}

//  MIDDLEWARE
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetTokenMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Token", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

//  HANDLER AND OTHERS
// --------------------------------------------------

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(si HandlerInterface, options *ChiServerOptions) *chi.Mux {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authenticate", si.Authenticate)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/authorize", si.Authorize)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/consent", si.Consent)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", si.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Token"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/token", si.Token)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/user/register", si.Register)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
