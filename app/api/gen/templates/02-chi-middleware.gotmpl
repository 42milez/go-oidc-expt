//  Middleware
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
    Handler          HandlerInterface
    ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
    return &MiddlewareFuncMap{
        m: make(map[string][]MiddlewareFunc),
    }
}

type MiddlewareFuncMap struct {
    m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
    ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
    v, ok := mfm.m[key]
    if !ok {
        return nil
    }
    for i, f := range v {
        ret[i] = f
    }
    return ret
}

{{range .}}
func (mfm *MiddlewareFuncMap) Set{{.OperationId}}MW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
    mfm.append("{{.OperationId}}", mf...)
    return mfm
}
{{end}}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
    for _, v := range mf {
        mfm.m[key] = append(mfm.m[key], v)
    }
}

type UnescapedCookieParamError struct {
    ParamName string
    Err error
}

func (e *UnescapedCookieParamError) Error() string {
    return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
    return e.Err
}

type UnmarshalingParamError struct {
    ParamName string
    Err error
}

func (e *UnmarshalingParamError) Error() string {
    return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
    return e.Err
}

type RequiredParamError struct {
    ParamName string
}

func (e *RequiredParamError) Error() string {
    return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
    ParamName string
    Err error
}

func (e *RequiredHeaderError) Error() string {
    return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
    return e.Err
}

type InvalidParamFormatError struct {
    ParamName string
    Err error
}

func (e *InvalidParamFormatError) Error() string {
    return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
    return e.Err
}

type TooManyValuesForParamError struct {
    ParamName string
    Count int
}

func (e *TooManyValuesForParamError) Error() string {
    return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

{{ range . }}
func (hiw *HandlerInterfaceWrapper) {{ .OperationId }}RequestParser(w http.ResponseWriter, r *http.Request) {
    {{- if or .SecurityDefinitions .QueryParams }}
    var ctx context.Context
    {{- end }}
    {{- if or .RequiresParamObject (gt (len .PathParams) 0) }}
    var err error
    {{ end }}

    {{ if .PathParams }}
    // ==================================================
    //  Path Parameter: BEGIN

    {{ range .PathParams }}
    var {{ $varName := .GoVariableName }}{{ $varName }} {{ .TypeDef }}
    {{ if .IsPassThrough }}
    {{ $varName }} = chi.URLParam(r, "{{ .ParamName }}")
    {{ end }}
    {{ if .IsJson }}
    err = json.Unmarshal([]byte(chi.URLParam(r, "{{ .ParamName }}")), &{{ $varName }})
    if err != nil {
        hiw.ErrorHandlerFunc(w, r, &UnmarshalingParamError{ParamName: "{{ .ParamName }}", Err: err})
        return
    }
    {{ end }}
    {{ if .IsStyled }}
    err = runtime.BindStyledParameterWithLocation("{{ .Style }}",{{ .Explode }}, "{{ .ParamName }}", runtime.ParamLocationPath, chi.URLParam(r, "{{ .ParamName }}"), &{{ $varName }})
    if err != nil {
        hiw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "{{ .ParamName }}", Err: err})
        return
    }
    {{ end }}
    {{ end }}

    //  Path Parameter: END
    // ==================================================
    {{ end }}

    {{ if .SecurityDefinitions }}
    // ==================================================
    //  Security Definition: BEGIN

    if ctx == nil {
        ctx = r.Context()
    }

    {{ range .SecurityDefinitions }}
    ctx = context.WithValue(ctx, {{ .ProviderName | sanitizeGoIdentity | ucFirst }}Scopes, {{ toStringArray .Scopes }})
    {{ end }}

    //  Security Definition: END
    // ==================================================
    {{ end }}

    {{ if .RequiresParamObject }}
    // ==================================================
    // Unmarshal Parameter: BEGIN

    var params {{ .OperationId }}Params

    {{ if .QueryParams }}
    // --------------------------------------------------
    //  Query Parameter: BEGIN

    if ctx == nil {
        ctx = r.Context()
    }

    {{ range $paramIdx, $param := .QueryParams }}
    {{ if (or (or .Required .IsPassThrough) (or .IsJson .IsStyled)) }}
    // {{ if .Required }}Required{{ else }}Optional{{ end }} query parameter "{{ .ParamName }}"
    {{- end -}}
    {{ if .IsStyled }}
    err = runtime.BindQueryParameter("{{ .Style }}", {{ .Explode }}, {{ .Required }}, "{{ .ParamName }}", r.URL.Query(), &params.{{ .GoName }})
    if err != nil {
        hiw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "{{ .ParamName }}", Err: err})
        return
    }
    {{ else }}
    if paramValue := r.URL.Query().Get("{{ .ParamName }}"); paramValue != "" {
    {{ if .IsPassThrough }}
        params.{{ .GoName }} = {{ if not .Required }}&{{ end }}paramValue
    {{ end }}
    {{ if .IsJson }}
        var value {{ .TypeDef }}
        err = json.Unmarshal([]byte(paramValue), &value)
        if err != nil {
            hiw.ErrorHandlerFunc(w, r, &UnmarshalingParamError{ParamName: "{{ .ParamName }}", Err: err})
            return
        }
        params.{{ .GoName }} = {{ if not .Required }}&{{ end }}value
    {{ end }}
    } {{ if .Required }} else {
        hiw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "{{ .ParamName }}"})
        return
    } {{ end }}
    {{ end }}
    {{ end }}

    //  Query Parameter: END
    // --------------------------------------------------
    {{ end }}

    {{ if .HeaderParams }}
    // --------------------------------------------------
    //  Header Parameter: BEGIN
    headers := r.Header

    {{ range .HeaderParams }}
    // {{ if .Required }}Required{{ else }}Optional{{ end }} header parameter "{{ .ParamName }}"
    if valueList, found := headers[http.CanonicalHeaderKey("{{ .ParamName }}")]; found {
        var {{ .GoName }} {{ .TypeDef }}
        n := len(valueList)
        if n != 1 {
            hiw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "{{ .ParamName }}", Count: n})
            return
        }
    {{ if .IsPassThrough }}
        params.{{ .GoName }} = {{ if not .Required }}&{{ end }}valueList[0]
    {{ end }}
    {{ if .IsJson }}
        err = json.Unmarshal([]byte(valueList[0]), &{{ .GoName }})
        if err != nil {
            hiw.ErrorHandlerFunc(w, r, &UnmarshalingParamError{ParamName: "{{ .ParamName }}", Err: err})
            return
        }
    {{ end }}
    {{ if .IsStyled }}
        err = runtime.BindStyledParameterWithLocation("{{ .Style }}", {{ .Explode}}, "{{ .ParamName }}", runtime.ParamLocationHeader, valueList[0], &{{ .GoName }})
        if err != nil {
            hiw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "{{ .ParamName }}", Err: err})
            return
        }
    {{ end }}
        params.{{ .GoName }} = {{ if not .Required }}&{{ end }}{{ .GoName }}
    } {{ if .Required }} else {
        err := fmt.Errorf("Header parameter {{ .ParamName }} is required, but not found")
        hiw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "{{ .ParamName }}", Err: err})
        return
    } {{ end }}
    {{ end }}

    //  Header Parameter: END
    // --------------------------------------------------
    {{ end }}

    {{ if .CookieParams }}
    // --------------------------------------------------
    // Cookie Parameter: BEGIN

    {{ range .CookieParams }}
    var cookie *http.Cookie

    if cookie, err = r.Cookie("{{ .ParamName }}"); err == nil {
    {{- if .IsPassThrough -}}
        params.{{ .GoName }} = {{ if not .Required }}&{{ end }}cookie.Value
    {{- end -}}
    {{- if .IsJson -}}
        var value {{ .TypeDef }}
        var decoded string
        decoded, err := url.QueryUnescape(cookie.Value)
        if err != nil {
            err = fmt.Errorf("Error unescaping cookie parameter '{{ .ParamName }}'")
            hiw.ErrorHandlerFunc(w, r, &UnescapedCookieParamError{ParamName: "{{ .ParamName }}", Err: err})
            return
        }
        err = json.Unmarshal([]byte(decoded), &value)
        if err != nil {
          hiw.ErrorHandlerFunc(w, r, &UnmarshalingParamError{ParamName: "{{ .ParamName }}", Err: err})
          return
        }
        params.{{ .GoName }} = {{ if not .Required }}&{{ end }}value
    {{- end -}}
    {{- if .IsStyled -}}
        var value {{ .TypeDef }}
        err = runtime.BindStyledParameter("simple", {{ .Explode }}, "{{ .ParamName}}", cookie.Value, &value)
        if err != nil {
            hiw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "{{ .ParamName }}", Err: err})
            return
        }
        params.{{ .GoName }} = {{ if not .Required }}&{{ end }}value
    {{- end -}}
    } {{ if .Required }} else {
        hiw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "{{ .ParamName }}"})
        return
    }
    {{ end }}
    {{ end }}

    // Cookie Parameter: END
    // --------------------------------------------------
    {{ end }}

    // Unmarshal Parameter: END
    // ==================================================
    {{ end -}}
}
{{end}}
