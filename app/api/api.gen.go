// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ErrorResponse represents error
type ErrorResponse struct {
	Detail string `json:"detail"`
	Status uint64 `json:"status"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// User defines model for User.
type User struct {
	Id   uint64 `json:"id" validate:"required"`
	Name string `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientId defines model for ClientId.
type ClientId = string

// Display defines model for Display.
type Display = string

// IdTokenHint defines model for IdTokenHint.
type IdTokenHint = string

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectUri defines model for RedirectUri.
type RedirectUri = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError represents error
type InternalServerError = ErrorResponse

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"sid,omitempty"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientId client_id ( https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest )
	ClientId ClientId `form:"client_id" json:"client_id" validate:"required"`

	// Nonce nonce ( https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest )
	Nonce Nonce `form:"nonce" json:"nonce" validate:"required"`

	// RedirectUri redirect_uri ( https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest )
	RedirectUri RedirectUri `form:"redirect_uri" json:"redirect_uri" validate:"required"`

	// ResponseType response_type ( https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest )
	ResponseType ResponseType `form:"response_type" json:"response_type" validate:"required"`

	// Scope scope ( https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest )
	Scope Scope `form:"scope" json:"scope" validate:"required"`

	// State state ( https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest )
	State State `form:"state" json:"state" validate:"required"`

	// Display display ( https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest )
	Display *Display `form:"display,omitempty" json:"display,omitempty"`

	// IdTokenHint id_token_hint ( https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest )
	IdTokenHint *IdTokenHint `form:"id_token_hint,omitempty" json:"id_token_hint,omitempty"`

	// MaxAge max_age ( https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest )
	MaxAge *MaxAge `form:"max_age,omitempty" json:"max_age,omitempty"`

	// Prompt prompt ( https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest )
	Prompt *Prompt `form:"prompt,omitempty" json:"prompt,omitempty"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"sid,omitempty"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"sid,omitempty"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

// --------------------------------------------------
//  Interface
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authenticate
	Authenticate(w http.ResponseWriter, r *http.Request)

	// GET: /authorize
	Authorize(w http.ResponseWriter, r *http.Request)

	// POST: /consent
	Consent(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /register
	Register(w http.ResponseWriter, r *http.Request)
}

// --------------------------------------------------
//  Middleware
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(si HandlerInterface, options *ChiServerOptions) *chi.Mux {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authenticate", si.Authenticate)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/authorize", si.Authorize)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/consent", si.Consent)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", si.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/register", si.Register)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
