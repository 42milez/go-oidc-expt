// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ErrorResponse represents error
type ErrorResponse struct {
	Detail string `json:"detail"`
	Status uint64 `json:"status"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// User defines model for User.
type User struct {
	Id   uint64 `json:"id" validate:"required"`
	Name string `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *string `form:"sid,omitempty" json:"sid,omitempty"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

// --------------------------------------------------
//  Interface
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authenticate
	Authenticate(w http.ResponseWriter, r *http.Request, params *AuthenticateParams)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /register
	Register(w http.ResponseWriter, r *http.Request)
}

// --------------------------------------------------
//  Middleware
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf []MiddlewareFunc) {
	mfm.m["Authenticate"] = mf
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf []MiddlewareFunc) {
	mfm.m["CheckHealth"] = mf
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf []MiddlewareFunc) {
	mfm.m["Register"] = mf
}

// Authenticate operation middleware
func (siw *HandlerInterfaceWrapper) Authenticate() http.HandlerFunc {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// Parameter object where we will unmarshal all parameters from the context
		params := &AuthenticateParams{}

		// var cookie *http.Cookie
		// if cookie, err = r.Cookie("sid"); err == nil {
		//
		//
		//
		//     var value string
		//     if runtime.BindStyledParameter("simple",true, "sid", cookie.Value, &value); err != nil {
		//         siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sid", Err: err})
		//         return
		//     }
		//     params.Sid = &value
		//
		// }

		siw.Handler.Authenticate(w, r.WithContext(ctx), params)
	})
}

// CheckHealth operation middleware
func (siw *HandlerInterfaceWrapper) CheckHealth() http.HandlerFunc {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		siw.Handler.CheckHealth(w, r.WithContext(ctx))
	})
}

// Register operation middleware
func (siw *HandlerInterfaceWrapper) Register() http.HandlerFunc {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		siw.Handler.Register(w, r.WithContext(ctx))
	})
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(si HandlerInterface, options *ChiServerOptions) *chi.Mux {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := HandlerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authenticate", wrapper.Authenticate())
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", wrapper.CheckHealth())
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/register", wrapper.Register())
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RX0XPauBP+Vzz6/R4NNim5af10SQglvRJSSJMrHR6EvGAFW1IlmZAw/O83kg3YhiTc",
	"tZe5vGQ0zmr3291P3y5LRHgiOAOmFQqWSJEIEmyP51Jy2QclOFNgPoSgiKRCU85QgCQICcrcc8BYIhcJ",
	"yQVITUFl5hrT2JxggRMRAwoQcpF+EOaktKRsilYuUhrrVJXsfBdNuEywRgFKKdO/NbcXKdMwBYlWKxdJ",
	"+JFSCSEKvq/duOu4o80NPr4Dok2oDuBYR8/moiNwMlcOnzgK5JwSqO8ktwf0kf8TsPeh/apAmgg4jnsT",
	"FHxfVjDQ0Px9MaKLFjWOBa0RHsIUWA0WWuKaxlPrZY5jGmINtgw5rlUVJQ33IVyi/0uYoAD9z9uyyMsp",
	"5Bn4lzgBtBq5T9c7VSCdEGtcX6ds7zzXIuwILLVpT+FytUEs97LlnjE2X/0dEv6KCtl4T3XxCit1z2X4",
	"IvNEbrhObictUfD0WqltYu6mZ0wpm3Dji3CmMdEWWWJfPlKpEFzq33OkdcIT5OatQSdXF84gM0AuSqW5",
	"EGktVOB5hQte7sQzxSwX74Q5sBAgaQJM49ih5o49GwNTw54AdtFyzjhjQLRzT3XkfOTIRTElkMtaDqd7",
	"cb2BcX3aMtE0yET1JoNMBHJ4FXTWxjN1p9r2YsprnIakZqTDNnAOUmV4G3W/7hvHXADDgqIAvas36qZr",
	"AuvIdsTDqY6AaUpsW5ZIcKV3eXNSsDIvwjDAPALDFZv9RVixskEkTkCDVFZNyh4HoAxM56KF3AK1utff",
	"ji9bJ83LR9LsssXl5d3pea/z9f7666L7+TrqjTunf+C7k6PxbDHrt4efhmeN2ZD1e+SocTu8G7bH7XON",
	"b0SCO+3mt9nNvD87TvHsw+23Waj7N9138CfRg0bc/OK3OxCHeHzU/TDptPBw+LH9+LExHnwKW/1oenuV",
	"dM++XKVp+3baiN7dDM4bt4+9z+9/IENAFCDC+YzCll2KhsjNx5kpX2XsGE0yHAelT3n4sOYvMFtrLERs",
	"ikY58+6UKc+y4Gqrx4fJ3wE6uRGI1ci+qXJrjIWjuYPL7dy+US1TsI82G9aWSEe+/7eyegki2gNskBIC",
	"Sk3SOH4ooQutmjcPgrDh2nZlQJRZZXLyFqHtltD0/ZV7IOzyBrMHf+F9GOpPMI0hdMIUTLUrGPKMGj+Z",
	"0VqqHS43al9Kr/HK6e0DZHM9/sfdS5mRZaIhzFZDhxOSSsPUbaLHr9bHKpq63cGyCfi9chWNzP+8aLMn",
	"TmGP+J5FQGZ2XmeGlU2xrMHWOF88/8UnmkfYU5wcmbOBhePD2/urgjOuywAKLchu2zrl9ZcwpUpn2+/+",
	"+XcmIZ98DO6zPZAy2xKzDo6x2tOJ/trrG5T+dUUczjQv5fnfGwRrrG9lCmS8kIfOgDeki89k9rwqFi+i",
	"jJfZPrtvc2zBHGIuzOLtnLM5lZyZc2mpDzwv5gTHEVc6eO+/9+3bqJBI4yll0yd9mB8GKrOp01DUi78q",
	"dr1dSR6mxGb+nMMdR6NNFTY/DYoCZQLln0tFKnyvjJTVaPVXAAAA//9Ifti8ZhEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
