// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/42milez/go-oidc-server/app/pkg/xerr"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ErrorResponse represents error
type ErrorResponse struct {
	Details []string       `json:"details"`
	Status  uint64         `json:"status"`
	Summary xerr.PublicErr `json:"summary,omitempty"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// User defines model for User.
type User struct {
	Id   uint64 `json:"id" validate:"required"`
	Name string `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// ClientId defines model for ClientId.
type ClientId = string

// Display defines model for Display.
type Display = string

// IdTokenHint defines model for IdTokenHint.
type IdTokenHint = string

// MaxAge defines model for MaxAge.
type MaxAge = uint64

// Nonce defines model for Nonce.
type Nonce = string

// Prompt defines model for Prompt.
type Prompt = string

// RedirectUri defines model for RedirectUri.
type RedirectUri = string

// ResponseType defines model for ResponseType.
type ResponseType = string

// Scope defines model for Scope.
type Scope = string

// SessionId defines model for SessionId.
type SessionId = string

// State defines model for State.
type State = string

// InternalServerError represents error
type InternalServerError = ErrorResponse

// AuthenticateJSONBody defines parameters for Authenticate.
type AuthenticateJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// ClientId represents "client_id" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
	ClientId ClientId `form:"client_id" json:"client_id" schema:"client_id" validate:"required,alphanum"`

	// Nonce represents "nonce" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
	Nonce Nonce `form:"nonce" json:"nonce" schema:"nonce" validate:"required,ascii"`

	// RedirectUri represents "redirect_uri" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
	RedirectUri RedirectUri `form:"redirect_uri" json:"redirect_uri" schema:"redirect_uri" validate:"required,printascii"`

	// ResponseType represents "response_type" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
	ResponseType ResponseType `form:"response_type" json:"response_type" schema:"response_type" validate:"required,response-type-validator"`

	// Scope represents "scope" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
	Scope Scope `form:"scope" json:"scope" schema:"scope" validate:"required,scope-validator"`

	// State represents "state" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
	State State `form:"state" json:"state" schema:"state" validate:"required,alphanum"`

	// Display represents "display" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
	Display Display `form:"display" json:"display" schema:"display" validate:"required"`

	// IdTokenHint represents "id_token_hint" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
	IdTokenHint IdTokenHint `form:"id_token_hint" json:"id_token_hint" schema:"id_token_hint" validate:"required,alpha"`

	// MaxAge represents "max_age" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
	MaxAge MaxAge `form:"max_age" json:"max_age" schema:"max_age" validate:"required"`

	// Prompt represents "prompt" parameter described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
	Prompt Prompt `form:"prompt" json:"prompt" schema:"prompt" validate:"required"`

	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// ConsentParams defines parameters for Consent.
type ConsentParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// TokenFormdataBody defines parameters for Token.
type TokenFormdataBody = struct {
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Sid Session ID
	Sid *SessionId `form:"sid,omitempty" json:"-"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticateJSONBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody = TokenFormdataBody

// --------------------------------------------------
//  Interface
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authenticate
	Authenticate(w http.ResponseWriter, r *http.Request)

	// GET: /authorize
	Authorize(w http.ResponseWriter, r *http.Request)

	// POST: /consent
	Consent(w http.ResponseWriter, r *http.Request)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /register
	Register(w http.ResponseWriter, r *http.Request)

	// POST: /token
	Token(w http.ResponseWriter, r *http.Request)
}

// --------------------------------------------------
//  Middleware
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authenticate", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetAuthorizeMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Authorize", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetConsentMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Consent", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("CheckHealth", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetRegisterMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Register", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) SetTokenMW(mf ...MiddlewareFunc) *MiddlewareFuncMap {
	mfm.append("Token", mf...)
	return mfm
}

func (mfm *MiddlewareFuncMap) append(key string, mf ...MiddlewareFunc) {
	for _, v := range mf {
		mfm.m[key] = append(mfm.m[key], v)
	}
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(si HandlerInterface, options *ChiServerOptions) *chi.Mux {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authenticate"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authenticate", si.Authenticate)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Authorize"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/authorize", si.Authorize)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Consent"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/consent", si.Consent)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", si.CheckHealth)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Register"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/register", si.Register)
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("Token"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/token", si.Token)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/3DZVPrYJwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
