// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse represents error
type ErrorResponse struct {
	Detail string `json:"detail"`
	Status uint64 `json:"status"`
}

// Health represents the status of service.
type Health struct {
	Status uint64 `json:"status"`
}

// User defines model for User.
type User struct {
	Id   uint64 `json:"id"`
	Name string `json:"name" validate:"required"`
}

// UserName represents a part of user data.
type UserName struct {
	Name string `json:"name" validate:"required"`
}

// UserPassword represents the password of user
type UserPassword struct {
	Password string `json:"password" validate:"required"`
}

// AuthenticateUserJSONBody defines parameters for AuthenticateUser.
type AuthenticateUserJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateUserParams defines parameters for AuthenticateUser.
type AuthenticateUserParams struct {
	// Sid Session ID
	Sid *string `form:"sid,omitempty" json:"sid,omitempty"`
}

// RegisterUserJSONBody defines parameters for RegisterUser.
type RegisterUserJSONBody struct {
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// AuthenticateUserJSONRequestBody defines body for AuthenticateUser for application/json ContentType.
type AuthenticateUserJSONRequestBody AuthenticateUserJSONBody

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody RegisterUserJSONBody

// --------------------------------------------------
//  Interface
// --------------------------------------------------

// HandlerInterface represents all server handlers.
type HandlerInterface interface {

	// POST: /authenticate
	AuthenticateUser(w http.ResponseWriter, r *http.Request, params *AuthenticateUserParams)

	// GET: /health
	CheckHealth(w http.ResponseWriter, r *http.Request)

	// POST: /register
	RegisterUser(w http.ResponseWriter, r *http.Request)
}

// --------------------------------------------------
//  Middleware
// --------------------------------------------------

// HandlerInterfaceWrapper converts contexts to parameters.
type HandlerInterfaceWrapper struct {
	Handler          HandlerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

func NewMiddlewareFuncMap() *MiddlewareFuncMap {
	return &MiddlewareFuncMap{
		m: make(map[string][]MiddlewareFunc),
	}
}

type MiddlewareFuncMap struct {
	m map[string][]MiddlewareFunc
}

func (mfm *MiddlewareFuncMap) raw(key string) []func(http.Handler) http.Handler {
	ret := make([]func(http.Handler) http.Handler, len(mfm.m[key]), len(mfm.m[key]))
	v, ok := mfm.m[key]
	if !ok {
		return nil
	}
	for i, f := range v {
		ret[i] = f
	}
	return ret
}

func (mfm *MiddlewareFuncMap) SetAuthenticateUserMW(mf []MiddlewareFunc) {
	mfm.m["AuthenticateUser"] = mf
}

func (mfm *MiddlewareFuncMap) SetCheckHealthMW(mf []MiddlewareFunc) {
	mfm.m["CheckHealth"] = mf
}

func (mfm *MiddlewareFuncMap) SetRegisterUserMW(mf []MiddlewareFunc) {
	mfm.m["RegisterUser"] = mf
}

// AuthenticateUser operation middleware
func (siw *HandlerInterfaceWrapper) AuthenticateUser() http.HandlerFunc {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// Parameter object where we will unmarshal all parameters from the context
		params := &AuthenticateUserParams{}

		var cookie *http.Cookie
		if cookie, err = r.Cookie("sid"); err == nil {

			var value string
			if runtime.BindStyledParameter("simple", true, "sid", cookie.Value, &value); err != nil {
				siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sid", Err: err})
				return
			}
			params.Sid = &value

		}

		siw.Handler.AuthenticateUser(w, r.WithContext(ctx), params)
	})
}

// CheckHealth operation middleware
func (siw *HandlerInterfaceWrapper) CheckHealth() http.HandlerFunc {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		siw.Handler.CheckHealth(w, r.WithContext(ctx))
	})
}

// RegisterUser operation middleware
func (siw *HandlerInterfaceWrapper) RegisterUser() http.HandlerFunc {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		siw.Handler.RegisterUser(w, r.WithContext(ctx))
	})
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

type ChiServerOptions struct {
	BaseRouter       *chi.Mux
	Middlewares      *MiddlewareFuncMap
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// MuxWithOptions creates http.Handler with additional options
func MuxWithOptions(si HandlerInterface, options *ChiServerOptions) *chi.Mux {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := HandlerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("AuthenticateUser"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/authenticate", wrapper.AuthenticateUser())
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("CheckHealth"); mw != nil {
			r.Use(mw...)
		}
		r.Get("/health", wrapper.CheckHealth())
	})

	r.Group(func(r chi.Router) {
		if mw := options.Middlewares.raw("RegisterUser"); mw != nil {
			r.Use(mw...)
		}
		r.Post("/register", wrapper.RegisterUser())
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXb3PauBP+Kh79fi8NNim5af3qkhBKeiWkkD9XOrwQ8oIVbEmVZELC8N1vJBuwDUnp",
	"9S5zeZPROKvdZ599tLssEeGJ4AyYVihYIkUiSLA9nkvJZR+U4EyB+RCCIpIKTTlDAZIgJChzzwFjiVwk",
	"JBcgNQWVmWtMY3OCBU5EDChAyEX6UZiT0pKyKVq5SGmsU1Wy81004TLBGgUopUz/1txepEzDFCRarVwk",
	"4XtKJYQo+LZ2467jjjY3+PgeiDahOoBjHb2Yi47AyVw5fOIokHNKoL6T3B7QR/4vwN6H9kaBNBFwHPcm",
	"KPi2rGCgofn70xFpuC/aEv1fwgQF6H/eVhFeLgfPQLnECaDVyH2eu1SBdEKscX0N3955iW7sCCy1obpw",
	"uUo2y71sdWSMzVd/R1AuWtQ4FrRGeAhTYDVYaIlrGk+tqzmOaYg1WBQ5J6sqQzbecxW5wko9cBn+UEUi",
	"N1wnt5OWKHh6rdQ2MXfTM6aUTbjxRTjTmGiLLLGvGKlUCC717znSOuEJcvPSoJOrC2eQGSAXpdJciLQW",
	"KvC8wgUvd+IZMsvknTAHFgIkTYBpHDvU3LFnY2A47AlgFy3njDMGRDsPVEfOR45cFFMCeYvK4XQvrjcw",
	"rk9bJpoGmajeZJA96BxeBZ218QzvVNtaTHmN05DUTBuwBZyDVBneRt2v+8YxF8CwoChA7+qNuqmawDqy",
	"FfFwqiNgmhJbliUSXOld3ZwUrMyLMAowj8BoxWZ/EVasbnI5YYkT0CCV7Q5lrwNQBqpz0UJuQV7d66/H",
	"l62T5uUTaXbZ4vLy/vS817l5uL5ZdD9fR71x5/QPfH9yNJ4tZv328NPwrDEbsn6PHDXuhvfD9rh9rvGt",
	"SHCn3fw6u533Z8cpnn24+zoLdf+2+w7+JHrQiJtf/HYH4hCPj7ofJp0WHg4/tp8+NsaDT2GrH03vrpLu",
	"2ZerNG3fTRvRu9vBeePuqff5/XdkRIgCRDifUdgqTNEQufl4MhRWxojpS0bnoPQpDx/XGgZm+cZCxIY4",
	"ypl3rww9y4KrbX89rAUe0Cs3TWI1su+qXBpj4WjulORRfKdapmAfbjZ8rZiOfP+nsvoRRLQH2CAlBJSa",
	"pHH8WEIX2o7ePAjCRmvbFQBRZruTk5cIbad+0/dX7oGwyxvJHvyFN2KkP8E0htAJUzBsVzDkGTV+MaN1",
	"u3a43HT8UnqNV05vHyCb6/Hfrl7KTGsmGsJs1XM4Iak0St0mevxqdayiqdsNJ5uC3ypX0cj8z4s2e98U",
	"9jTgswjIzM7szLCy+ZX7sDXOF8l/8YnmEfaQkyNzNrBwfHh5/6ngjOsygEIJstuWp5x/CVOqdLbN7p+B",
	"ZxLy6cfgIdsFKbMlMSvhGKs9lejnXvNp+Oba/5oVhzPNS7n+94bBGutbmQSZNuShc+AN9cYXMnu5MxYv",
	"okyX2V67b3tswRxiLswC7pyzOZWcmXNpuQ88L+YExxFXOnjvv/ft26iISOMpZdNnfZgfCCqzqdNQ1Iu/",
	"Lna9XUkepsRm/pLDHUejDQubnwjFJmUC5Z9LJBW+V8bKarT6KwAA//9qO0HOOhEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
