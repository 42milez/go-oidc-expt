// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/42milez/go-oidc-server/app/pkg/ent/ent/predicate"
	"github.com/42milez/go-oidc-server/app/pkg/ent/ent/redirecturi"
)

// RedirectUriUpdate is the builder for updating RedirectUri entities.
type RedirectUriUpdate struct {
	config
	hooks    []Hook
	mutation *RedirectUriMutation
}

// Where appends a list predicates to the RedirectUriUpdate builder.
func (ruu *RedirectUriUpdate) Where(ps ...predicate.RedirectUri) *RedirectUriUpdate {
	ruu.mutation.Where(ps...)
	return ruu
}

// SetURI sets the "uri" field.
func (ruu *RedirectUriUpdate) SetURI(s string) *RedirectUriUpdate {
	ruu.mutation.SetURI(s)
	return ruu
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (ruu *RedirectUriUpdate) SetNillableURI(s *string) *RedirectUriUpdate {
	if s != nil {
		ruu.SetURI(*s)
	}
	return ruu
}

// SetModifiedAt sets the "modified_at" field.
func (ruu *RedirectUriUpdate) SetModifiedAt(t time.Time) *RedirectUriUpdate {
	ruu.mutation.SetModifiedAt(t)
	return ruu
}

// Mutation returns the RedirectUriMutation object of the builder.
func (ruu *RedirectUriUpdate) Mutation() *RedirectUriMutation {
	return ruu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ruu *RedirectUriUpdate) Save(ctx context.Context) (int, error) {
	ruu.defaults()
	return withHooks(ctx, ruu.sqlSave, ruu.mutation, ruu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruu *RedirectUriUpdate) SaveX(ctx context.Context) int {
	affected, err := ruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ruu *RedirectUriUpdate) Exec(ctx context.Context) error {
	_, err := ruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruu *RedirectUriUpdate) ExecX(ctx context.Context) {
	if err := ruu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruu *RedirectUriUpdate) defaults() {
	if _, ok := ruu.mutation.ModifiedAt(); !ok {
		v := redirecturi.UpdateDefaultModifiedAt()
		ruu.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruu *RedirectUriUpdate) check() error {
	if v, ok := ruu.mutation.URI(); ok {
		if err := redirecturi.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`ent: validator failed for field "RedirectUri.uri": %w`, err)}
		}
	}
	if _, ok := ruu.mutation.RelyingPartyID(); ruu.mutation.RelyingPartyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RedirectUri.relying_party"`)
	}
	return nil
}

func (ruu *RedirectUriUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ruu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(redirecturi.Table, redirecturi.Columns, sqlgraph.NewFieldSpec(redirecturi.FieldID, field.TypeUint64))
	if ps := ruu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruu.mutation.URI(); ok {
		_spec.SetField(redirecturi.FieldURI, field.TypeString, value)
	}
	if value, ok := ruu.mutation.ModifiedAt(); ok {
		_spec.SetField(redirecturi.FieldModifiedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{redirecturi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ruu.mutation.done = true
	return n, nil
}

// RedirectUriUpdateOne is the builder for updating a single RedirectUri entity.
type RedirectUriUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RedirectUriMutation
}

// SetURI sets the "uri" field.
func (ruuo *RedirectUriUpdateOne) SetURI(s string) *RedirectUriUpdateOne {
	ruuo.mutation.SetURI(s)
	return ruuo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (ruuo *RedirectUriUpdateOne) SetNillableURI(s *string) *RedirectUriUpdateOne {
	if s != nil {
		ruuo.SetURI(*s)
	}
	return ruuo
}

// SetModifiedAt sets the "modified_at" field.
func (ruuo *RedirectUriUpdateOne) SetModifiedAt(t time.Time) *RedirectUriUpdateOne {
	ruuo.mutation.SetModifiedAt(t)
	return ruuo
}

// Mutation returns the RedirectUriMutation object of the builder.
func (ruuo *RedirectUriUpdateOne) Mutation() *RedirectUriMutation {
	return ruuo.mutation
}

// Where appends a list predicates to the RedirectUriUpdate builder.
func (ruuo *RedirectUriUpdateOne) Where(ps ...predicate.RedirectUri) *RedirectUriUpdateOne {
	ruuo.mutation.Where(ps...)
	return ruuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruuo *RedirectUriUpdateOne) Select(field string, fields ...string) *RedirectUriUpdateOne {
	ruuo.fields = append([]string{field}, fields...)
	return ruuo
}

// Save executes the query and returns the updated RedirectUri entity.
func (ruuo *RedirectUriUpdateOne) Save(ctx context.Context) (*RedirectUri, error) {
	ruuo.defaults()
	return withHooks(ctx, ruuo.sqlSave, ruuo.mutation, ruuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruuo *RedirectUriUpdateOne) SaveX(ctx context.Context) *RedirectUri {
	node, err := ruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruuo *RedirectUriUpdateOne) Exec(ctx context.Context) error {
	_, err := ruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruuo *RedirectUriUpdateOne) ExecX(ctx context.Context) {
	if err := ruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruuo *RedirectUriUpdateOne) defaults() {
	if _, ok := ruuo.mutation.ModifiedAt(); !ok {
		v := redirecturi.UpdateDefaultModifiedAt()
		ruuo.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruuo *RedirectUriUpdateOne) check() error {
	if v, ok := ruuo.mutation.URI(); ok {
		if err := redirecturi.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`ent: validator failed for field "RedirectUri.uri": %w`, err)}
		}
	}
	if _, ok := ruuo.mutation.RelyingPartyID(); ruuo.mutation.RelyingPartyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RedirectUri.relying_party"`)
	}
	return nil
}

func (ruuo *RedirectUriUpdateOne) sqlSave(ctx context.Context) (_node *RedirectUri, err error) {
	if err := ruuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(redirecturi.Table, redirecturi.Columns, sqlgraph.NewFieldSpec(redirecturi.FieldID, field.TypeUint64))
	id, ok := ruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RedirectUri.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, redirecturi.FieldID)
		for _, f := range fields {
			if !redirecturi.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != redirecturi.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruuo.mutation.URI(); ok {
		_spec.SetField(redirecturi.FieldURI, field.TypeString, value)
	}
	if value, ok := ruuo.mutation.ModifiedAt(); ok {
		_spec.SetField(redirecturi.FieldModifiedAt, field.TypeTime, value)
	}
	_node = &RedirectUri{config: ruuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{redirecturi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruuo.mutation.done = true
	return _node, nil
}
