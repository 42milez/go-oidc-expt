// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=interface_mock.go -package=httpstore
//
// Package httpstore is a generated GoMock package.
package httpstore

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockSessionReader is a mock of SessionReader interface.
type MockSessionReader struct {
	ctrl     *gomock.Controller
	recorder *MockSessionReaderMockRecorder
}

// MockSessionReaderMockRecorder is the mock recorder for MockSessionReader.
type MockSessionReaderMockRecorder struct {
	mock *MockSessionReader
}

// NewMockSessionReader creates a new mock instance.
func NewMockSessionReader(ctrl *gomock.Controller) *MockSessionReader {
	mock := &MockSessionReader{ctrl: ctrl}
	mock.recorder = &MockSessionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionReader) EXPECT() *MockSessionReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockSessionReader) Read(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSessionReaderMockRecorder) Read(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSessionReader)(nil).Read), ctx, key)
}

// MockSessionWriter is a mock of SessionWriter interface.
type MockSessionWriter struct {
	ctrl     *gomock.Controller
	recorder *MockSessionWriterMockRecorder
}

// MockSessionWriterMockRecorder is the mock recorder for MockSessionWriter.
type MockSessionWriterMockRecorder struct {
	mock *MockSessionWriter
}

// NewMockSessionWriter creates a new mock instance.
func NewMockSessionWriter(ctrl *gomock.Controller) *MockSessionWriter {
	mock := &MockSessionWriter{ctrl: ctrl}
	mock.recorder = &MockSessionWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionWriter) EXPECT() *MockSessionWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockSessionWriter) Write(ctx context.Context, key string, value any, ttl time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, key, value, ttl)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSessionWriterMockRecorder) Write(ctx, key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSessionWriter)(nil).Write), ctx, key, value, ttl)
}

// MockIdGenerator is a mock of IdGenerator interface.
type MockIdGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIdGeneratorMockRecorder
}

// MockIdGeneratorMockRecorder is the mock recorder for MockIdGenerator.
type MockIdGeneratorMockRecorder struct {
	mock *MockIdGenerator
}

// NewMockIdGenerator creates a new mock instance.
func NewMockIdGenerator(ctrl *gomock.Controller) *MockIdGenerator {
	mock := &MockIdGenerator{ctrl: ctrl}
	mock.recorder = &MockIdGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdGenerator) EXPECT() *MockIdGeneratorMockRecorder {
	return m.recorder
}

// NextID mocks base method.
func (m *MockIdGenerator) NextID() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextID")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextID indicates an expected call of NextID.
func (mr *MockIdGeneratorMockRecorder) NextID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextID", reflect.TypeOf((*MockIdGenerator)(nil).NextID))
}
