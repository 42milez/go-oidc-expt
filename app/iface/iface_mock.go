// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go
//
// Generated by this command:
//
//	mockgen -source=iface.go -destination=iface_mock.go -package=iface
//
// Package iface is a generated GoMock package.
package iface

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	typedef "github.com/42milez/go-oidc-server/app/typedef"
	gomock "go.uber.org/mock/gomock"
)

// MockContextReader is a mock of ContextReader interface.
type MockContextReader struct {
	ctrl     *gomock.Controller
	recorder *MockContextReaderMockRecorder
}

// MockContextReaderMockRecorder is the mock recorder for MockContextReader.
type MockContextReaderMockRecorder struct {
	mock *MockContextReader
}

// NewMockContextReader creates a new mock instance.
func NewMockContextReader(ctrl *gomock.Controller) *MockContextReader {
	mock := &MockContextReader{ctrl: ctrl}
	mock.recorder = &MockContextReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextReader) EXPECT() *MockContextReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockContextReader) Read(ctx context.Context, key any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockContextReaderMockRecorder) Read(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockContextReader)(nil).Read), ctx, key)
}

// MockClocker is a mock of Clocker interface.
type MockClocker struct {
	ctrl     *gomock.Controller
	recorder *MockClockerMockRecorder
}

// MockClockerMockRecorder is the mock recorder for MockClocker.
type MockClockerMockRecorder struct {
	mock *MockClocker
}

// NewMockClocker creates a new mock instance.
func NewMockClocker(ctrl *gomock.Controller) *MockClocker {
	mock := &MockClocker{ctrl: ctrl}
	mock.recorder = &MockClockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClocker) EXPECT() *MockClockerMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockClocker) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockClockerMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClocker)(nil).Now))
}

// MockCookieReader is a mock of CookieReader interface.
type MockCookieReader struct {
	ctrl     *gomock.Controller
	recorder *MockCookieReaderMockRecorder
}

// MockCookieReaderMockRecorder is the mock recorder for MockCookieReader.
type MockCookieReaderMockRecorder struct {
	mock *MockCookieReader
}

// NewMockCookieReader creates a new mock instance.
func NewMockCookieReader(ctrl *gomock.Controller) *MockCookieReader {
	mock := &MockCookieReader{ctrl: ctrl}
	mock.recorder = &MockCookieReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieReader) EXPECT() *MockCookieReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockCookieReader) Read(r *http.Request, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", r, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCookieReaderMockRecorder) Read(r, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCookieReader)(nil).Read), r, name)
}

// MockCookieWriter is a mock of CookieWriter interface.
type MockCookieWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCookieWriterMockRecorder
}

// MockCookieWriterMockRecorder is the mock recorder for MockCookieWriter.
type MockCookieWriterMockRecorder struct {
	mock *MockCookieWriter
}

// NewMockCookieWriter creates a new mock instance.
func NewMockCookieWriter(ctrl *gomock.Controller) *MockCookieWriter {
	mock := &MockCookieWriter{ctrl: ctrl}
	mock.recorder = &MockCookieWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieWriter) EXPECT() *MockCookieWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockCookieWriter) Write(w http.ResponseWriter, name, val string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", w, name, val, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockCookieWriterMockRecorder) Write(w, name, val, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCookieWriter)(nil).Write), w, name, val, ttl)
}

// MockCookieReadWriter is a mock of CookieReadWriter interface.
type MockCookieReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCookieReadWriterMockRecorder
}

// MockCookieReadWriterMockRecorder is the mock recorder for MockCookieReadWriter.
type MockCookieReadWriterMockRecorder struct {
	mock *MockCookieReadWriter
}

// NewMockCookieReadWriter creates a new mock instance.
func NewMockCookieReadWriter(ctrl *gomock.Controller) *MockCookieReadWriter {
	mock := &MockCookieReadWriter{ctrl: ctrl}
	mock.recorder = &MockCookieReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieReadWriter) EXPECT() *MockCookieReadWriterMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockCookieReadWriter) Read(r *http.Request, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", r, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCookieReadWriterMockRecorder) Read(r, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCookieReadWriter)(nil).Read), r, name)
}

// Write mocks base method.
func (m *MockCookieReadWriter) Write(w http.ResponseWriter, name, val string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", w, name, val, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockCookieReadWriterMockRecorder) Write(w, name, val, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCookieReadWriter)(nil).Write), w, name, val, ttl)
}

// MockAccessTokenGenerator is a mock of AccessTokenGenerator interface.
type MockAccessTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokenGeneratorMockRecorder
}

// MockAccessTokenGeneratorMockRecorder is the mock recorder for MockAccessTokenGenerator.
type MockAccessTokenGeneratorMockRecorder struct {
	mock *MockAccessTokenGenerator
}

// NewMockAccessTokenGenerator creates a new mock instance.
func NewMockAccessTokenGenerator(ctrl *gomock.Controller) *MockAccessTokenGenerator {
	mock := &MockAccessTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockAccessTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessTokenGenerator) EXPECT() *MockAccessTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockAccessTokenGenerator) GenerateAccessToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockAccessTokenGeneratorMockRecorder) GenerateAccessToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockAccessTokenGenerator)(nil).GenerateAccessToken))
}

// MockRefreshTokenGenerator is a mock of RefreshTokenGenerator interface.
type MockRefreshTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenGeneratorMockRecorder
}

// MockRefreshTokenGeneratorMockRecorder is the mock recorder for MockRefreshTokenGenerator.
type MockRefreshTokenGeneratorMockRecorder struct {
	mock *MockRefreshTokenGenerator
}

// NewMockRefreshTokenGenerator creates a new mock instance.
func NewMockRefreshTokenGenerator(ctrl *gomock.Controller) *MockRefreshTokenGenerator {
	mock := &MockRefreshTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenGenerator) EXPECT() *MockRefreshTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateRefreshToken mocks base method.
func (m *MockRefreshTokenGenerator) GenerateRefreshToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockRefreshTokenGeneratorMockRecorder) GenerateRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockRefreshTokenGenerator)(nil).GenerateRefreshToken))
}

// MockIdTokenGenerator is a mock of IdTokenGenerator interface.
type MockIdTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIdTokenGeneratorMockRecorder
}

// MockIdTokenGeneratorMockRecorder is the mock recorder for MockIdTokenGenerator.
type MockIdTokenGeneratorMockRecorder struct {
	mock *MockIdTokenGenerator
}

// NewMockIdTokenGenerator creates a new mock instance.
func NewMockIdTokenGenerator(ctrl *gomock.Controller) *MockIdTokenGenerator {
	mock := &MockIdTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockIdTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdTokenGenerator) EXPECT() *MockIdTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateIdToken mocks base method.
func (m *MockIdTokenGenerator) GenerateIdToken(uid typedef.UserID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateIdToken", uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateIdToken indicates an expected call of GenerateIdToken.
func (mr *MockIdTokenGeneratorMockRecorder) GenerateIdToken(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateIdToken", reflect.TypeOf((*MockIdTokenGenerator)(nil).GenerateIdToken), uid)
}

// MockTokenGenerator is a mock of TokenGenerator interface.
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator.
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance.
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockTokenGenerator) GenerateAccessToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockTokenGeneratorMockRecorder) GenerateAccessToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateAccessToken))
}

// GenerateIdToken mocks base method.
func (m *MockTokenGenerator) GenerateIdToken(uid typedef.UserID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateIdToken", uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateIdToken indicates an expected call of GenerateIdToken.
func (mr *MockTokenGeneratorMockRecorder) GenerateIdToken(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateIdToken", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateIdToken), uid)
}

// GenerateRefreshToken mocks base method.
func (m *MockTokenGenerator) GenerateRefreshToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockTokenGeneratorMockRecorder) GenerateRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateRefreshToken))
}

// MockTokenValidator is a mock of TokenValidator interface.
type MockTokenValidator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenValidatorMockRecorder
}

// MockTokenValidatorMockRecorder is the mock recorder for MockTokenValidator.
type MockTokenValidatorMockRecorder struct {
	mock *MockTokenValidator
}

// NewMockTokenValidator creates a new mock instance.
func NewMockTokenValidator(ctrl *gomock.Controller) *MockTokenValidator {
	mock := &MockTokenValidator{ctrl: ctrl}
	mock.recorder = &MockTokenValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenValidator) EXPECT() *MockTokenValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockTokenValidator) Validate(name *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockTokenValidatorMockRecorder) Validate(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTokenValidator)(nil).Validate), name)
}

// MockTokenGenerateValidator is a mock of TokenGenerateValidator interface.
type MockTokenGenerateValidator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGenerateValidatorMockRecorder
}

// MockTokenGenerateValidatorMockRecorder is the mock recorder for MockTokenGenerateValidator.
type MockTokenGenerateValidatorMockRecorder struct {
	mock *MockTokenGenerateValidator
}

// NewMockTokenGenerateValidator creates a new mock instance.
func NewMockTokenGenerateValidator(ctrl *gomock.Controller) *MockTokenGenerateValidator {
	mock := &MockTokenGenerateValidator{ctrl: ctrl}
	mock.recorder = &MockTokenGenerateValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerateValidator) EXPECT() *MockTokenGenerateValidatorMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockTokenGenerateValidator) GenerateAccessToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockTokenGenerateValidatorMockRecorder) GenerateAccessToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockTokenGenerateValidator)(nil).GenerateAccessToken))
}

// GenerateIdToken mocks base method.
func (m *MockTokenGenerateValidator) GenerateIdToken(uid typedef.UserID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateIdToken", uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateIdToken indicates an expected call of GenerateIdToken.
func (mr *MockTokenGenerateValidatorMockRecorder) GenerateIdToken(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateIdToken", reflect.TypeOf((*MockTokenGenerateValidator)(nil).GenerateIdToken), uid)
}

// GenerateRefreshToken mocks base method.
func (m *MockTokenGenerateValidator) GenerateRefreshToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockTokenGenerateValidatorMockRecorder) GenerateRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockTokenGenerateValidator)(nil).GenerateRefreshToken))
}

// Validate mocks base method.
func (m *MockTokenGenerateValidator) Validate(name *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockTokenGenerateValidatorMockRecorder) Validate(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTokenGenerateValidator)(nil).Validate), name)
}

// MockOpenIdParamReader is a mock of OpenIdParamReader interface.
type MockOpenIdParamReader struct {
	ctrl     *gomock.Controller
	recorder *MockOpenIdParamReaderMockRecorder
}

// MockOpenIdParamReaderMockRecorder is the mock recorder for MockOpenIdParamReader.
type MockOpenIdParamReaderMockRecorder struct {
	mock *MockOpenIdParamReader
}

// NewMockOpenIdParamReader creates a new mock instance.
func NewMockOpenIdParamReader(ctrl *gomock.Controller) *MockOpenIdParamReader {
	mock := &MockOpenIdParamReader{ctrl: ctrl}
	mock.recorder = &MockOpenIdParamReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenIdParamReader) EXPECT() *MockOpenIdParamReaderMockRecorder {
	return m.recorder
}

// ReadOpenIdParam mocks base method.
func (m *MockOpenIdParamReader) ReadOpenIdParam(ctx context.Context, clientId, authCode string) (*typedef.OpenIdParam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOpenIdParam", ctx, clientId, authCode)
	ret0, _ := ret[0].(*typedef.OpenIdParam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOpenIdParam indicates an expected call of ReadOpenIdParam.
func (mr *MockOpenIdParamReaderMockRecorder) ReadOpenIdParam(ctx, clientId, authCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOpenIdParam", reflect.TypeOf((*MockOpenIdParamReader)(nil).ReadOpenIdParam), ctx, clientId, authCode)
}

// MockOpenIdParamWriter is a mock of OpenIdParamWriter interface.
type MockOpenIdParamWriter struct {
	ctrl     *gomock.Controller
	recorder *MockOpenIdParamWriterMockRecorder
}

// MockOpenIdParamWriterMockRecorder is the mock recorder for MockOpenIdParamWriter.
type MockOpenIdParamWriterMockRecorder struct {
	mock *MockOpenIdParamWriter
}

// NewMockOpenIdParamWriter creates a new mock instance.
func NewMockOpenIdParamWriter(ctrl *gomock.Controller) *MockOpenIdParamWriter {
	mock := &MockOpenIdParamWriter{ctrl: ctrl}
	mock.recorder = &MockOpenIdParamWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenIdParamWriter) EXPECT() *MockOpenIdParamWriterMockRecorder {
	return m.recorder
}

// WriteOpenIdParam mocks base method.
func (m *MockOpenIdParamWriter) WriteOpenIdParam(ctx context.Context, param *typedef.OpenIdParam, clientId, authCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOpenIdParam", ctx, param, clientId, authCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOpenIdParam indicates an expected call of WriteOpenIdParam.
func (mr *MockOpenIdParamWriterMockRecorder) WriteOpenIdParam(ctx, param, clientId, authCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOpenIdParam", reflect.TypeOf((*MockOpenIdParamWriter)(nil).WriteOpenIdParam), ctx, param, clientId, authCode)
}

// MockRefreshTokenOwnerReader is a mock of RefreshTokenOwnerReader interface.
type MockRefreshTokenOwnerReader struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenOwnerReaderMockRecorder
}

// MockRefreshTokenOwnerReaderMockRecorder is the mock recorder for MockRefreshTokenOwnerReader.
type MockRefreshTokenOwnerReaderMockRecorder struct {
	mock *MockRefreshTokenOwnerReader
}

// NewMockRefreshTokenOwnerReader creates a new mock instance.
func NewMockRefreshTokenOwnerReader(ctrl *gomock.Controller) *MockRefreshTokenOwnerReader {
	mock := &MockRefreshTokenOwnerReader{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenOwnerReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenOwnerReader) EXPECT() *MockRefreshTokenOwnerReaderMockRecorder {
	return m.recorder
}

// ReadRefreshTokenOwner mocks base method.
func (m *MockRefreshTokenOwnerReader) ReadRefreshTokenOwner(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRefreshTokenOwner", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRefreshTokenOwner indicates an expected call of ReadRefreshTokenOwner.
func (mr *MockRefreshTokenOwnerReaderMockRecorder) ReadRefreshTokenOwner(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRefreshTokenOwner", reflect.TypeOf((*MockRefreshTokenOwnerReader)(nil).ReadRefreshTokenOwner), ctx, token)
}

// MockRefreshTokenOwnerWriter is a mock of RefreshTokenOwnerWriter interface.
type MockRefreshTokenOwnerWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenOwnerWriterMockRecorder
}

// MockRefreshTokenOwnerWriterMockRecorder is the mock recorder for MockRefreshTokenOwnerWriter.
type MockRefreshTokenOwnerWriterMockRecorder struct {
	mock *MockRefreshTokenOwnerWriter
}

// NewMockRefreshTokenOwnerWriter creates a new mock instance.
func NewMockRefreshTokenOwnerWriter(ctrl *gomock.Controller) *MockRefreshTokenOwnerWriter {
	mock := &MockRefreshTokenOwnerWriter{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenOwnerWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenOwnerWriter) EXPECT() *MockRefreshTokenOwnerWriterMockRecorder {
	return m.recorder
}

// WriteRefreshTokenOwner mocks base method.
func (m *MockRefreshTokenOwnerWriter) WriteRefreshTokenOwner(ctx context.Context, token, clientId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRefreshTokenOwner", ctx, token, clientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRefreshTokenOwner indicates an expected call of WriteRefreshTokenOwner.
func (mr *MockRefreshTokenOwnerWriterMockRecorder) WriteRefreshTokenOwner(ctx, token, clientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRefreshTokenOwner", reflect.TypeOf((*MockRefreshTokenOwnerWriter)(nil).WriteRefreshTokenOwner), ctx, token, clientId)
}

// MockUserInfoWriter is a mock of UserInfoWriter interface.
type MockUserInfoWriter struct {
	ctrl     *gomock.Controller
	recorder *MockUserInfoWriterMockRecorder
}

// MockUserInfoWriterMockRecorder is the mock recorder for MockUserInfoWriter.
type MockUserInfoWriterMockRecorder struct {
	mock *MockUserInfoWriter
}

// NewMockUserInfoWriter creates a new mock instance.
func NewMockUserInfoWriter(ctrl *gomock.Controller) *MockUserInfoWriter {
	mock := &MockUserInfoWriter{ctrl: ctrl}
	mock.recorder = &MockUserInfoWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInfoWriter) EXPECT() *MockUserInfoWriterMockRecorder {
	return m.recorder
}

// WriteUserInfo mocks base method.
func (m *MockUserInfoWriter) WriteUserInfo(ctx context.Context, uid typedef.UserID) (typedef.SessionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUserInfo", ctx, uid)
	ret0, _ := ret[0].(typedef.SessionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteUserInfo indicates an expected call of WriteUserInfo.
func (mr *MockUserInfoWriterMockRecorder) WriteUserInfo(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUserInfo", reflect.TypeOf((*MockUserInfoWriter)(nil).WriteUserInfo), ctx, uid)
}

// MockStructValidator is a mock of StructValidator interface.
type MockStructValidator struct {
	ctrl     *gomock.Controller
	recorder *MockStructValidatorMockRecorder
}

// MockStructValidatorMockRecorder is the mock recorder for MockStructValidator.
type MockStructValidatorMockRecorder struct {
	mock *MockStructValidator
}

// NewMockStructValidator creates a new mock instance.
func NewMockStructValidator(ctrl *gomock.Controller) *MockStructValidator {
	mock := &MockStructValidator{ctrl: ctrl}
	mock.recorder = &MockStructValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStructValidator) EXPECT() *MockStructValidatorMockRecorder {
	return m.recorder
}

// Struct mocks base method.
func (m *MockStructValidator) Struct(s any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockStructValidatorMockRecorder) Struct(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockStructValidator)(nil).Struct), s)
}

// MockIdGenerator is a mock of IdGenerator interface.
type MockIdGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIdGeneratorMockRecorder
}

// MockIdGeneratorMockRecorder is the mock recorder for MockIdGenerator.
type MockIdGeneratorMockRecorder struct {
	mock *MockIdGenerator
}

// NewMockIdGenerator creates a new mock instance.
func NewMockIdGenerator(ctrl *gomock.Controller) *MockIdGenerator {
	mock := &MockIdGenerator{ctrl: ctrl}
	mock.recorder = &MockIdGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdGenerator) EXPECT() *MockIdGeneratorMockRecorder {
	return m.recorder
}

// NextID mocks base method.
func (m *MockIdGenerator) NextID() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextID")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextID indicates an expected call of NextID.
func (mr *MockIdGeneratorMockRecorder) NextID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextID", reflect.TypeOf((*MockIdGenerator)(nil).NextID))
}
